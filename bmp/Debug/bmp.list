
bmp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098c8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  08009a98  08009a98  00019a98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e8c  08009e8c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009e8c  08009e8c  00019e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e94  08009e94  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e94  08009e94  00019e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e98  08009e98  00019e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009e9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006fc  200001e8  0800a084  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008e4  0800a084  000208e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000182d9  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ce4  00000000  00000000  000384f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  0003b1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001320  00000000  00000000  0003c620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002819d  00000000  00000000  0003d940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000194e1  00000000  00000000  00065add  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5cb2  00000000  00000000  0007efbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00174c70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067bc  00000000  00000000  00174cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009a80 	.word	0x08009a80

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	08009a80 	.word	0x08009a80

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca6:	f000 b9bf 	b.w	8001028 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f84d 	bl	8000d58 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f840 	bl	8000d58 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f82f 	bl	8000d58 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f821 	bl	8000d58 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b974 	b.w	8001028 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9d08      	ldr	r5, [sp, #32]
 8000d5e:	4604      	mov	r4, r0
 8000d60:	468e      	mov	lr, r1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d14d      	bne.n	8000e02 <__udivmoddi4+0xaa>
 8000d66:	428a      	cmp	r2, r1
 8000d68:	4694      	mov	ip, r2
 8000d6a:	d969      	bls.n	8000e40 <__udivmoddi4+0xe8>
 8000d6c:	fab2 f282 	clz	r2, r2
 8000d70:	b152      	cbz	r2, 8000d88 <__udivmoddi4+0x30>
 8000d72:	fa01 f302 	lsl.w	r3, r1, r2
 8000d76:	f1c2 0120 	rsb	r1, r2, #32
 8000d7a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d82:	ea41 0e03 	orr.w	lr, r1, r3
 8000d86:	4094      	lsls	r4, r2
 8000d88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d8c:	0c21      	lsrs	r1, r4, #16
 8000d8e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d92:	fa1f f78c 	uxth.w	r7, ip
 8000d96:	fb08 e316 	mls	r3, r8, r6, lr
 8000d9a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9e:	fb06 f107 	mul.w	r1, r6, r7
 8000da2:	4299      	cmp	r1, r3
 8000da4:	d90a      	bls.n	8000dbc <__udivmoddi4+0x64>
 8000da6:	eb1c 0303 	adds.w	r3, ip, r3
 8000daa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dae:	f080 811f 	bcs.w	8000ff0 <__udivmoddi4+0x298>
 8000db2:	4299      	cmp	r1, r3
 8000db4:	f240 811c 	bls.w	8000ff0 <__udivmoddi4+0x298>
 8000db8:	3e02      	subs	r6, #2
 8000dba:	4463      	add	r3, ip
 8000dbc:	1a5b      	subs	r3, r3, r1
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dcc:	fb00 f707 	mul.w	r7, r0, r7
 8000dd0:	42a7      	cmp	r7, r4
 8000dd2:	d90a      	bls.n	8000dea <__udivmoddi4+0x92>
 8000dd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ddc:	f080 810a 	bcs.w	8000ff4 <__udivmoddi4+0x29c>
 8000de0:	42a7      	cmp	r7, r4
 8000de2:	f240 8107 	bls.w	8000ff4 <__udivmoddi4+0x29c>
 8000de6:	4464      	add	r4, ip
 8000de8:	3802      	subs	r0, #2
 8000dea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dee:	1be4      	subs	r4, r4, r7
 8000df0:	2600      	movs	r6, #0
 8000df2:	b11d      	cbz	r5, 8000dfc <__udivmoddi4+0xa4>
 8000df4:	40d4      	lsrs	r4, r2
 8000df6:	2300      	movs	r3, #0
 8000df8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d909      	bls.n	8000e1a <__udivmoddi4+0xc2>
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	f000 80ef 	beq.w	8000fea <__udivmoddi4+0x292>
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e12:	4630      	mov	r0, r6
 8000e14:	4631      	mov	r1, r6
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	fab3 f683 	clz	r6, r3
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	d14a      	bne.n	8000eb8 <__udivmoddi4+0x160>
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xd4>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 80f9 	bhi.w	800101e <__udivmoddi4+0x2c6>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	469e      	mov	lr, r3
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e0      	beq.n	8000dfc <__udivmoddi4+0xa4>
 8000e3a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3e:	e7dd      	b.n	8000dfc <__udivmoddi4+0xa4>
 8000e40:	b902      	cbnz	r2, 8000e44 <__udivmoddi4+0xec>
 8000e42:	deff      	udf	#255	; 0xff
 8000e44:	fab2 f282 	clz	r2, r2
 8000e48:	2a00      	cmp	r2, #0
 8000e4a:	f040 8092 	bne.w	8000f72 <__udivmoddi4+0x21a>
 8000e4e:	eba1 010c 	sub.w	r1, r1, ip
 8000e52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e56:	fa1f fe8c 	uxth.w	lr, ip
 8000e5a:	2601      	movs	r6, #1
 8000e5c:	0c20      	lsrs	r0, r4, #16
 8000e5e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e62:	fb07 1113 	mls	r1, r7, r3, r1
 8000e66:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e6a:	fb0e f003 	mul.w	r0, lr, r3
 8000e6e:	4288      	cmp	r0, r1
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x12c>
 8000e72:	eb1c 0101 	adds.w	r1, ip, r1
 8000e76:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e7a:	d202      	bcs.n	8000e82 <__udivmoddi4+0x12a>
 8000e7c:	4288      	cmp	r0, r1
 8000e7e:	f200 80cb 	bhi.w	8001018 <__udivmoddi4+0x2c0>
 8000e82:	4643      	mov	r3, r8
 8000e84:	1a09      	subs	r1, r1, r0
 8000e86:	b2a4      	uxth	r4, r4
 8000e88:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e8c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e90:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e94:	fb0e fe00 	mul.w	lr, lr, r0
 8000e98:	45a6      	cmp	lr, r4
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x156>
 8000e9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea4:	d202      	bcs.n	8000eac <__udivmoddi4+0x154>
 8000ea6:	45a6      	cmp	lr, r4
 8000ea8:	f200 80bb 	bhi.w	8001022 <__udivmoddi4+0x2ca>
 8000eac:	4608      	mov	r0, r1
 8000eae:	eba4 040e 	sub.w	r4, r4, lr
 8000eb2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb6:	e79c      	b.n	8000df2 <__udivmoddi4+0x9a>
 8000eb8:	f1c6 0720 	rsb	r7, r6, #32
 8000ebc:	40b3      	lsls	r3, r6
 8000ebe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec6:	fa20 f407 	lsr.w	r4, r0, r7
 8000eca:	fa01 f306 	lsl.w	r3, r1, r6
 8000ece:	431c      	orrs	r4, r3
 8000ed0:	40f9      	lsrs	r1, r7
 8000ed2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed6:	fa00 f306 	lsl.w	r3, r0, r6
 8000eda:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ede:	0c20      	lsrs	r0, r4, #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eec:	fb08 f00e 	mul.w	r0, r8, lr
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef6:	d90b      	bls.n	8000f10 <__udivmoddi4+0x1b8>
 8000ef8:	eb1c 0101 	adds.w	r1, ip, r1
 8000efc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f00:	f080 8088 	bcs.w	8001014 <__udivmoddi4+0x2bc>
 8000f04:	4288      	cmp	r0, r1
 8000f06:	f240 8085 	bls.w	8001014 <__udivmoddi4+0x2bc>
 8000f0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1a09      	subs	r1, r1, r0
 8000f12:	b2a4      	uxth	r4, r4
 8000f14:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f18:	fb09 1110 	mls	r1, r9, r0, r1
 8000f1c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f20:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f24:	458e      	cmp	lr, r1
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x1e2>
 8000f28:	eb1c 0101 	adds.w	r1, ip, r1
 8000f2c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f30:	d26c      	bcs.n	800100c <__udivmoddi4+0x2b4>
 8000f32:	458e      	cmp	lr, r1
 8000f34:	d96a      	bls.n	800100c <__udivmoddi4+0x2b4>
 8000f36:	3802      	subs	r0, #2
 8000f38:	4461      	add	r1, ip
 8000f3a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f42:	eba1 010e 	sub.w	r1, r1, lr
 8000f46:	42a1      	cmp	r1, r4
 8000f48:	46c8      	mov	r8, r9
 8000f4a:	46a6      	mov	lr, r4
 8000f4c:	d356      	bcc.n	8000ffc <__udivmoddi4+0x2a4>
 8000f4e:	d053      	beq.n	8000ff8 <__udivmoddi4+0x2a0>
 8000f50:	b15d      	cbz	r5, 8000f6a <__udivmoddi4+0x212>
 8000f52:	ebb3 0208 	subs.w	r2, r3, r8
 8000f56:	eb61 010e 	sbc.w	r1, r1, lr
 8000f5a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f62:	40f1      	lsrs	r1, r6
 8000f64:	431f      	orrs	r7, r3
 8000f66:	e9c5 7100 	strd	r7, r1, [r5]
 8000f6a:	2600      	movs	r6, #0
 8000f6c:	4631      	mov	r1, r6
 8000f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f72:	f1c2 0320 	rsb	r3, r2, #32
 8000f76:	40d8      	lsrs	r0, r3
 8000f78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f7c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f80:	4091      	lsls	r1, r2
 8000f82:	4301      	orrs	r1, r0
 8000f84:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f88:	fa1f fe8c 	uxth.w	lr, ip
 8000f8c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f90:	fb07 3610 	mls	r6, r7, r0, r3
 8000f94:	0c0b      	lsrs	r3, r1, #16
 8000f96:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f9a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9e:	429e      	cmp	r6, r3
 8000fa0:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa4:	d908      	bls.n	8000fb8 <__udivmoddi4+0x260>
 8000fa6:	eb1c 0303 	adds.w	r3, ip, r3
 8000faa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fae:	d22f      	bcs.n	8001010 <__udivmoddi4+0x2b8>
 8000fb0:	429e      	cmp	r6, r3
 8000fb2:	d92d      	bls.n	8001010 <__udivmoddi4+0x2b8>
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	4463      	add	r3, ip
 8000fb8:	1b9b      	subs	r3, r3, r6
 8000fba:	b289      	uxth	r1, r1
 8000fbc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fc0:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc8:	fb06 f30e 	mul.w	r3, r6, lr
 8000fcc:	428b      	cmp	r3, r1
 8000fce:	d908      	bls.n	8000fe2 <__udivmoddi4+0x28a>
 8000fd0:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fd8:	d216      	bcs.n	8001008 <__udivmoddi4+0x2b0>
 8000fda:	428b      	cmp	r3, r1
 8000fdc:	d914      	bls.n	8001008 <__udivmoddi4+0x2b0>
 8000fde:	3e02      	subs	r6, #2
 8000fe0:	4461      	add	r1, ip
 8000fe2:	1ac9      	subs	r1, r1, r3
 8000fe4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe8:	e738      	b.n	8000e5c <__udivmoddi4+0x104>
 8000fea:	462e      	mov	r6, r5
 8000fec:	4628      	mov	r0, r5
 8000fee:	e705      	b.n	8000dfc <__udivmoddi4+0xa4>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	e6e3      	b.n	8000dbc <__udivmoddi4+0x64>
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	e6f8      	b.n	8000dea <__udivmoddi4+0x92>
 8000ff8:	454b      	cmp	r3, r9
 8000ffa:	d2a9      	bcs.n	8000f50 <__udivmoddi4+0x1f8>
 8000ffc:	ebb9 0802 	subs.w	r8, r9, r2
 8001000:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001004:	3801      	subs	r0, #1
 8001006:	e7a3      	b.n	8000f50 <__udivmoddi4+0x1f8>
 8001008:	4646      	mov	r6, r8
 800100a:	e7ea      	b.n	8000fe2 <__udivmoddi4+0x28a>
 800100c:	4620      	mov	r0, r4
 800100e:	e794      	b.n	8000f3a <__udivmoddi4+0x1e2>
 8001010:	4640      	mov	r0, r8
 8001012:	e7d1      	b.n	8000fb8 <__udivmoddi4+0x260>
 8001014:	46d0      	mov	r8, sl
 8001016:	e77b      	b.n	8000f10 <__udivmoddi4+0x1b8>
 8001018:	3b02      	subs	r3, #2
 800101a:	4461      	add	r1, ip
 800101c:	e732      	b.n	8000e84 <__udivmoddi4+0x12c>
 800101e:	4630      	mov	r0, r6
 8001020:	e709      	b.n	8000e36 <__udivmoddi4+0xde>
 8001022:	4464      	add	r4, ip
 8001024:	3802      	subs	r0, #2
 8001026:	e742      	b.n	8000eae <__udivmoddi4+0x156>

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af04      	add	r7, sp, #16
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <BMP280_Read8+0x38>)
 800103c:	6818      	ldr	r0, [r3, #0]
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	b29a      	uxth	r2, r3
 8001042:	230a      	movs	r3, #10
 8001044:	9302      	str	r3, [sp, #8]
 8001046:	2301      	movs	r3, #1
 8001048:	9301      	str	r3, [sp, #4]
 800104a:	f107 030f 	add.w	r3, r7, #15
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2301      	movs	r3, #1
 8001052:	21ec      	movs	r1, #236	; 0xec
 8001054:	f002 f876 	bl	8003144 <HAL_I2C_Mem_Read>
  return tmp;
 8001058:	7bfb      	ldrb	r3, [r7, #15]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return tmp[1];
#endif
}
 800105a:	4618      	mov	r0, r3
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000204 	.word	0x20000204

08001068 <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af04      	add	r7, sp, #16
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <BMP280_Read16+0x40>)
 8001074:	6818      	ldr	r0, [r3, #0]
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	b29a      	uxth	r2, r3
 800107a:	230a      	movs	r3, #10
 800107c:	9302      	str	r3, [sp, #8]
 800107e:	2302      	movs	r3, #2
 8001080:	9301      	str	r3, [sp, #4]
 8001082:	f107 030c 	add.w	r3, r7, #12
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	2301      	movs	r3, #1
 800108a:	21ec      	movs	r1, #236	; 0xec
 800108c:	f002 f85a 	bl	8003144 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 8001090:	7b3b      	ldrb	r3, [r7, #12]
 8001092:	021b      	lsls	r3, r3, #8
 8001094:	b21a      	sxth	r2, r3
 8001096:	7b7b      	ldrb	r3, [r7, #13]
 8001098:	b21b      	sxth	r3, r3
 800109a:	4313      	orrs	r3, r2
 800109c:	b21b      	sxth	r3, r3
 800109e:	b29b      	uxth	r3, r3
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 8) | tmp[2]);
#endif
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000204 	.word	0x20000204

080010ac <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ffd5 	bl	8001068 <BMP280_Read16>
 80010be:	4603      	mov	r3, r0
 80010c0:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 80010c2:	89fb      	ldrh	r3, [r7, #14]
 80010c4:	0a1b      	lsrs	r3, r3, #8
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	b21a      	sxth	r2, r3
 80010ca:	89fb      	ldrh	r3, [r7, #14]
 80010cc:	021b      	lsls	r3, r3, #8
 80010ce:	b21b      	sxth	r3, r3
 80010d0:	4313      	orrs	r3, r2
 80010d2:	b21b      	sxth	r3, r3
 80010d4:	b29b      	uxth	r3, r3
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af04      	add	r7, sp, #16
 80010e6:	4603      	mov	r3, r0
 80010e8:	460a      	mov	r2, r1
 80010ea:	71fb      	strb	r3, [r7, #7]
 80010ec:	4613      	mov	r3, r2
 80010ee:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <BMP280_Write8+0x34>)
 80010f2:	6818      	ldr	r0, [r3, #0]
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	230a      	movs	r3, #10
 80010fa:	9302      	str	r3, [sp, #8]
 80010fc:	2301      	movs	r3, #1
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	1dbb      	adds	r3, r7, #6
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	21ec      	movs	r1, #236	; 0xec
 8001108:	f001 ff08 	bl	8002f1c <HAL_I2C_Mem_Write>
	tmp[1] = data;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000204 	.word	0x20000204

08001118 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af04      	add	r7, sp, #16
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
 8001122:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <BMP280_Read24+0x40>)
 8001124:	6818      	ldr	r0, [r3, #0]
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	b29a      	uxth	r2, r3
 800112a:	230a      	movs	r3, #10
 800112c:	9302      	str	r3, [sp, #8]
 800112e:	2303      	movs	r3, #3
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	f107 030c 	add.w	r3, r7, #12
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	2301      	movs	r3, #1
 800113a:	21ec      	movs	r1, #236	; 0xec
 800113c:	f002 f802 	bl	8003144 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 8001140:	7b3b      	ldrb	r3, [r7, #12]
 8001142:	041a      	lsls	r2, r3, #16
 8001144:	7b7b      	ldrb	r3, [r7, #13]
 8001146:	021b      	lsls	r3, r3, #8
 8001148:	4313      	orrs	r3, r2
 800114a:	7bba      	ldrb	r2, [r7, #14]
 800114c:	4313      	orrs	r3, r2
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
#endif
}
 800114e:	4618      	mov	r0, r3
 8001150:	3710      	adds	r7, #16
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000204 	.word	0x20000204

0800115c <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
}
#if(BMP_I2C == 1)
void BMP280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	4608      	mov	r0, r1
 8001166:	4611      	mov	r1, r2
 8001168:	461a      	mov	r2, r3
 800116a:	4603      	mov	r3, r0
 800116c:	70fb      	strb	r3, [r7, #3]
 800116e:	460b      	mov	r3, r1
 8001170:	70bb      	strb	r3, [r7, #2]
 8001172:	4613      	mov	r3, r2
 8001174:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 8001176:	4a48      	ldr	r2, [pc, #288]	; (8001298 <BMP280_Init+0x13c>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6013      	str	r3, [r2, #0]
	spi_h = spi_handler;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_Delay(5);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
	if (mode > BMP280_NORMALMODE)
 800117c:	787b      	ldrb	r3, [r7, #1]
 800117e:	2b03      	cmp	r3, #3
 8001180:	d901      	bls.n	8001186 <BMP280_Init+0x2a>
	    mode = BMP280_NORMALMODE;
 8001182:	2303      	movs	r3, #3
 8001184:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 8001186:	4a45      	ldr	r2, [pc, #276]	; (800129c <BMP280_Init+0x140>)
 8001188:	787b      	ldrb	r3, [r7, #1]
 800118a:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 800118c:	787b      	ldrb	r3, [r7, #1]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d101      	bne.n	8001196 <BMP280_Init+0x3a>
		mode = BMP280_SLEEPMODE;
 8001192:	2300      	movs	r3, #0
 8001194:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 8001196:	78fb      	ldrb	r3, [r7, #3]
 8001198:	2b05      	cmp	r3, #5
 800119a:	d901      	bls.n	80011a0 <BMP280_Init+0x44>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 800119c:	2305      	movs	r3, #5
 800119e:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 80011a0:	4a3f      	ldr	r2, [pc, #252]	; (80012a0 <BMP280_Init+0x144>)
 80011a2:	78fb      	ldrb	r3, [r7, #3]
 80011a4:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 80011a6:	78bb      	ldrb	r3, [r7, #2]
 80011a8:	2b05      	cmp	r3, #5
 80011aa:	d901      	bls.n	80011b0 <BMP280_Init+0x54>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 80011ac:	2305      	movs	r3, #5
 80011ae:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 80011b0:	4a3c      	ldr	r2, [pc, #240]	; (80012a4 <BMP280_Init+0x148>)
 80011b2:	78bb      	ldrb	r3, [r7, #2]
 80011b4:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 80011b6:	bf00      	nop
 80011b8:	20d0      	movs	r0, #208	; 0xd0
 80011ba:	f7ff ff37 	bl	800102c <BMP280_Read8>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b58      	cmp	r3, #88	; 0x58
 80011c2:	d1f9      	bne.n	80011b8 <BMP280_Init+0x5c>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 80011c4:	2088      	movs	r0, #136	; 0x88
 80011c6:	f7ff ff71 	bl	80010ac <BMP280_Read16LE>
 80011ca:	4603      	mov	r3, r0
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b36      	ldr	r3, [pc, #216]	; (80012a8 <BMP280_Init+0x14c>)
 80011d0:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 80011d2:	208a      	movs	r0, #138	; 0x8a
 80011d4:	f7ff ff6a 	bl	80010ac <BMP280_Read16LE>
 80011d8:	4603      	mov	r3, r0
 80011da:	b21a      	sxth	r2, r3
 80011dc:	4b33      	ldr	r3, [pc, #204]	; (80012ac <BMP280_Init+0x150>)
 80011de:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 80011e0:	208c      	movs	r0, #140	; 0x8c
 80011e2:	f7ff ff63 	bl	80010ac <BMP280_Read16LE>
 80011e6:	4603      	mov	r3, r0
 80011e8:	b21a      	sxth	r2, r3
 80011ea:	4b31      	ldr	r3, [pc, #196]	; (80012b0 <BMP280_Init+0x154>)
 80011ec:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 80011ee:	208e      	movs	r0, #142	; 0x8e
 80011f0:	f7ff ff5c 	bl	80010ac <BMP280_Read16LE>
 80011f4:	4603      	mov	r3, r0
 80011f6:	461a      	mov	r2, r3
 80011f8:	4b2e      	ldr	r3, [pc, #184]	; (80012b4 <BMP280_Init+0x158>)
 80011fa:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 80011fc:	2090      	movs	r0, #144	; 0x90
 80011fe:	f7ff ff55 	bl	80010ac <BMP280_Read16LE>
 8001202:	4603      	mov	r3, r0
 8001204:	b21a      	sxth	r2, r3
 8001206:	4b2c      	ldr	r3, [pc, #176]	; (80012b8 <BMP280_Init+0x15c>)
 8001208:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 800120a:	2092      	movs	r0, #146	; 0x92
 800120c:	f7ff ff4e 	bl	80010ac <BMP280_Read16LE>
 8001210:	4603      	mov	r3, r0
 8001212:	b21a      	sxth	r2, r3
 8001214:	4b29      	ldr	r3, [pc, #164]	; (80012bc <BMP280_Init+0x160>)
 8001216:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 8001218:	2094      	movs	r0, #148	; 0x94
 800121a:	f7ff ff47 	bl	80010ac <BMP280_Read16LE>
 800121e:	4603      	mov	r3, r0
 8001220:	b21a      	sxth	r2, r3
 8001222:	4b27      	ldr	r3, [pc, #156]	; (80012c0 <BMP280_Init+0x164>)
 8001224:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 8001226:	2096      	movs	r0, #150	; 0x96
 8001228:	f7ff ff40 	bl	80010ac <BMP280_Read16LE>
 800122c:	4603      	mov	r3, r0
 800122e:	b21a      	sxth	r2, r3
 8001230:	4b24      	ldr	r3, [pc, #144]	; (80012c4 <BMP280_Init+0x168>)
 8001232:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 8001234:	2098      	movs	r0, #152	; 0x98
 8001236:	f7ff ff39 	bl	80010ac <BMP280_Read16LE>
 800123a:	4603      	mov	r3, r0
 800123c:	b21a      	sxth	r2, r3
 800123e:	4b22      	ldr	r3, [pc, #136]	; (80012c8 <BMP280_Init+0x16c>)
 8001240:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 8001242:	209a      	movs	r0, #154	; 0x9a
 8001244:	f7ff ff32 	bl	80010ac <BMP280_Read16LE>
 8001248:	4603      	mov	r3, r0
 800124a:	b21a      	sxth	r2, r3
 800124c:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <BMP280_Init+0x170>)
 800124e:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 8001250:	209c      	movs	r0, #156	; 0x9c
 8001252:	f7ff ff2b 	bl	80010ac <BMP280_Read16LE>
 8001256:	4603      	mov	r3, r0
 8001258:	b21a      	sxth	r2, r3
 800125a:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <BMP280_Init+0x174>)
 800125c:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 800125e:	209e      	movs	r0, #158	; 0x9e
 8001260:	f7ff ff24 	bl	80010ac <BMP280_Read16LE>
 8001264:	4603      	mov	r3, r0
 8001266:	b21a      	sxth	r2, r3
 8001268:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <BMP280_Init+0x178>)
 800126a:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 800126c:	78fb      	ldrb	r3, [r7, #3]
 800126e:	015b      	lsls	r3, r3, #5
 8001270:	b25a      	sxtb	r2, r3
 8001272:	78bb      	ldrb	r3, [r7, #2]
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	b25b      	sxtb	r3, r3
 8001278:	4313      	orrs	r3, r2
 800127a:	b25a      	sxtb	r2, r3
 800127c:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001280:	4313      	orrs	r3, r2
 8001282:	b25b      	sxtb	r3, r3
 8001284:	b2db      	uxtb	r3, r3
 8001286:	4619      	mov	r1, r3
 8001288:	20f4      	movs	r0, #244	; 0xf4
 800128a:	f7ff ff29 	bl	80010e0 <BMP280_Write8>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000204 	.word	0x20000204
 800129c:	2000020a 	.word	0x2000020a
 80012a0:	20000208 	.word	0x20000208
 80012a4:	20000209 	.word	0x20000209
 80012a8:	20000220 	.word	0x20000220
 80012ac:	2000020c 	.word	0x2000020c
 80012b0:	2000020e 	.word	0x2000020e
 80012b4:	20000222 	.word	0x20000222
 80012b8:	20000210 	.word	0x20000210
 80012bc:	20000212 	.word	0x20000212
 80012c0:	20000214 	.word	0x20000214
 80012c4:	20000216 	.word	0x20000216
 80012c8:	20000218 	.word	0x20000218
 80012cc:	2000021a 	.word	0x2000021a
 80012d0:	2000021c 	.word	0x2000021c
 80012d4:	2000021e 	.word	0x2000021e

080012d8 <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 80012de:	4b3d      	ldr	r3, [pc, #244]	; (80013d4 <BMP280_ReadTemperature+0xfc>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d16d      	bne.n	80013c2 <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 80012e6:	20f4      	movs	r0, #244	; 0xf4
 80012e8:	f7ff fea0 	bl	800102c <BMP280_Read8>
 80012ec:	4603      	mov	r3, r0
 80012ee:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 80012f0:	7dfb      	ldrb	r3, [r7, #23]
 80012f2:	f023 0303 	bic.w	r3, r3, #3
 80012f6:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 80012f8:	7dfb      	ldrb	r3, [r7, #23]
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 8001300:	7dfb      	ldrb	r3, [r7, #23]
 8001302:	4619      	mov	r1, r3
 8001304:	20f4      	movs	r0, #244	; 0xf4
 8001306:	f7ff feeb 	bl	80010e0 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 800130a:	20f4      	movs	r0, #244	; 0xf4
 800130c:	f7ff fe8e 	bl	800102c <BMP280_Read8>
 8001310:	4603      	mov	r3, r0
 8001312:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 8001314:	7dbb      	ldrb	r3, [r7, #22]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 800131c:	7dbb      	ldrb	r3, [r7, #22]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d14f      	bne.n	80013c2 <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001322:	20f4      	movs	r0, #244	; 0xf4
 8001324:	f7ff fe82 	bl	800102c <BMP280_Read8>
 8001328:	4603      	mov	r3, r0
 800132a:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 800132c:	7dbb      	ldrb	r3, [r7, #22]
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 8001334:	7dbb      	ldrb	r3, [r7, #22]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d000      	beq.n	800133c <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 800133a:	e7f2      	b.n	8001322 <BMP280_ReadTemperature+0x4a>
				  break;
 800133c:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 800133e:	20fa      	movs	r0, #250	; 0xfa
 8001340:	f7ff feea 	bl	8001118 <BMP280_Read24>
 8001344:	4603      	mov	r3, r0
 8001346:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	111b      	asrs	r3, r3, #4
 800134c:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	10da      	asrs	r2, r3, #3
 8001352:	4b21      	ldr	r3, [pc, #132]	; (80013d8 <BMP280_ReadTemperature+0x100>)
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 800135a:	4a20      	ldr	r2, [pc, #128]	; (80013dc <BMP280_ReadTemperature+0x104>)
 800135c:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001360:	fb02 f303 	mul.w	r3, r2, r3
 8001364:	12db      	asrs	r3, r3, #11
 8001366:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	111b      	asrs	r3, r3, #4
 800136c:	4a1a      	ldr	r2, [pc, #104]	; (80013d8 <BMP280_ReadTemperature+0x100>)
 800136e:	8812      	ldrh	r2, [r2, #0]
 8001370:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	1112      	asrs	r2, r2, #4
 8001376:	4918      	ldr	r1, [pc, #96]	; (80013d8 <BMP280_ReadTemperature+0x100>)
 8001378:	8809      	ldrh	r1, [r1, #0]
 800137a:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 800137c:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001380:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 8001382:	4a17      	ldr	r2, [pc, #92]	; (80013e0 <BMP280_ReadTemperature+0x108>)
 8001384:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001388:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 800138c:	139b      	asrs	r3, r3, #14
 800138e:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	4413      	add	r3, r2
 8001396:	4a13      	ldr	r2, [pc, #76]	; (80013e4 <BMP280_ReadTemperature+0x10c>)
 8001398:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 800139a:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <BMP280_ReadTemperature+0x10c>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	4613      	mov	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	3380      	adds	r3, #128	; 0x80
 80013a6:	121b      	asrs	r3, r3, #8
 80013a8:	ee07 3a90 	vmov	s15, r3
 80013ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b0:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 80013b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80013b8:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80013e8 <BMP280_ReadTemperature+0x110>
 80013bc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013c0:	e001      	b.n	80013c6 <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 80013c2:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80013ec <BMP280_ReadTemperature+0x114>
}
 80013c6:	eef0 7a47 	vmov.f32	s15, s14
 80013ca:	eeb0 0a67 	vmov.f32	s0, s15
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	2000020a 	.word	0x2000020a
 80013d8:	20000220 	.word	0x20000220
 80013dc:	2000020c 	.word	0x2000020c
 80013e0:	2000020e 	.word	0x2000020e
 80013e4:	20000224 	.word	0x20000224
 80013e8:	42c80000 	.word	0x42c80000
 80013ec:	c2c60000 	.word	0xc2c60000

080013f0 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 80013f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013f4:	b0cc      	sub	sp, #304	; 0x130
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 80013fc:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 8001400:	f7ff ff6a 	bl	80012d8 <BMP280_ReadTemperature>
 8001404:	eef0 7a40 	vmov.f32	s15, s0
 8001408:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800140c:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 8001410:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001414:	edd3 7a00 	vldr	s15, [r3]
 8001418:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 80016e8 <BMP280_ReadTemperatureAndPressure+0x2f8>
 800141c:	eef4 7a47 	vcmp.f32	s15, s14
 8001420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001424:	d101      	bne.n	800142a <BMP280_ReadTemperatureAndPressure+0x3a>
		  return -1;
 8001426:	23ff      	movs	r3, #255	; 0xff
 8001428:	e2bf      	b.n	80019aa <BMP280_ReadTemperatureAndPressure+0x5ba>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 800142a:	20f7      	movs	r0, #247	; 0xf7
 800142c:	f7ff fe74 	bl	8001118 <BMP280_Read24>
 8001430:	4603      	mov	r3, r0
 8001432:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	  adc_P >>= 4;
 8001436:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800143a:	111b      	asrs	r3, r3, #4
 800143c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	  var1 = ((int64_t)t_fine) - 128000;
 8001440:	4baa      	ldr	r3, [pc, #680]	; (80016ec <BMP280_ReadTemperatureAndPressure+0x2fc>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	17da      	asrs	r2, r3, #31
 8001446:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800144a:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800144e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8001452:	460b      	mov	r3, r1
 8001454:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 8001458:	64bb      	str	r3, [r7, #72]	; 0x48
 800145a:	4613      	mov	r3, r2
 800145c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001460:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001462:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001466:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = var1 * var1 * (int64_t)p6;
 800146a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800146e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001472:	fb03 f102 	mul.w	r1, r3, r2
 8001476:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800147a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800147e:	fb02 f303 	mul.w	r3, r2, r3
 8001482:	18ca      	adds	r2, r1, r3
 8001484:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001488:	fba3 4503 	umull	r4, r5, r3, r3
 800148c:	1953      	adds	r3, r2, r5
 800148e:	461d      	mov	r5, r3
 8001490:	4b97      	ldr	r3, [pc, #604]	; (80016f0 <BMP280_ReadTemperatureAndPressure+0x300>)
 8001492:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001496:	b21b      	sxth	r3, r3
 8001498:	17da      	asrs	r2, r3, #31
 800149a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800149e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80014a2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80014a6:	4603      	mov	r3, r0
 80014a8:	fb03 f205 	mul.w	r2, r3, r5
 80014ac:	460b      	mov	r3, r1
 80014ae:	fb04 f303 	mul.w	r3, r4, r3
 80014b2:	4413      	add	r3, r2
 80014b4:	4602      	mov	r2, r0
 80014b6:	fba4 8902 	umull	r8, r9, r4, r2
 80014ba:	444b      	add	r3, r9
 80014bc:	4699      	mov	r9, r3
 80014be:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
 80014c2:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 80014c6:	4b8b      	ldr	r3, [pc, #556]	; (80016f4 <BMP280_ReadTemperatureAndPressure+0x304>)
 80014c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014cc:	b21b      	sxth	r3, r3
 80014ce:	17da      	asrs	r2, r3, #31
 80014d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80014d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80014d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014dc:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 80014e0:	462a      	mov	r2, r5
 80014e2:	fb02 f203 	mul.w	r2, r2, r3
 80014e6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80014ea:	4621      	mov	r1, r4
 80014ec:	fb01 f303 	mul.w	r3, r1, r3
 80014f0:	441a      	add	r2, r3
 80014f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014f6:	4621      	mov	r1, r4
 80014f8:	fba3 ab01 	umull	sl, fp, r3, r1
 80014fc:	eb02 030b 	add.w	r3, r2, fp
 8001500:	469b      	mov	fp, r3
 8001502:	f04f 0000 	mov.w	r0, #0
 8001506:	f04f 0100 	mov.w	r1, #0
 800150a:	ea4f 414b 	mov.w	r1, fp, lsl #17
 800150e:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8001512:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8001516:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800151a:	1814      	adds	r4, r2, r0
 800151c:	643c      	str	r4, [r7, #64]	; 0x40
 800151e:	414b      	adcs	r3, r1
 8001520:	647b      	str	r3, [r7, #68]	; 0x44
 8001522:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001526:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var2 = var2 + (((int64_t)p4)<<35);
 800152a:	4b73      	ldr	r3, [pc, #460]	; (80016f8 <BMP280_ReadTemperatureAndPressure+0x308>)
 800152c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001530:	b21b      	sxth	r3, r3
 8001532:	17da      	asrs	r2, r3, #31
 8001534:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001538:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800153c:	f04f 0000 	mov.w	r0, #0
 8001540:	f04f 0100 	mov.w	r1, #0
 8001544:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001548:	00d9      	lsls	r1, r3, #3
 800154a:	2000      	movs	r0, #0
 800154c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001550:	1814      	adds	r4, r2, r0
 8001552:	63bc      	str	r4, [r7, #56]	; 0x38
 8001554:	414b      	adcs	r3, r1
 8001556:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001558:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800155c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001560:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001564:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001568:	fb03 f102 	mul.w	r1, r3, r2
 800156c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001570:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001574:	fb02 f303 	mul.w	r3, r2, r3
 8001578:	18ca      	adds	r2, r1, r3
 800157a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800157e:	fba3 1303 	umull	r1, r3, r3, r3
 8001582:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001586:	460b      	mov	r3, r1
 8001588:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800158c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001590:	18d3      	adds	r3, r2, r3
 8001592:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001596:	4b59      	ldr	r3, [pc, #356]	; (80016fc <BMP280_ReadTemperatureAndPressure+0x30c>)
 8001598:	f9b3 3000 	ldrsh.w	r3, [r3]
 800159c:	b21b      	sxth	r3, r3
 800159e:	17da      	asrs	r2, r3, #31
 80015a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80015a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80015a8:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80015ac:	462b      	mov	r3, r5
 80015ae:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80015b2:	4642      	mov	r2, r8
 80015b4:	fb02 f203 	mul.w	r2, r2, r3
 80015b8:	464b      	mov	r3, r9
 80015ba:	4621      	mov	r1, r4
 80015bc:	fb01 f303 	mul.w	r3, r1, r3
 80015c0:	4413      	add	r3, r2
 80015c2:	4622      	mov	r2, r4
 80015c4:	4641      	mov	r1, r8
 80015c6:	fba2 1201 	umull	r1, r2, r2, r1
 80015ca:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80015ce:	460a      	mov	r2, r1
 80015d0:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 80015d4:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80015d8:	4413      	add	r3, r2
 80015da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80015de:	f04f 0000 	mov.w	r0, #0
 80015e2:	f04f 0100 	mov.w	r1, #0
 80015e6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80015ea:	4623      	mov	r3, r4
 80015ec:	0a18      	lsrs	r0, r3, #8
 80015ee:	462b      	mov	r3, r5
 80015f0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80015f4:	462b      	mov	r3, r5
 80015f6:	1219      	asrs	r1, r3, #8
	    ((var1 * (int64_t)p2)<<12);
 80015f8:	4b41      	ldr	r3, [pc, #260]	; (8001700 <BMP280_ReadTemperatureAndPressure+0x310>)
 80015fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015fe:	b21b      	sxth	r3, r3
 8001600:	17da      	asrs	r2, r3, #31
 8001602:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001606:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800160a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800160e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001612:	464a      	mov	r2, r9
 8001614:	fb02 f203 	mul.w	r2, r2, r3
 8001618:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800161c:	4644      	mov	r4, r8
 800161e:	fb04 f303 	mul.w	r3, r4, r3
 8001622:	441a      	add	r2, r3
 8001624:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001628:	4644      	mov	r4, r8
 800162a:	fba3 4304 	umull	r4, r3, r3, r4
 800162e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001632:	4623      	mov	r3, r4
 8001634:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800163c:	18d3      	adds	r3, r2, r3
 800163e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	f04f 0300 	mov.w	r3, #0
 800164a:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 800164e:	464c      	mov	r4, r9
 8001650:	0323      	lsls	r3, r4, #12
 8001652:	4644      	mov	r4, r8
 8001654:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001658:	4644      	mov	r4, r8
 800165a:	0322      	lsls	r2, r4, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 800165c:	1884      	adds	r4, r0, r2
 800165e:	633c      	str	r4, [r7, #48]	; 0x30
 8001660:	eb41 0303 	adc.w	r3, r1, r3
 8001664:	637b      	str	r3, [r7, #52]	; 0x34
 8001666:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800166a:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 800166e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001672:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001676:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 800167a:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800167e:	4b21      	ldr	r3, [pc, #132]	; (8001704 <BMP280_ReadTemperatureAndPressure+0x314>)
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	b29b      	uxth	r3, r3
 8001684:	2200      	movs	r2, #0
 8001686:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800168a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800168e:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8001692:	462b      	mov	r3, r5
 8001694:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8001698:	4642      	mov	r2, r8
 800169a:	fb02 f203 	mul.w	r2, r2, r3
 800169e:	464b      	mov	r3, r9
 80016a0:	4621      	mov	r1, r4
 80016a2:	fb01 f303 	mul.w	r3, r1, r3
 80016a6:	4413      	add	r3, r2
 80016a8:	4622      	mov	r2, r4
 80016aa:	4641      	mov	r1, r8
 80016ac:	fba2 1201 	umull	r1, r2, r2, r1
 80016b0:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80016b4:	460a      	mov	r2, r1
 80016b6:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80016ba:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80016be:	4413      	add	r3, r2
 80016c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80016d0:	4629      	mov	r1, r5
 80016d2:	104a      	asrs	r2, r1, #1
 80016d4:	4629      	mov	r1, r5
 80016d6:	17cb      	asrs	r3, r1, #31
 80016d8:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	  if (var1 == 0) {
 80016dc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80016e0:	4313      	orrs	r3, r2
 80016e2:	d111      	bne.n	8001708 <BMP280_ReadTemperatureAndPressure+0x318>
	    return 0;  // avoid exception caused by division by zero
 80016e4:	2300      	movs	r3, #0
 80016e6:	e160      	b.n	80019aa <BMP280_ReadTemperatureAndPressure+0x5ba>
 80016e8:	c2c60000 	.word	0xc2c60000
 80016ec:	20000224 	.word	0x20000224
 80016f0:	20000218 	.word	0x20000218
 80016f4:	20000216 	.word	0x20000216
 80016f8:	20000214 	.word	0x20000214
 80016fc:	20000212 	.word	0x20000212
 8001700:	20000210 	.word	0x20000210
 8001704:	20000222 	.word	0x20000222
	  }
	  p = 1048576 - adc_P;
 8001708:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800170c:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001710:	17da      	asrs	r2, r3, #31
 8001712:	62bb      	str	r3, [r7, #40]	; 0x28
 8001714:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001716:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800171a:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  p = (((p<<31) - var2)*3125) / var1;
 800171e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001722:	105b      	asrs	r3, r3, #1
 8001724:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001728:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800172c:	07db      	lsls	r3, r3, #31
 800172e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001732:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001736:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800173a:	4621      	mov	r1, r4
 800173c:	1a89      	subs	r1, r1, r2
 800173e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8001742:	4629      	mov	r1, r5
 8001744:	eb61 0303 	sbc.w	r3, r1, r3
 8001748:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800174c:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001750:	4622      	mov	r2, r4
 8001752:	462b      	mov	r3, r5
 8001754:	1891      	adds	r1, r2, r2
 8001756:	6239      	str	r1, [r7, #32]
 8001758:	415b      	adcs	r3, r3
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
 800175c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001760:	4621      	mov	r1, r4
 8001762:	1851      	adds	r1, r2, r1
 8001764:	61b9      	str	r1, [r7, #24]
 8001766:	4629      	mov	r1, r5
 8001768:	414b      	adcs	r3, r1
 800176a:	61fb      	str	r3, [r7, #28]
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001778:	4649      	mov	r1, r9
 800177a:	018b      	lsls	r3, r1, #6
 800177c:	4641      	mov	r1, r8
 800177e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001782:	4641      	mov	r1, r8
 8001784:	018a      	lsls	r2, r1, #6
 8001786:	4641      	mov	r1, r8
 8001788:	1889      	adds	r1, r1, r2
 800178a:	6139      	str	r1, [r7, #16]
 800178c:	4649      	mov	r1, r9
 800178e:	eb43 0101 	adc.w	r1, r3, r1
 8001792:	6179      	str	r1, [r7, #20]
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80017a0:	4649      	mov	r1, r9
 80017a2:	008b      	lsls	r3, r1, #2
 80017a4:	4641      	mov	r1, r8
 80017a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017aa:	4641      	mov	r1, r8
 80017ac:	008a      	lsls	r2, r1, #2
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	4603      	mov	r3, r0
 80017b4:	4622      	mov	r2, r4
 80017b6:	189b      	adds	r3, r3, r2
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	460b      	mov	r3, r1
 80017bc:	462a      	mov	r2, r5
 80017be:	eb42 0303 	adc.w	r3, r2, r3
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	f04f 0300 	mov.w	r3, #0
 80017cc:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80017d0:	4649      	mov	r1, r9
 80017d2:	008b      	lsls	r3, r1, #2
 80017d4:	4641      	mov	r1, r8
 80017d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017da:	4641      	mov	r1, r8
 80017dc:	008a      	lsls	r2, r1, #2
 80017de:	4610      	mov	r0, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	4603      	mov	r3, r0
 80017e4:	4622      	mov	r2, r4
 80017e6:	189b      	adds	r3, r3, r2
 80017e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80017ea:	462b      	mov	r3, r5
 80017ec:	460a      	mov	r2, r1
 80017ee:	eb42 0303 	adc.w	r3, r2, r3
 80017f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80017f4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80017f8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80017fc:	f7ff fa44 	bl	8000c88 <__aeabi_ldivmod>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 8001808:	4b6b      	ldr	r3, [pc, #428]	; (80019b8 <BMP280_ReadTemperatureAndPressure+0x5c8>)
 800180a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800180e:	b21b      	sxth	r3, r3
 8001810:	17da      	asrs	r2, r3, #31
 8001812:	673b      	str	r3, [r7, #112]	; 0x70
 8001814:	677a      	str	r2, [r7, #116]	; 0x74
 8001816:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800181a:	f04f 0000 	mov.w	r0, #0
 800181e:	f04f 0100 	mov.w	r1, #0
 8001822:	0b50      	lsrs	r0, r2, #13
 8001824:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001828:	1359      	asrs	r1, r3, #13
 800182a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800182e:	462b      	mov	r3, r5
 8001830:	fb00 f203 	mul.w	r2, r0, r3
 8001834:	4623      	mov	r3, r4
 8001836:	fb03 f301 	mul.w	r3, r3, r1
 800183a:	4413      	add	r3, r2
 800183c:	4622      	mov	r2, r4
 800183e:	fba2 1200 	umull	r1, r2, r2, r0
 8001842:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001846:	460a      	mov	r2, r1
 8001848:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800184c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8001850:	4413      	add	r3, r2
 8001852:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001856:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800185a:	f04f 0000 	mov.w	r0, #0
 800185e:	f04f 0100 	mov.w	r1, #0
 8001862:	0b50      	lsrs	r0, r2, #13
 8001864:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001868:	1359      	asrs	r1, r3, #13
 800186a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800186e:	462b      	mov	r3, r5
 8001870:	fb00 f203 	mul.w	r2, r0, r3
 8001874:	4623      	mov	r3, r4
 8001876:	fb03 f301 	mul.w	r3, r3, r1
 800187a:	4413      	add	r3, r2
 800187c:	4622      	mov	r2, r4
 800187e:	fba2 1200 	umull	r1, r2, r2, r0
 8001882:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001886:	460a      	mov	r2, r1
 8001888:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800188c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001890:	4413      	add	r3, r2
 8001892:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	f04f 0300 	mov.w	r3, #0
 800189e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80018a2:	4621      	mov	r1, r4
 80018a4:	0e4a      	lsrs	r2, r1, #25
 80018a6:	4629      	mov	r1, r5
 80018a8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80018ac:	4629      	mov	r1, r5
 80018ae:	164b      	asrs	r3, r1, #25
 80018b0:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = (((int64_t)p8) * p) >> 19;
 80018b4:	4b41      	ldr	r3, [pc, #260]	; (80019bc <BMP280_ReadTemperatureAndPressure+0x5cc>)
 80018b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ba:	b21b      	sxth	r3, r3
 80018bc:	17da      	asrs	r2, r3, #31
 80018be:	66bb      	str	r3, [r7, #104]	; 0x68
 80018c0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80018c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80018c6:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80018ca:	462a      	mov	r2, r5
 80018cc:	fb02 f203 	mul.w	r2, r2, r3
 80018d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80018d4:	4621      	mov	r1, r4
 80018d6:	fb01 f303 	mul.w	r3, r1, r3
 80018da:	4413      	add	r3, r2
 80018dc:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80018e0:	4621      	mov	r1, r4
 80018e2:	fba2 1201 	umull	r1, r2, r2, r1
 80018e6:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80018ea:	460a      	mov	r2, r1
 80018ec:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80018f0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80018f4:	4413      	add	r3, r2
 80018f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001906:	4621      	mov	r1, r4
 8001908:	0cca      	lsrs	r2, r1, #19
 800190a:	4629      	mov	r1, r5
 800190c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001910:	4629      	mov	r1, r5
 8001912:	14cb      	asrs	r3, r1, #19
 8001914:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8001918:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800191c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001920:	1884      	adds	r4, r0, r2
 8001922:	663c      	str	r4, [r7, #96]	; 0x60
 8001924:	eb41 0303 	adc.w	r3, r1, r3
 8001928:	667b      	str	r3, [r7, #100]	; 0x64
 800192a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800192e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001932:	4621      	mov	r1, r4
 8001934:	1889      	adds	r1, r1, r2
 8001936:	65b9      	str	r1, [r7, #88]	; 0x58
 8001938:	4629      	mov	r1, r5
 800193a:	eb43 0101 	adc.w	r1, r3, r1
 800193e:	65f9      	str	r1, [r7, #92]	; 0x5c
 8001940:	f04f 0000 	mov.w	r0, #0
 8001944:	f04f 0100 	mov.w	r1, #0
 8001948:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800194c:	4623      	mov	r3, r4
 800194e:	0a18      	lsrs	r0, r3, #8
 8001950:	462b      	mov	r3, r5
 8001952:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001956:	462b      	mov	r3, r5
 8001958:	1219      	asrs	r1, r3, #8
 800195a:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <BMP280_ReadTemperatureAndPressure+0x5d0>)
 800195c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001960:	b21b      	sxth	r3, r3
 8001962:	17da      	asrs	r2, r3, #31
 8001964:	653b      	str	r3, [r7, #80]	; 0x50
 8001966:	657a      	str	r2, [r7, #84]	; 0x54
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	f04f 0300 	mov.w	r3, #0
 8001970:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001974:	464c      	mov	r4, r9
 8001976:	0123      	lsls	r3, r4, #4
 8001978:	4644      	mov	r4, r8
 800197a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800197e:	4644      	mov	r4, r8
 8001980:	0122      	lsls	r2, r4, #4
 8001982:	1884      	adds	r4, r0, r2
 8001984:	603c      	str	r4, [r7, #0]
 8001986:	eb41 0303 	adc.w	r3, r1, r3
 800198a:	607b      	str	r3, [r7, #4]
 800198c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001990:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  *pressure = (int32_t)p/256;
 8001994:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001998:	2b00      	cmp	r3, #0
 800199a:	da00      	bge.n	800199e <BMP280_ReadTemperatureAndPressure+0x5ae>
 800199c:	33ff      	adds	r3, #255	; 0xff
 800199e:	121b      	asrs	r3, r3, #8
 80019a0:	461a      	mov	r2, r3
 80019a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80019a6:	601a      	str	r2, [r3, #0]

	  return 0;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80019b0:	46bd      	mov	sp, r7
 80019b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019b6:	bf00      	nop
 80019b8:	2000021e 	.word	0x2000021e
 80019bc:	2000021c 	.word	0x2000021c
 80019c0:	2000021a 	.word	0x2000021a

080019c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019c8:	f000 febf 	bl	800274a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019cc:	f000 f820 	bl	8001a10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019d0:	f000 f9ce 	bl	8001d70 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80019d4:	f000 f96e 	bl	8001cb4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80019d8:	f000 f99c 	bl	8001d14 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80019dc:	f000 f880 	bl	8001ae0 <MX_I2C1_Init>
  MX_TIM3_Init();
 80019e0:	f000 f90c 	bl	8001bfc <MX_TIM3_Init>
  MX_TIM2_Init();
 80019e4:	f000 f8bc 	bl	8001b60 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //uint8_t text[] = "siema";

  BMP280_Init(&hi2c1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 80019e8:	2301      	movs	r3, #1
 80019ea:	2203      	movs	r2, #3
 80019ec:	2101      	movs	r1, #1
 80019ee:	4805      	ldr	r0, [pc, #20]	; (8001a04 <main+0x40>)
 80019f0:	f7ff fbb4 	bl	800115c <BMP280_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80019f4:	2100      	movs	r1, #0
 80019f6:	4804      	ldr	r0, [pc, #16]	; (8001a08 <main+0x44>)
 80019f8:	f003 fb2a 	bl	8005050 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 80019fc:	4803      	ldr	r0, [pc, #12]	; (8001a0c <main+0x48>)
 80019fe:	f003 fa57 	bl	8004eb0 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a02:	e7fe      	b.n	8001a02 <main+0x3e>
 8001a04:	20000228 	.word	0x20000228
 8001a08:	200002c8 	.word	0x200002c8
 8001a0c:	2000027c 	.word	0x2000027c

08001a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b094      	sub	sp, #80	; 0x50
 8001a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a16:	f107 0320 	add.w	r3, r7, #32
 8001a1a:	2230      	movs	r2, #48	; 0x30
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f005 fb10 	bl	8007044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a24:	f107 030c 	add.w	r3, r7, #12
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001a34:	f002 f91a 	bl	8003c6c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a38:	4b27      	ldr	r3, [pc, #156]	; (8001ad8 <SystemClock_Config+0xc8>)
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3c:	4a26      	ldr	r2, [pc, #152]	; (8001ad8 <SystemClock_Config+0xc8>)
 8001a3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a42:	6413      	str	r3, [r2, #64]	; 0x40
 8001a44:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <SystemClock_Config+0xc8>)
 8001a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a50:	4b22      	ldr	r3, [pc, #136]	; (8001adc <SystemClock_Config+0xcc>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a58:	4a20      	ldr	r2, [pc, #128]	; (8001adc <SystemClock_Config+0xcc>)
 8001a5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	4b1e      	ldr	r3, [pc, #120]	; (8001adc <SystemClock_Config+0xcc>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001a70:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a76:	2302      	movs	r3, #2
 8001a78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a80:	2304      	movs	r3, #4
 8001a82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001a84:	2348      	movs	r3, #72	; 0x48
 8001a86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a90:	f107 0320 	add.w	r3, r7, #32
 8001a94:	4618      	mov	r0, r3
 8001a96:	f002 f8f9 	bl	8003c8c <HAL_RCC_OscConfig>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001aa0:	f000 fb3e 	bl	8002120 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aa4:	230f      	movs	r3, #15
 8001aa6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001aba:	f107 030c 	add.w	r3, r7, #12
 8001abe:	2102      	movs	r1, #2
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f002 fb87 	bl	80041d4 <HAL_RCC_ClockConfig>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001acc:	f000 fb28 	bl	8002120 <Error_Handler>
  }
}
 8001ad0:	bf00      	nop
 8001ad2:	3750      	adds	r7, #80	; 0x50
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40007000 	.word	0x40007000

08001ae0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ae4:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001ae6:	4a1c      	ldr	r2, [pc, #112]	; (8001b58 <MX_I2C1_Init+0x78>)
 8001ae8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8001aea:	4b1a      	ldr	r3, [pc, #104]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001aec:	4a1b      	ldr	r2, [pc, #108]	; (8001b5c <MX_I2C1_Init+0x7c>)
 8001aee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001af0:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001af6:	4b17      	ldr	r3, [pc, #92]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001af8:	2201      	movs	r2, #1
 8001afa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001afc:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b02:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b08:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b0e:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b14:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b1a:	480e      	ldr	r0, [pc, #56]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001b1c:	f001 f96e 	bl	8002dfc <HAL_I2C_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b26:	f000 fafb 	bl	8002120 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4809      	ldr	r0, [pc, #36]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001b2e:	f001 febd 	bl	80038ac <HAL_I2CEx_ConfigAnalogFilter>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b38:	f000 faf2 	bl	8002120 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4805      	ldr	r0, [pc, #20]	; (8001b54 <MX_I2C1_Init+0x74>)
 8001b40:	f001 feff 	bl	8003942 <HAL_I2CEx_ConfigDigitalFilter>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b4a:	f000 fae9 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000228 	.word	0x20000228
 8001b58:	40005400 	.word	0x40005400
 8001b5c:	00808cd2 	.word	0x00808cd2

08001b60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b66:	f107 0310 	add.w	r3, r7, #16
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
 8001b70:	609a      	str	r2, [r3, #8]
 8001b72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b7e:	4b1e      	ldr	r3, [pc, #120]	; (8001bf8 <MX_TIM2_Init+0x98>)
 8001b80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b84:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001b86:	4b1c      	ldr	r3, [pc, #112]	; (8001bf8 <MX_TIM2_Init+0x98>)
 8001b88:	2247      	movs	r2, #71	; 0x47
 8001b8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b8c:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <MX_TIM2_Init+0x98>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001b92:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <MX_TIM2_Init+0x98>)
 8001b94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b98:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b9a:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <MX_TIM2_Init+0x98>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba0:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <MX_TIM2_Init+0x98>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ba6:	4814      	ldr	r0, [pc, #80]	; (8001bf8 <MX_TIM2_Init+0x98>)
 8001ba8:	f003 f92a 	bl	8004e00 <HAL_TIM_Base_Init>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001bb2:	f000 fab5 	bl	8002120 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bbc:	f107 0310 	add.w	r3, r7, #16
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	480d      	ldr	r0, [pc, #52]	; (8001bf8 <MX_TIM2_Init+0x98>)
 8001bc4:	f003 fd72 	bl	80056ac <HAL_TIM_ConfigClockSource>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001bce:	f000 faa7 	bl	8002120 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4806      	ldr	r0, [pc, #24]	; (8001bf8 <MX_TIM2_Init+0x98>)
 8001be0:	f004 fa14 	bl	800600c <HAL_TIMEx_MasterConfigSynchronization>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001bea:	f000 fa99 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bee:	bf00      	nop
 8001bf0:	3720      	adds	r7, #32
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	2000027c 	.word	0x2000027c

08001bfc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08a      	sub	sp, #40	; 0x28
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c02:	f107 031c 	add.w	r3, r7, #28
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c0e:	463b      	mov	r3, r7
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
 8001c1c:	615a      	str	r2, [r3, #20]
 8001c1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c20:	4b22      	ldr	r3, [pc, #136]	; (8001cac <MX_TIM3_Init+0xb0>)
 8001c22:	4a23      	ldr	r2, [pc, #140]	; (8001cb0 <MX_TIM3_Init+0xb4>)
 8001c24:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001c26:	4b21      	ldr	r3, [pc, #132]	; (8001cac <MX_TIM3_Init+0xb0>)
 8001c28:	2247      	movs	r2, #71	; 0x47
 8001c2a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2c:	4b1f      	ldr	r3, [pc, #124]	; (8001cac <MX_TIM3_Init+0xb0>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001c32:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <MX_TIM3_Init+0xb0>)
 8001c34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c38:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c3a:	4b1c      	ldr	r3, [pc, #112]	; (8001cac <MX_TIM3_Init+0xb0>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c40:	4b1a      	ldr	r3, [pc, #104]	; (8001cac <MX_TIM3_Init+0xb0>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c46:	4819      	ldr	r0, [pc, #100]	; (8001cac <MX_TIM3_Init+0xb0>)
 8001c48:	f003 f9aa 	bl	8004fa0 <HAL_TIM_PWM_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001c52:	f000 fa65 	bl	8002120 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c5e:	f107 031c 	add.w	r3, r7, #28
 8001c62:	4619      	mov	r1, r3
 8001c64:	4811      	ldr	r0, [pc, #68]	; (8001cac <MX_TIM3_Init+0xb0>)
 8001c66:	f004 f9d1 	bl	800600c <HAL_TIMEx_MasterConfigSynchronization>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001c70:	f000 fa56 	bl	8002120 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c74:	2360      	movs	r3, #96	; 0x60
 8001c76:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8001c78:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c7c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c86:	463b      	mov	r3, r7
 8001c88:	2200      	movs	r2, #0
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4807      	ldr	r0, [pc, #28]	; (8001cac <MX_TIM3_Init+0xb0>)
 8001c8e:	f003 fbf9 	bl	8005484 <HAL_TIM_PWM_ConfigChannel>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001c98:	f000 fa42 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c9c:	4803      	ldr	r0, [pc, #12]	; (8001cac <MX_TIM3_Init+0xb0>)
 8001c9e:	f000 fb0d 	bl	80022bc <HAL_TIM_MspPostInit>

}
 8001ca2:	bf00      	nop
 8001ca4:	3728      	adds	r7, #40	; 0x28
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	200002c8 	.word	0x200002c8
 8001cb0:	40000400 	.word	0x40000400

08001cb4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001cb8:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <MX_USART3_UART_Init+0x58>)
 8001cba:	4a15      	ldr	r2, [pc, #84]	; (8001d10 <MX_USART3_UART_Init+0x5c>)
 8001cbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001cbe:	4b13      	ldr	r3, [pc, #76]	; (8001d0c <MX_USART3_UART_Init+0x58>)
 8001cc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cc6:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <MX_USART3_UART_Init+0x58>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ccc:	4b0f      	ldr	r3, [pc, #60]	; (8001d0c <MX_USART3_UART_Init+0x58>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <MX_USART3_UART_Init+0x58>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <MX_USART3_UART_Init+0x58>)
 8001cda:	220c      	movs	r2, #12
 8001cdc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cde:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <MX_USART3_UART_Init+0x58>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce4:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <MX_USART3_UART_Init+0x58>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cea:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <MX_USART3_UART_Init+0x58>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <MX_USART3_UART_Init+0x58>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001cf6:	4805      	ldr	r0, [pc, #20]	; (8001d0c <MX_USART3_UART_Init+0x58>)
 8001cf8:	f004 fa34 	bl	8006164 <HAL_UART_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001d02:	f000 fa0d 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000314 	.word	0x20000314
 8001d10:	40004800 	.word	0x40004800

08001d14 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001d18:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d1a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001d1e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001d20:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d22:	2206      	movs	r2, #6
 8001d24:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001d26:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d28:	2202      	movs	r2, #2
 8001d2a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001d32:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d34:	2202      	movs	r2, #2
 8001d36:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001d44:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001d4a:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001d56:	4805      	ldr	r0, [pc, #20]	; (8001d6c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001d58:	f001 fe3f 	bl	80039da <HAL_PCD_Init>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001d62:	f000 f9dd 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	2000039c 	.word	0x2000039c

08001d70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08c      	sub	sp, #48	; 0x30
 8001d74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d76:	f107 031c 	add.w	r3, r7, #28
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	605a      	str	r2, [r3, #4]
 8001d80:	609a      	str	r2, [r3, #8]
 8001d82:	60da      	str	r2, [r3, #12]
 8001d84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d86:	4b68      	ldr	r3, [pc, #416]	; (8001f28 <MX_GPIO_Init+0x1b8>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	4a67      	ldr	r2, [pc, #412]	; (8001f28 <MX_GPIO_Init+0x1b8>)
 8001d8c:	f043 0304 	orr.w	r3, r3, #4
 8001d90:	6313      	str	r3, [r2, #48]	; 0x30
 8001d92:	4b65      	ldr	r3, [pc, #404]	; (8001f28 <MX_GPIO_Init+0x1b8>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	f003 0304 	and.w	r3, r3, #4
 8001d9a:	61bb      	str	r3, [r7, #24]
 8001d9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d9e:	4b62      	ldr	r3, [pc, #392]	; (8001f28 <MX_GPIO_Init+0x1b8>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4a61      	ldr	r2, [pc, #388]	; (8001f28 <MX_GPIO_Init+0x1b8>)
 8001da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
 8001daa:	4b5f      	ldr	r3, [pc, #380]	; (8001f28 <MX_GPIO_Init+0x1b8>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db6:	4b5c      	ldr	r3, [pc, #368]	; (8001f28 <MX_GPIO_Init+0x1b8>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	4a5b      	ldr	r2, [pc, #364]	; (8001f28 <MX_GPIO_Init+0x1b8>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc2:	4b59      	ldr	r3, [pc, #356]	; (8001f28 <MX_GPIO_Init+0x1b8>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dce:	4b56      	ldr	r3, [pc, #344]	; (8001f28 <MX_GPIO_Init+0x1b8>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a55      	ldr	r2, [pc, #340]	; (8001f28 <MX_GPIO_Init+0x1b8>)
 8001dd4:	f043 0302 	orr.w	r3, r3, #2
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b53      	ldr	r3, [pc, #332]	; (8001f28 <MX_GPIO_Init+0x1b8>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001de6:	4b50      	ldr	r3, [pc, #320]	; (8001f28 <MX_GPIO_Init+0x1b8>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	4a4f      	ldr	r2, [pc, #316]	; (8001f28 <MX_GPIO_Init+0x1b8>)
 8001dec:	f043 0308 	orr.w	r3, r3, #8
 8001df0:	6313      	str	r3, [r2, #48]	; 0x30
 8001df2:	4b4d      	ldr	r3, [pc, #308]	; (8001f28 <MX_GPIO_Init+0x1b8>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001dfe:	4b4a      	ldr	r3, [pc, #296]	; (8001f28 <MX_GPIO_Init+0x1b8>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a49      	ldr	r2, [pc, #292]	; (8001f28 <MX_GPIO_Init+0x1b8>)
 8001e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b47      	ldr	r3, [pc, #284]	; (8001f28 <MX_GPIO_Init+0x1b8>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e12:	607b      	str	r3, [r7, #4]
 8001e14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001e16:	2200      	movs	r2, #0
 8001e18:	f244 0181 	movw	r1, #16513	; 0x4081
 8001e1c:	4843      	ldr	r0, [pc, #268]	; (8001f2c <MX_GPIO_Init+0x1bc>)
 8001e1e:	f000 ffd3 	bl	8002dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2140      	movs	r1, #64	; 0x40
 8001e26:	4842      	ldr	r0, [pc, #264]	; (8001f30 <MX_GPIO_Init+0x1c0>)
 8001e28:	f000 ffce 	bl	8002dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001e2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e32:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001e3c:	f107 031c 	add.w	r3, r7, #28
 8001e40:	4619      	mov	r1, r3
 8001e42:	483c      	ldr	r0, [pc, #240]	; (8001f34 <MX_GPIO_Init+0x1c4>)
 8001e44:	f000 fe14 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001e48:	2332      	movs	r3, #50	; 0x32
 8001e4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e54:	2303      	movs	r3, #3
 8001e56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e58:	230b      	movs	r3, #11
 8001e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e5c:	f107 031c 	add.w	r3, r7, #28
 8001e60:	4619      	mov	r1, r3
 8001e62:	4834      	ldr	r0, [pc, #208]	; (8001f34 <MX_GPIO_Init+0x1c4>)
 8001e64:	f000 fe04 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001e68:	2386      	movs	r3, #134	; 0x86
 8001e6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e74:	2303      	movs	r3, #3
 8001e76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e78:	230b      	movs	r3, #11
 8001e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7c:	f107 031c 	add.w	r3, r7, #28
 8001e80:	4619      	mov	r1, r3
 8001e82:	482d      	ldr	r0, [pc, #180]	; (8001f38 <MX_GPIO_Init+0x1c8>)
 8001e84:	f000 fdf4 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001e88:	f244 0381 	movw	r3, #16513	; 0x4081
 8001e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e96:	2300      	movs	r3, #0
 8001e98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9a:	f107 031c 	add.w	r3, r7, #28
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4822      	ldr	r0, [pc, #136]	; (8001f2c <MX_GPIO_Init+0x1bc>)
 8001ea2:	f000 fde5 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001ea6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eac:	2302      	movs	r3, #2
 8001eae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001eb8:	230b      	movs	r3, #11
 8001eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001ebc:	f107 031c 	add.w	r3, r7, #28
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	481a      	ldr	r0, [pc, #104]	; (8001f2c <MX_GPIO_Init+0x1bc>)
 8001ec4:	f000 fdd4 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001ec8:	2340      	movs	r3, #64	; 0x40
 8001eca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001ed8:	f107 031c 	add.w	r3, r7, #28
 8001edc:	4619      	mov	r1, r3
 8001ede:	4814      	ldr	r0, [pc, #80]	; (8001f30 <MX_GPIO_Init+0x1c0>)
 8001ee0:	f000 fdc6 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001ee4:	2380      	movs	r3, #128	; 0x80
 8001ee6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001ef0:	f107 031c 	add.w	r3, r7, #28
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	480e      	ldr	r0, [pc, #56]	; (8001f30 <MX_GPIO_Init+0x1c0>)
 8001ef8:	f000 fdba 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001efc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001f00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f02:	2302      	movs	r3, #2
 8001f04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f0e:	230b      	movs	r3, #11
 8001f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f12:	f107 031c 	add.w	r3, r7, #28
 8001f16:	4619      	mov	r1, r3
 8001f18:	4805      	ldr	r0, [pc, #20]	; (8001f30 <MX_GPIO_Init+0x1c0>)
 8001f1a:	f000 fda9 	bl	8002a70 <HAL_GPIO_Init>

}
 8001f1e:	bf00      	nop
 8001f20:	3730      	adds	r7, #48	; 0x30
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40020400 	.word	0x40020400
 8001f30:	40021800 	.word	0x40021800
 8001f34:	40020800 	.word	0x40020800
 8001f38:	40020000 	.word	0x40020000

08001f3c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8001f3c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f40:	b084      	sub	sp, #16
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
	  BMP280_ReadTemperatureAndPressure(&temperature, &pressure);
 8001f46:	4966      	ldr	r1, [pc, #408]	; (80020e0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001f48:	4866      	ldr	r0, [pc, #408]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001f4a:	f7ff fa51 	bl	80013f0 <BMP280_ReadTemperatureAndPressure>
	  e_n = temperature_reference - temperature;
 8001f4e:	4b66      	ldr	r3, [pc, #408]	; (80020e8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001f50:	ed93 7a00 	vldr	s14, [r3]
 8001f54:	4b63      	ldr	r3, [pc, #396]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001f56:	edd3 7a00 	vldr	s15, [r3]
 8001f5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f5e:	4b63      	ldr	r3, [pc, #396]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001f60:	edc3 7a00 	vstr	s15, [r3]

	  float pwm_duty_f = u_n*1000;
 8001f64:	4b62      	ldr	r3, [pc, #392]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001f66:	edd3 7a00 	vldr	s15, [r3]
 8001f6a:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80020f4 <HAL_TIM_PeriodElapsedCallback+0x1b8>
 8001f6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f72:	edc7 7a03 	vstr	s15, [r7, #12]

	  Proporcional = K_p * e_n;
 8001f76:	4b60      	ldr	r3, [pc, #384]	; (80020f8 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001f78:	ed93 7a00 	vldr	s14, [r3]
 8001f7c:	4b5b      	ldr	r3, [pc, #364]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001f7e:	edd3 7a00 	vldr	s15, [r3]
 8001f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f86:	4b5d      	ldr	r3, [pc, #372]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001f88:	edc3 7a00 	vstr	s15, [r3]
	  if(pwm_duty_f > 0.0 && pwm_duty_f < 1000.0){
 8001f8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f98:	dd4d      	ble.n	8002036 <HAL_TIM_PeriodElapsedCallback+0xfa>
 8001f9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f9e:	ed9f 7a55 	vldr	s14, [pc, #340]	; 80020f4 <HAL_TIM_PeriodElapsedCallback+0x1b8>
 8001fa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001faa:	d544      	bpl.n	8002036 <HAL_TIM_PeriodElapsedCallback+0xfa>
		  Integral += K_i * 0.5 * Tp * (e_n + e_n_1);
 8001fac:	4b54      	ldr	r3, [pc, #336]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7fe fae9 	bl	8000588 <__aeabi_f2d>
 8001fb6:	4604      	mov	r4, r0
 8001fb8:	460d      	mov	r5, r1
 8001fba:	4b52      	ldr	r3, [pc, #328]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe fae2 	bl	8000588 <__aeabi_f2d>
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	4b4f      	ldr	r3, [pc, #316]	; (8002108 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001fca:	f7fe fb35 	bl	8000638 <__aeabi_dmul>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4690      	mov	r8, r2
 8001fd4:	4699      	mov	r9, r3
 8001fd6:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe fad4 	bl	8000588 <__aeabi_f2d>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4640      	mov	r0, r8
 8001fe6:	4649      	mov	r1, r9
 8001fe8:	f7fe fb26 	bl	8000638 <__aeabi_dmul>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	4690      	mov	r8, r2
 8001ff2:	4699      	mov	r9, r3
 8001ff4:	4b3d      	ldr	r3, [pc, #244]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001ff6:	ed93 7a00 	vldr	s14, [r3]
 8001ffa:	4b44      	ldr	r3, [pc, #272]	; (800210c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001ffc:	edd3 7a00 	vldr	s15, [r3]
 8002000:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002004:	ee17 0a90 	vmov	r0, s15
 8002008:	f7fe fabe 	bl	8000588 <__aeabi_f2d>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	4640      	mov	r0, r8
 8002012:	4649      	mov	r1, r9
 8002014:	f7fe fb10 	bl	8000638 <__aeabi_dmul>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4620      	mov	r0, r4
 800201e:	4629      	mov	r1, r5
 8002020:	f7fe f954 	bl	80002cc <__adddf3>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4610      	mov	r0, r2
 800202a:	4619      	mov	r1, r3
 800202c:	f7fe fddc 	bl	8000be8 <__aeabi_d2f>
 8002030:	4603      	mov	r3, r0
 8002032:	4a33      	ldr	r2, [pc, #204]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002034:	6013      	str	r3, [r2, #0]
	  }
	  Derivative = K_d * (e_n - e_n_1) / Tp;
 8002036:	4b2d      	ldr	r3, [pc, #180]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002038:	ed93 7a00 	vldr	s14, [r3]
 800203c:	4b33      	ldr	r3, [pc, #204]	; (800210c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800203e:	edd3 7a00 	vldr	s15, [r3]
 8002042:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002046:	4b32      	ldr	r3, [pc, #200]	; (8002110 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002048:	edd3 7a00 	vldr	s15, [r3]
 800204c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002050:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8002054:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002058:	4b2e      	ldr	r3, [pc, #184]	; (8002114 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800205a:	edc3 7a00 	vstr	s15, [r3]
	  u_n = Proporcional + Integral + Derivative;
 800205e:	4b27      	ldr	r3, [pc, #156]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002060:	ed93 7a00 	vldr	s14, [r3]
 8002064:	4b26      	ldr	r3, [pc, #152]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002066:	edd3 7a00 	vldr	s15, [r3]
 800206a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800206e:	4b29      	ldr	r3, [pc, #164]	; (8002114 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002070:	edd3 7a00 	vldr	s15, [r3]
 8002074:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002078:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800207a:	edc3 7a00 	vstr	s15, [r3]

	  if(pwm_duty_f < 0.0) pwm_duty = 0;
 800207e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002082:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800208a:	d503      	bpl.n	8002094 <HAL_TIM_PeriodElapsedCallback+0x158>
 800208c:	4b22      	ldr	r3, [pc, #136]	; (8002118 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800208e:	2200      	movs	r2, #0
 8002090:	801a      	strh	r2, [r3, #0]
 8002092:	e016      	b.n	80020c2 <HAL_TIM_PeriodElapsedCallback+0x186>
	  else if(pwm_duty_f > 1000.0) pwm_duty = 1000;
 8002094:	edd7 7a03 	vldr	s15, [r7, #12]
 8002098:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80020f4 <HAL_TIM_PeriodElapsedCallback+0x1b8>
 800209c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a4:	dd04      	ble.n	80020b0 <HAL_TIM_PeriodElapsedCallback+0x174>
 80020a6:	4b1c      	ldr	r3, [pc, #112]	; (8002118 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80020a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020ac:	801a      	strh	r2, [r3, #0]
 80020ae:	e008      	b.n	80020c2 <HAL_TIM_PeriodElapsedCallback+0x186>
	  else pwm_duty = (uint16_t) pwm_duty_f;
 80020b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80020b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020b8:	ee17 3a90 	vmov	r3, s15
 80020bc:	b29a      	uxth	r2, r3
 80020be:	4b16      	ldr	r3, [pc, #88]	; (8002118 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80020c0:	801a      	strh	r2, [r3, #0]

	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm_duty);
 80020c2:	4b15      	ldr	r3, [pc, #84]	; (8002118 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80020c4:	881a      	ldrh	r2, [r3, #0]
 80020c6:	4b15      	ldr	r3, [pc, #84]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	635a      	str	r2, [r3, #52]	; 0x34
	  e_n_1 = e_n;
 80020cc:	4b07      	ldr	r3, [pc, #28]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a0e      	ldr	r2, [pc, #56]	; (800210c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80020d2:	6013      	str	r3, [r2, #0]
}
 80020d4:	bf00      	nop
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80020de:	bf00      	nop
 80020e0:	200008a8 	.word	0x200008a8
 80020e4:	200008a4 	.word	0x200008a4
 80020e8:	20000000 	.word	0x20000000
 80020ec:	200008b0 	.word	0x200008b0
 80020f0:	200008b8 	.word	0x200008b8
 80020f4:	447a0000 	.word	0x447a0000
 80020f8:	20000004 	.word	0x20000004
 80020fc:	200008bc 	.word	0x200008bc
 8002100:	200008c0 	.word	0x200008c0
 8002104:	20000008 	.word	0x20000008
 8002108:	3fe00000 	.word	0x3fe00000
 800210c:	200008b4 	.word	0x200008b4
 8002110:	200008c8 	.word	0x200008c8
 8002114:	200008c4 	.word	0x200008c4
 8002118:	200008ac 	.word	0x200008ac
 800211c:	200002c8 	.word	0x200002c8

08002120 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002124:	b672      	cpsid	i
}
 8002126:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002128:	e7fe      	b.n	8002128 <Error_Handler+0x8>
	...

0800212c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002132:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <HAL_MspInit+0x44>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	4a0e      	ldr	r2, [pc, #56]	; (8002170 <HAL_MspInit+0x44>)
 8002138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800213c:	6413      	str	r3, [r2, #64]	; 0x40
 800213e:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <HAL_MspInit+0x44>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002146:	607b      	str	r3, [r7, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800214a:	4b09      	ldr	r3, [pc, #36]	; (8002170 <HAL_MspInit+0x44>)
 800214c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214e:	4a08      	ldr	r2, [pc, #32]	; (8002170 <HAL_MspInit+0x44>)
 8002150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002154:	6453      	str	r3, [r2, #68]	; 0x44
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_MspInit+0x44>)
 8002158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	40023800 	.word	0x40023800

08002174 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b0aa      	sub	sp, #168	; 0xa8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	60da      	str	r2, [r3, #12]
 800218a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800218c:	f107 0310 	add.w	r3, r7, #16
 8002190:	2284      	movs	r2, #132	; 0x84
 8002192:	2100      	movs	r1, #0
 8002194:	4618      	mov	r0, r3
 8002196:	f004 ff55 	bl	8007044 <memset>
  if(hi2c->Instance==I2C1)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a22      	ldr	r2, [pc, #136]	; (8002228 <HAL_I2C_MspInit+0xb4>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d13c      	bne.n	800221e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80021a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021a8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80021aa:	2300      	movs	r3, #0
 80021ac:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021ae:	f107 0310 	add.w	r3, r7, #16
 80021b2:	4618      	mov	r0, r3
 80021b4:	f002 fa34 	bl	8004620 <HAL_RCCEx_PeriphCLKConfig>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80021be:	f7ff ffaf 	bl	8002120 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c2:	4b1a      	ldr	r3, [pc, #104]	; (800222c <HAL_I2C_MspInit+0xb8>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	4a19      	ldr	r2, [pc, #100]	; (800222c <HAL_I2C_MspInit+0xb8>)
 80021c8:	f043 0302 	orr.w	r3, r3, #2
 80021cc:	6313      	str	r3, [r2, #48]	; 0x30
 80021ce:	4b17      	ldr	r3, [pc, #92]	; (800222c <HAL_I2C_MspInit+0xb8>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021e2:	2312      	movs	r3, #18
 80021e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ee:	2303      	movs	r3, #3
 80021f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021f4:	2304      	movs	r3, #4
 80021f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80021fe:	4619      	mov	r1, r3
 8002200:	480b      	ldr	r0, [pc, #44]	; (8002230 <HAL_I2C_MspInit+0xbc>)
 8002202:	f000 fc35 	bl	8002a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002206:	4b09      	ldr	r3, [pc, #36]	; (800222c <HAL_I2C_MspInit+0xb8>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	4a08      	ldr	r2, [pc, #32]	; (800222c <HAL_I2C_MspInit+0xb8>)
 800220c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002210:	6413      	str	r3, [r2, #64]	; 0x40
 8002212:	4b06      	ldr	r3, [pc, #24]	; (800222c <HAL_I2C_MspInit+0xb8>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800221a:	60bb      	str	r3, [r7, #8]
 800221c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800221e:	bf00      	nop
 8002220:	37a8      	adds	r7, #168	; 0xa8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40005400 	.word	0x40005400
 800222c:	40023800 	.word	0x40023800
 8002230:	40020400 	.word	0x40020400

08002234 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002244:	d113      	bne.n	800226e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002246:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <HAL_TIM_Base_MspInit+0x44>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	4a0b      	ldr	r2, [pc, #44]	; (8002278 <HAL_TIM_Base_MspInit+0x44>)
 800224c:	f043 0301 	orr.w	r3, r3, #1
 8002250:	6413      	str	r3, [r2, #64]	; 0x40
 8002252:	4b09      	ldr	r3, [pc, #36]	; (8002278 <HAL_TIM_Base_MspInit+0x44>)
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800225e:	2200      	movs	r2, #0
 8002260:	2100      	movs	r1, #0
 8002262:	201c      	movs	r0, #28
 8002264:	f000 fbcd 	bl	8002a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002268:	201c      	movs	r0, #28
 800226a:	f000 fbe6 	bl	8002a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40023800 	.word	0x40023800

0800227c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <HAL_TIM_PWM_MspInit+0x38>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d10b      	bne.n	80022a6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800228e:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	4a09      	ldr	r2, [pc, #36]	; (80022b8 <HAL_TIM_PWM_MspInit+0x3c>)
 8002294:	f043 0302 	orr.w	r3, r3, #2
 8002298:	6413      	str	r3, [r2, #64]	; 0x40
 800229a:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <HAL_TIM_PWM_MspInit+0x3c>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80022a6:	bf00      	nop
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	40000400 	.word	0x40000400
 80022b8:	40023800 	.word	0x40023800

080022bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b088      	sub	sp, #32
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c4:	f107 030c 	add.w	r3, r7, #12
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	60da      	str	r2, [r3, #12]
 80022d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a11      	ldr	r2, [pc, #68]	; (8002320 <HAL_TIM_MspPostInit+0x64>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d11b      	bne.n	8002316 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022de:	4b11      	ldr	r3, [pc, #68]	; (8002324 <HAL_TIM_MspPostInit+0x68>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	4a10      	ldr	r2, [pc, #64]	; (8002324 <HAL_TIM_MspPostInit+0x68>)
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ea:	4b0e      	ldr	r3, [pc, #56]	; (8002324 <HAL_TIM_MspPostInit+0x68>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	60bb      	str	r3, [r7, #8]
 80022f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022f6:	2340      	movs	r3, #64	; 0x40
 80022f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fa:	2302      	movs	r3, #2
 80022fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002302:	2300      	movs	r3, #0
 8002304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002306:	2302      	movs	r3, #2
 8002308:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230a:	f107 030c 	add.w	r3, r7, #12
 800230e:	4619      	mov	r1, r3
 8002310:	4805      	ldr	r0, [pc, #20]	; (8002328 <HAL_TIM_MspPostInit+0x6c>)
 8002312:	f000 fbad 	bl	8002a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002316:	bf00      	nop
 8002318:	3720      	adds	r7, #32
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40000400 	.word	0x40000400
 8002324:	40023800 	.word	0x40023800
 8002328:	40020000 	.word	0x40020000

0800232c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b0aa      	sub	sp, #168	; 0xa8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002334:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]
 8002342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002344:	f107 0310 	add.w	r3, r7, #16
 8002348:	2284      	movs	r2, #132	; 0x84
 800234a:	2100      	movs	r1, #0
 800234c:	4618      	mov	r0, r3
 800234e:	f004 fe79 	bl	8007044 <memset>
  if(huart->Instance==USART3)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a22      	ldr	r2, [pc, #136]	; (80023e0 <HAL_UART_MspInit+0xb4>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d13c      	bne.n	80023d6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800235c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002360:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002362:	2300      	movs	r3, #0
 8002364:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002366:	f107 0310 	add.w	r3, r7, #16
 800236a:	4618      	mov	r0, r3
 800236c:	f002 f958 	bl	8004620 <HAL_RCCEx_PeriphCLKConfig>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002376:	f7ff fed3 	bl	8002120 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800237a:	4b1a      	ldr	r3, [pc, #104]	; (80023e4 <HAL_UART_MspInit+0xb8>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	4a19      	ldr	r2, [pc, #100]	; (80023e4 <HAL_UART_MspInit+0xb8>)
 8002380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002384:	6413      	str	r3, [r2, #64]	; 0x40
 8002386:	4b17      	ldr	r3, [pc, #92]	; (80023e4 <HAL_UART_MspInit+0xb8>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002392:	4b14      	ldr	r3, [pc, #80]	; (80023e4 <HAL_UART_MspInit+0xb8>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	4a13      	ldr	r2, [pc, #76]	; (80023e4 <HAL_UART_MspInit+0xb8>)
 8002398:	f043 0308 	orr.w	r3, r3, #8
 800239c:	6313      	str	r3, [r2, #48]	; 0x30
 800239e:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <HAL_UART_MspInit+0xb8>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	60bb      	str	r3, [r7, #8]
 80023a8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80023aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b2:	2302      	movs	r3, #2
 80023b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023be:	2303      	movs	r3, #3
 80023c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023c4:	2307      	movs	r3, #7
 80023c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023ca:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80023ce:	4619      	mov	r1, r3
 80023d0:	4805      	ldr	r0, [pc, #20]	; (80023e8 <HAL_UART_MspInit+0xbc>)
 80023d2:	f000 fb4d 	bl	8002a70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80023d6:	bf00      	nop
 80023d8:	37a8      	adds	r7, #168	; 0xa8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40004800 	.word	0x40004800
 80023e4:	40023800 	.word	0x40023800
 80023e8:	40020c00 	.word	0x40020c00

080023ec <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b0ac      	sub	sp, #176	; 0xb0
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002404:	f107 0318 	add.w	r3, r7, #24
 8002408:	2284      	movs	r2, #132	; 0x84
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f004 fe19 	bl	8007044 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800241a:	d159      	bne.n	80024d0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800241c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002420:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002422:	2300      	movs	r3, #0
 8002424:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002428:	f107 0318 	add.w	r3, r7, #24
 800242c:	4618      	mov	r0, r3
 800242e:	f002 f8f7 	bl	8004620 <HAL_RCCEx_PeriphCLKConfig>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002438:	f7ff fe72 	bl	8002120 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243c:	4b26      	ldr	r3, [pc, #152]	; (80024d8 <HAL_PCD_MspInit+0xec>)
 800243e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002440:	4a25      	ldr	r2, [pc, #148]	; (80024d8 <HAL_PCD_MspInit+0xec>)
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	6313      	str	r3, [r2, #48]	; 0x30
 8002448:	4b23      	ldr	r3, [pc, #140]	; (80024d8 <HAL_PCD_MspInit+0xec>)
 800244a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	617b      	str	r3, [r7, #20]
 8002452:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002454:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002458:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245c:	2302      	movs	r3, #2
 800245e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002468:	2303      	movs	r3, #3
 800246a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800246e:	230a      	movs	r3, #10
 8002470:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002474:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002478:	4619      	mov	r1, r3
 800247a:	4818      	ldr	r0, [pc, #96]	; (80024dc <HAL_PCD_MspInit+0xf0>)
 800247c:	f000 faf8 	bl	8002a70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002480:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002484:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002488:	2300      	movs	r3, #0
 800248a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002494:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002498:	4619      	mov	r1, r3
 800249a:	4810      	ldr	r0, [pc, #64]	; (80024dc <HAL_PCD_MspInit+0xf0>)
 800249c:	f000 fae8 	bl	8002a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80024a0:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <HAL_PCD_MspInit+0xec>)
 80024a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a4:	4a0c      	ldr	r2, [pc, #48]	; (80024d8 <HAL_PCD_MspInit+0xec>)
 80024a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024aa:	6353      	str	r3, [r2, #52]	; 0x34
 80024ac:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <HAL_PCD_MspInit+0xec>)
 80024ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b4:	613b      	str	r3, [r7, #16]
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	4b07      	ldr	r3, [pc, #28]	; (80024d8 <HAL_PCD_MspInit+0xec>)
 80024ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024bc:	4a06      	ldr	r2, [pc, #24]	; (80024d8 <HAL_PCD_MspInit+0xec>)
 80024be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024c2:	6453      	str	r3, [r2, #68]	; 0x44
 80024c4:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <HAL_PCD_MspInit+0xec>)
 80024c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80024d0:	bf00      	nop
 80024d2:	37b0      	adds	r7, #176	; 0xb0
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40020000 	.word	0x40020000

080024e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024e4:	e7fe      	b.n	80024e4 <NMI_Handler+0x4>

080024e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024e6:	b480      	push	{r7}
 80024e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ea:	e7fe      	b.n	80024ea <HardFault_Handler+0x4>

080024ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024f0:	e7fe      	b.n	80024f0 <MemManage_Handler+0x4>

080024f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024f2:	b480      	push	{r7}
 80024f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024f6:	e7fe      	b.n	80024f6 <BusFault_Handler+0x4>

080024f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024fc:	e7fe      	b.n	80024fc <UsageFault_Handler+0x4>

080024fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800251a:	b480      	push	{r7}
 800251c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800252c:	f000 f94a 	bl	80027c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002530:	bf00      	nop
 8002532:	bd80      	pop	{r7, pc}

08002534 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002538:	4802      	ldr	r0, [pc, #8]	; (8002544 <TIM2_IRQHandler+0x10>)
 800253a:	f002 fe83 	bl	8005244 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	2000027c 	.word	0x2000027c

08002548 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
	return 1;
 800254c:	2301      	movs	r3, #1
}
 800254e:	4618      	mov	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <_kill>:

int _kill(int pid, int sig)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002562:	f004 fd45 	bl	8006ff0 <__errno>
 8002566:	4603      	mov	r3, r0
 8002568:	2216      	movs	r2, #22
 800256a:	601a      	str	r2, [r3, #0]
	return -1;
 800256c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002570:	4618      	mov	r0, r3
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <_exit>:

void _exit (int status)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002580:	f04f 31ff 	mov.w	r1, #4294967295
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7ff ffe7 	bl	8002558 <_kill>
	while (1) {}		/* Make sure we hang here */
 800258a:	e7fe      	b.n	800258a <_exit+0x12>

0800258c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]
 800259c:	e00a      	b.n	80025b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800259e:	f3af 8000 	nop.w
 80025a2:	4601      	mov	r1, r0
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	60ba      	str	r2, [r7, #8]
 80025aa:	b2ca      	uxtb	r2, r1
 80025ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	3301      	adds	r3, #1
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	dbf0      	blt.n	800259e <_read+0x12>
	}

return len;
 80025bc:	687b      	ldr	r3, [r7, #4]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b086      	sub	sp, #24
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	60f8      	str	r0, [r7, #12]
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	e009      	b.n	80025ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	1c5a      	adds	r2, r3, #1
 80025dc:	60ba      	str	r2, [r7, #8]
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	3301      	adds	r3, #1
 80025ea:	617b      	str	r3, [r7, #20]
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	dbf1      	blt.n	80025d8 <_write+0x12>
	}
	return len;
 80025f4:	687b      	ldr	r3, [r7, #4]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <_close>:

int _close(int file)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
	return -1;
 8002606:	f04f 33ff 	mov.w	r3, #4294967295
}
 800260a:	4618      	mov	r0, r3
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002626:	605a      	str	r2, [r3, #4]
	return 0;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <_isatty>:

int _isatty(int file)
{
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
	return 1;
 800263e:	2301      	movs	r3, #1
}
 8002640:	4618      	mov	r0, r3
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
	return 0;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3714      	adds	r7, #20
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
	...

08002668 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002670:	4a14      	ldr	r2, [pc, #80]	; (80026c4 <_sbrk+0x5c>)
 8002672:	4b15      	ldr	r3, [pc, #84]	; (80026c8 <_sbrk+0x60>)
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800267c:	4b13      	ldr	r3, [pc, #76]	; (80026cc <_sbrk+0x64>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d102      	bne.n	800268a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002684:	4b11      	ldr	r3, [pc, #68]	; (80026cc <_sbrk+0x64>)
 8002686:	4a12      	ldr	r2, [pc, #72]	; (80026d0 <_sbrk+0x68>)
 8002688:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800268a:	4b10      	ldr	r3, [pc, #64]	; (80026cc <_sbrk+0x64>)
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4413      	add	r3, r2
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	429a      	cmp	r2, r3
 8002696:	d207      	bcs.n	80026a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002698:	f004 fcaa 	bl	8006ff0 <__errno>
 800269c:	4603      	mov	r3, r0
 800269e:	220c      	movs	r2, #12
 80026a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026a2:	f04f 33ff 	mov.w	r3, #4294967295
 80026a6:	e009      	b.n	80026bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026a8:	4b08      	ldr	r3, [pc, #32]	; (80026cc <_sbrk+0x64>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ae:	4b07      	ldr	r3, [pc, #28]	; (80026cc <_sbrk+0x64>)
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4413      	add	r3, r2
 80026b6:	4a05      	ldr	r2, [pc, #20]	; (80026cc <_sbrk+0x64>)
 80026b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026ba:	68fb      	ldr	r3, [r7, #12]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	20050000 	.word	0x20050000
 80026c8:	00000400 	.word	0x00000400
 80026cc:	200008cc 	.word	0x200008cc
 80026d0:	200008e8 	.word	0x200008e8

080026d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026d8:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <SystemInit+0x20>)
 80026da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026de:	4a05      	ldr	r2, [pc, #20]	; (80026f4 <SystemInit+0x20>)
 80026e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026e8:	bf00      	nop
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	e000ed00 	.word	0xe000ed00

080026f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002730 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026fc:	480d      	ldr	r0, [pc, #52]	; (8002734 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026fe:	490e      	ldr	r1, [pc, #56]	; (8002738 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002700:	4a0e      	ldr	r2, [pc, #56]	; (800273c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002704:	e002      	b.n	800270c <LoopCopyDataInit>

08002706 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800270a:	3304      	adds	r3, #4

0800270c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800270c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800270e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002710:	d3f9      	bcc.n	8002706 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002712:	4a0b      	ldr	r2, [pc, #44]	; (8002740 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002714:	4c0b      	ldr	r4, [pc, #44]	; (8002744 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002718:	e001      	b.n	800271e <LoopFillZerobss>

0800271a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800271a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800271c:	3204      	adds	r2, #4

0800271e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800271e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002720:	d3fb      	bcc.n	800271a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002722:	f7ff ffd7 	bl	80026d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002726:	f004 fc69 	bl	8006ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800272a:	f7ff f94b 	bl	80019c4 <main>
  bx  lr    
 800272e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002730:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002738:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800273c:	08009e9c 	.word	0x08009e9c
  ldr r2, =_sbss
 8002740:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002744:	200008e4 	.word	0x200008e4

08002748 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002748:	e7fe      	b.n	8002748 <ADC_IRQHandler>

0800274a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800274e:	2003      	movs	r0, #3
 8002750:	f000 f94c 	bl	80029ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002754:	2000      	movs	r0, #0
 8002756:	f000 f805 	bl	8002764 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800275a:	f7ff fce7 	bl	800212c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800276c:	4b12      	ldr	r3, [pc, #72]	; (80027b8 <HAL_InitTick+0x54>)
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	4b12      	ldr	r3, [pc, #72]	; (80027bc <HAL_InitTick+0x58>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	4619      	mov	r1, r3
 8002776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800277a:	fbb3 f3f1 	udiv	r3, r3, r1
 800277e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002782:	4618      	mov	r0, r3
 8002784:	f000 f967 	bl	8002a56 <HAL_SYSTICK_Config>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e00e      	b.n	80027b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b0f      	cmp	r3, #15
 8002796:	d80a      	bhi.n	80027ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002798:	2200      	movs	r2, #0
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	f04f 30ff 	mov.w	r0, #4294967295
 80027a0:	f000 f92f 	bl	8002a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027a4:	4a06      	ldr	r2, [pc, #24]	; (80027c0 <HAL_InitTick+0x5c>)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	e000      	b.n	80027b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	2000000c 	.word	0x2000000c
 80027bc:	20000014 	.word	0x20000014
 80027c0:	20000010 	.word	0x20000010

080027c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027c8:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_IncTick+0x20>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	461a      	mov	r2, r3
 80027ce:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <HAL_IncTick+0x24>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4413      	add	r3, r2
 80027d4:	4a04      	ldr	r2, [pc, #16]	; (80027e8 <HAL_IncTick+0x24>)
 80027d6:	6013      	str	r3, [r2, #0]
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	20000014 	.word	0x20000014
 80027e8:	200008d0 	.word	0x200008d0

080027ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  return uwTick;
 80027f0:	4b03      	ldr	r3, [pc, #12]	; (8002800 <HAL_GetTick+0x14>)
 80027f2:	681b      	ldr	r3, [r3, #0]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	200008d0 	.word	0x200008d0

08002804 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800280c:	f7ff ffee 	bl	80027ec <HAL_GetTick>
 8002810:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281c:	d005      	beq.n	800282a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800281e:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <HAL_Delay+0x44>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4413      	add	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800282a:	bf00      	nop
 800282c:	f7ff ffde 	bl	80027ec <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	429a      	cmp	r2, r3
 800283a:	d8f7      	bhi.n	800282c <HAL_Delay+0x28>
  {
  }
}
 800283c:	bf00      	nop
 800283e:	bf00      	nop
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	20000014 	.word	0x20000014

0800284c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800285c:	4b0b      	ldr	r3, [pc, #44]	; (800288c <__NVIC_SetPriorityGrouping+0x40>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002868:	4013      	ands	r3, r2
 800286a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002874:	4b06      	ldr	r3, [pc, #24]	; (8002890 <__NVIC_SetPriorityGrouping+0x44>)
 8002876:	4313      	orrs	r3, r2
 8002878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800287a:	4a04      	ldr	r2, [pc, #16]	; (800288c <__NVIC_SetPriorityGrouping+0x40>)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	60d3      	str	r3, [r2, #12]
}
 8002880:	bf00      	nop
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	e000ed00 	.word	0xe000ed00
 8002890:	05fa0000 	.word	0x05fa0000

08002894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002898:	4b04      	ldr	r3, [pc, #16]	; (80028ac <__NVIC_GetPriorityGrouping+0x18>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	0a1b      	lsrs	r3, r3, #8
 800289e:	f003 0307 	and.w	r3, r3, #7
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	db0b      	blt.n	80028da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	f003 021f 	and.w	r2, r3, #31
 80028c8:	4907      	ldr	r1, [pc, #28]	; (80028e8 <__NVIC_EnableIRQ+0x38>)
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	2001      	movs	r0, #1
 80028d2:	fa00 f202 	lsl.w	r2, r0, r2
 80028d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	e000e100 	.word	0xe000e100

080028ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	6039      	str	r1, [r7, #0]
 80028f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	db0a      	blt.n	8002916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	b2da      	uxtb	r2, r3
 8002904:	490c      	ldr	r1, [pc, #48]	; (8002938 <__NVIC_SetPriority+0x4c>)
 8002906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290a:	0112      	lsls	r2, r2, #4
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	440b      	add	r3, r1
 8002910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002914:	e00a      	b.n	800292c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	b2da      	uxtb	r2, r3
 800291a:	4908      	ldr	r1, [pc, #32]	; (800293c <__NVIC_SetPriority+0x50>)
 800291c:	79fb      	ldrb	r3, [r7, #7]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	3b04      	subs	r3, #4
 8002924:	0112      	lsls	r2, r2, #4
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	440b      	add	r3, r1
 800292a:	761a      	strb	r2, [r3, #24]
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	e000e100 	.word	0xe000e100
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002940:	b480      	push	{r7}
 8002942:	b089      	sub	sp, #36	; 0x24
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f1c3 0307 	rsb	r3, r3, #7
 800295a:	2b04      	cmp	r3, #4
 800295c:	bf28      	it	cs
 800295e:	2304      	movcs	r3, #4
 8002960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3304      	adds	r3, #4
 8002966:	2b06      	cmp	r3, #6
 8002968:	d902      	bls.n	8002970 <NVIC_EncodePriority+0x30>
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3b03      	subs	r3, #3
 800296e:	e000      	b.n	8002972 <NVIC_EncodePriority+0x32>
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002974:	f04f 32ff 	mov.w	r2, #4294967295
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43da      	mvns	r2, r3
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	401a      	ands	r2, r3
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002988:	f04f 31ff 	mov.w	r1, #4294967295
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	fa01 f303 	lsl.w	r3, r1, r3
 8002992:	43d9      	mvns	r1, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002998:	4313      	orrs	r3, r2
         );
}
 800299a:	4618      	mov	r0, r3
 800299c:	3724      	adds	r7, #36	; 0x24
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
	...

080029a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029b8:	d301      	bcc.n	80029be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ba:	2301      	movs	r3, #1
 80029bc:	e00f      	b.n	80029de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029be:	4a0a      	ldr	r2, [pc, #40]	; (80029e8 <SysTick_Config+0x40>)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029c6:	210f      	movs	r1, #15
 80029c8:	f04f 30ff 	mov.w	r0, #4294967295
 80029cc:	f7ff ff8e 	bl	80028ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029d0:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <SysTick_Config+0x40>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029d6:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <SysTick_Config+0x40>)
 80029d8:	2207      	movs	r2, #7
 80029da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	e000e010 	.word	0xe000e010

080029ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff ff29 	bl	800284c <__NVIC_SetPriorityGrouping>
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b086      	sub	sp, #24
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	4603      	mov	r3, r0
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
 8002a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a14:	f7ff ff3e 	bl	8002894 <__NVIC_GetPriorityGrouping>
 8002a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	68b9      	ldr	r1, [r7, #8]
 8002a1e:	6978      	ldr	r0, [r7, #20]
 8002a20:	f7ff ff8e 	bl	8002940 <NVIC_EncodePriority>
 8002a24:	4602      	mov	r2, r0
 8002a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff ff5d 	bl	80028ec <__NVIC_SetPriority>
}
 8002a32:	bf00      	nop
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b082      	sub	sp, #8
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	4603      	mov	r3, r0
 8002a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff ff31 	bl	80028b0 <__NVIC_EnableIRQ>
}
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7ff ffa2 	bl	80029a8 <SysTick_Config>
 8002a64:	4603      	mov	r3, r0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
	...

08002a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b089      	sub	sp, #36	; 0x24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a82:	2300      	movs	r3, #0
 8002a84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61fb      	str	r3, [r7, #28]
 8002a8e:	e175      	b.n	8002d7c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002a90:	2201      	movs	r2, #1
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	f040 8164 	bne.w	8002d76 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d005      	beq.n	8002ac6 <HAL_GPIO_Init+0x56>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d130      	bne.n	8002b28 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	2203      	movs	r2, #3
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4013      	ands	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002afc:	2201      	movs	r2, #1
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	091b      	lsrs	r3, r3, #4
 8002b12:	f003 0201 	and.w	r2, r3, #1
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 0303 	and.w	r3, r3, #3
 8002b30:	2b03      	cmp	r3, #3
 8002b32:	d017      	beq.n	8002b64 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	2203      	movs	r2, #3
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	43db      	mvns	r3, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 0303 	and.w	r3, r3, #3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d123      	bne.n	8002bb8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	08da      	lsrs	r2, r3, #3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3208      	adds	r2, #8
 8002b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	220f      	movs	r2, #15
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4013      	ands	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	691a      	ldr	r2, [r3, #16]
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	08da      	lsrs	r2, r3, #3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	3208      	adds	r2, #8
 8002bb2:	69b9      	ldr	r1, [r7, #24]
 8002bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 0203 	and.w	r2, r3, #3
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 80be 	beq.w	8002d76 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bfa:	4b66      	ldr	r3, [pc, #408]	; (8002d94 <HAL_GPIO_Init+0x324>)
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfe:	4a65      	ldr	r2, [pc, #404]	; (8002d94 <HAL_GPIO_Init+0x324>)
 8002c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c04:	6453      	str	r3, [r2, #68]	; 0x44
 8002c06:	4b63      	ldr	r3, [pc, #396]	; (8002d94 <HAL_GPIO_Init+0x324>)
 8002c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c12:	4a61      	ldr	r2, [pc, #388]	; (8002d98 <HAL_GPIO_Init+0x328>)
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	089b      	lsrs	r3, r3, #2
 8002c18:	3302      	adds	r3, #2
 8002c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f003 0303 	and.w	r3, r3, #3
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	220f      	movs	r2, #15
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4013      	ands	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a58      	ldr	r2, [pc, #352]	; (8002d9c <HAL_GPIO_Init+0x32c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d037      	beq.n	8002cae <HAL_GPIO_Init+0x23e>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a57      	ldr	r2, [pc, #348]	; (8002da0 <HAL_GPIO_Init+0x330>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d031      	beq.n	8002caa <HAL_GPIO_Init+0x23a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a56      	ldr	r2, [pc, #344]	; (8002da4 <HAL_GPIO_Init+0x334>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d02b      	beq.n	8002ca6 <HAL_GPIO_Init+0x236>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a55      	ldr	r2, [pc, #340]	; (8002da8 <HAL_GPIO_Init+0x338>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d025      	beq.n	8002ca2 <HAL_GPIO_Init+0x232>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a54      	ldr	r2, [pc, #336]	; (8002dac <HAL_GPIO_Init+0x33c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d01f      	beq.n	8002c9e <HAL_GPIO_Init+0x22e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a53      	ldr	r2, [pc, #332]	; (8002db0 <HAL_GPIO_Init+0x340>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d019      	beq.n	8002c9a <HAL_GPIO_Init+0x22a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a52      	ldr	r2, [pc, #328]	; (8002db4 <HAL_GPIO_Init+0x344>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d013      	beq.n	8002c96 <HAL_GPIO_Init+0x226>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a51      	ldr	r2, [pc, #324]	; (8002db8 <HAL_GPIO_Init+0x348>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d00d      	beq.n	8002c92 <HAL_GPIO_Init+0x222>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a50      	ldr	r2, [pc, #320]	; (8002dbc <HAL_GPIO_Init+0x34c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d007      	beq.n	8002c8e <HAL_GPIO_Init+0x21e>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a4f      	ldr	r2, [pc, #316]	; (8002dc0 <HAL_GPIO_Init+0x350>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d101      	bne.n	8002c8a <HAL_GPIO_Init+0x21a>
 8002c86:	2309      	movs	r3, #9
 8002c88:	e012      	b.n	8002cb0 <HAL_GPIO_Init+0x240>
 8002c8a:	230a      	movs	r3, #10
 8002c8c:	e010      	b.n	8002cb0 <HAL_GPIO_Init+0x240>
 8002c8e:	2308      	movs	r3, #8
 8002c90:	e00e      	b.n	8002cb0 <HAL_GPIO_Init+0x240>
 8002c92:	2307      	movs	r3, #7
 8002c94:	e00c      	b.n	8002cb0 <HAL_GPIO_Init+0x240>
 8002c96:	2306      	movs	r3, #6
 8002c98:	e00a      	b.n	8002cb0 <HAL_GPIO_Init+0x240>
 8002c9a:	2305      	movs	r3, #5
 8002c9c:	e008      	b.n	8002cb0 <HAL_GPIO_Init+0x240>
 8002c9e:	2304      	movs	r3, #4
 8002ca0:	e006      	b.n	8002cb0 <HAL_GPIO_Init+0x240>
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e004      	b.n	8002cb0 <HAL_GPIO_Init+0x240>
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	e002      	b.n	8002cb0 <HAL_GPIO_Init+0x240>
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <HAL_GPIO_Init+0x240>
 8002cae:	2300      	movs	r3, #0
 8002cb0:	69fa      	ldr	r2, [r7, #28]
 8002cb2:	f002 0203 	and.w	r2, r2, #3
 8002cb6:	0092      	lsls	r2, r2, #2
 8002cb8:	4093      	lsls	r3, r2
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002cc0:	4935      	ldr	r1, [pc, #212]	; (8002d98 <HAL_GPIO_Init+0x328>)
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	089b      	lsrs	r3, r3, #2
 8002cc6:	3302      	adds	r3, #2
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cce:	4b3d      	ldr	r3, [pc, #244]	; (8002dc4 <HAL_GPIO_Init+0x354>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	43db      	mvns	r3, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cf2:	4a34      	ldr	r2, [pc, #208]	; (8002dc4 <HAL_GPIO_Init+0x354>)
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cf8:	4b32      	ldr	r3, [pc, #200]	; (8002dc4 <HAL_GPIO_Init+0x354>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	43db      	mvns	r3, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4013      	ands	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d1c:	4a29      	ldr	r2, [pc, #164]	; (8002dc4 <HAL_GPIO_Init+0x354>)
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d22:	4b28      	ldr	r3, [pc, #160]	; (8002dc4 <HAL_GPIO_Init+0x354>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4013      	ands	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d46:	4a1f      	ldr	r2, [pc, #124]	; (8002dc4 <HAL_GPIO_Init+0x354>)
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d4c:	4b1d      	ldr	r3, [pc, #116]	; (8002dc4 <HAL_GPIO_Init+0x354>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	43db      	mvns	r3, r3
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d70:	4a14      	ldr	r2, [pc, #80]	; (8002dc4 <HAL_GPIO_Init+0x354>)
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	61fb      	str	r3, [r7, #28]
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	2b0f      	cmp	r3, #15
 8002d80:	f67f ae86 	bls.w	8002a90 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002d84:	bf00      	nop
 8002d86:	bf00      	nop
 8002d88:	3724      	adds	r7, #36	; 0x24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	40023800 	.word	0x40023800
 8002d98:	40013800 	.word	0x40013800
 8002d9c:	40020000 	.word	0x40020000
 8002da0:	40020400 	.word	0x40020400
 8002da4:	40020800 	.word	0x40020800
 8002da8:	40020c00 	.word	0x40020c00
 8002dac:	40021000 	.word	0x40021000
 8002db0:	40021400 	.word	0x40021400
 8002db4:	40021800 	.word	0x40021800
 8002db8:	40021c00 	.word	0x40021c00
 8002dbc:	40022000 	.word	0x40022000
 8002dc0:	40022400 	.word	0x40022400
 8002dc4:	40013c00 	.word	0x40013c00

08002dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	807b      	strh	r3, [r7, #2]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dd8:	787b      	ldrb	r3, [r7, #1]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d003      	beq.n	8002de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dde:	887a      	ldrh	r2, [r7, #2]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002de4:	e003      	b.n	8002dee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002de6:	887b      	ldrh	r3, [r7, #2]
 8002de8:	041a      	lsls	r2, r3, #16
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	619a      	str	r2, [r3, #24]
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
	...

08002dfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e07f      	b.n	8002f0e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d106      	bne.n	8002e28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7ff f9a6 	bl	8002174 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2224      	movs	r2, #36	; 0x24
 8002e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0201 	bic.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d107      	bne.n	8002e76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	689a      	ldr	r2, [r3, #8]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e72:	609a      	str	r2, [r3, #8]
 8002e74:	e006      	b.n	8002e84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d104      	bne.n	8002e96 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6859      	ldr	r1, [r3, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	4b1d      	ldr	r3, [pc, #116]	; (8002f18 <HAL_I2C_Init+0x11c>)
 8002ea2:	430b      	orrs	r3, r1
 8002ea4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68da      	ldr	r2, [r3, #12]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002eb4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691a      	ldr	r2, [r3, #16]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	69d9      	ldr	r1, [r3, #28]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a1a      	ldr	r2, [r3, #32]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0201 	orr.w	r2, r2, #1
 8002eee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2220      	movs	r2, #32
 8002efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	02008000 	.word	0x02008000

08002f1c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b088      	sub	sp, #32
 8002f20:	af02      	add	r7, sp, #8
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	4608      	mov	r0, r1
 8002f26:	4611      	mov	r1, r2
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	817b      	strh	r3, [r7, #10]
 8002f2e:	460b      	mov	r3, r1
 8002f30:	813b      	strh	r3, [r7, #8]
 8002f32:	4613      	mov	r3, r2
 8002f34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b20      	cmp	r3, #32
 8002f40:	f040 80f9 	bne.w	8003136 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f44:	6a3b      	ldr	r3, [r7, #32]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d002      	beq.n	8002f50 <HAL_I2C_Mem_Write+0x34>
 8002f4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d105      	bne.n	8002f5c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f56:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e0ed      	b.n	8003138 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <HAL_I2C_Mem_Write+0x4e>
 8002f66:	2302      	movs	r3, #2
 8002f68:	e0e6      	b.n	8003138 <HAL_I2C_Mem_Write+0x21c>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f72:	f7ff fc3b 	bl	80027ec <HAL_GetTick>
 8002f76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	2319      	movs	r3, #25
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 fac3 	bl	8003510 <I2C_WaitOnFlagUntilTimeout>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0d1      	b.n	8003138 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2221      	movs	r2, #33	; 0x21
 8002f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2240      	movs	r2, #64	; 0x40
 8002fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a3a      	ldr	r2, [r7, #32]
 8002fae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002fb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fbc:	88f8      	ldrh	r0, [r7, #6]
 8002fbe:	893a      	ldrh	r2, [r7, #8]
 8002fc0:	8979      	ldrh	r1, [r7, #10]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	9301      	str	r3, [sp, #4]
 8002fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	4603      	mov	r3, r0
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 f9d3 	bl	8003378 <I2C_RequestMemoryWrite>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e0a9      	b.n	8003138 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	2bff      	cmp	r3, #255	; 0xff
 8002fec:	d90e      	bls.n	800300c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	22ff      	movs	r2, #255	; 0xff
 8002ff2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	8979      	ldrh	r1, [r7, #10]
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 fc1f 	bl	8003848 <I2C_TransferConfig>
 800300a:	e00f      	b.n	800302c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301a:	b2da      	uxtb	r2, r3
 800301c:	8979      	ldrh	r1, [r7, #10]
 800301e:	2300      	movs	r3, #0
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 fc0e 	bl	8003848 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f000 faad 	bl	8003590 <I2C_WaitOnTXISFlagUntilTimeout>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e07b      	b.n	8003138 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	781a      	ldrb	r2, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	1c5a      	adds	r2, r3, #1
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305a:	b29b      	uxth	r3, r3
 800305c:	3b01      	subs	r3, #1
 800305e:	b29a      	uxth	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003068:	3b01      	subs	r3, #1
 800306a:	b29a      	uxth	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003074:	b29b      	uxth	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d034      	beq.n	80030e4 <HAL_I2C_Mem_Write+0x1c8>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800307e:	2b00      	cmp	r3, #0
 8003080:	d130      	bne.n	80030e4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	9300      	str	r3, [sp, #0]
 8003086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003088:	2200      	movs	r2, #0
 800308a:	2180      	movs	r1, #128	; 0x80
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 fa3f 	bl	8003510 <I2C_WaitOnFlagUntilTimeout>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e04d      	b.n	8003138 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2bff      	cmp	r3, #255	; 0xff
 80030a4:	d90e      	bls.n	80030c4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	22ff      	movs	r2, #255	; 0xff
 80030aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	8979      	ldrh	r1, [r7, #10]
 80030b4:	2300      	movs	r3, #0
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 fbc3 	bl	8003848 <I2C_TransferConfig>
 80030c2:	e00f      	b.n	80030e4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	8979      	ldrh	r1, [r7, #10]
 80030d6:	2300      	movs	r3, #0
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 fbb2 	bl	8003848 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d19e      	bne.n	800302c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 fa8c 	bl	8003610 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e01a      	b.n	8003138 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2220      	movs	r2, #32
 8003108:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6859      	ldr	r1, [r3, #4]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <HAL_I2C_Mem_Write+0x224>)
 8003116:	400b      	ands	r3, r1
 8003118:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2220      	movs	r2, #32
 800311e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003132:	2300      	movs	r3, #0
 8003134:	e000      	b.n	8003138 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003136:	2302      	movs	r3, #2
  }
}
 8003138:	4618      	mov	r0, r3
 800313a:	3718      	adds	r7, #24
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	fe00e800 	.word	0xfe00e800

08003144 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b088      	sub	sp, #32
 8003148:	af02      	add	r7, sp, #8
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	4608      	mov	r0, r1
 800314e:	4611      	mov	r1, r2
 8003150:	461a      	mov	r2, r3
 8003152:	4603      	mov	r3, r0
 8003154:	817b      	strh	r3, [r7, #10]
 8003156:	460b      	mov	r3, r1
 8003158:	813b      	strh	r3, [r7, #8]
 800315a:	4613      	mov	r3, r2
 800315c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b20      	cmp	r3, #32
 8003168:	f040 80fd 	bne.w	8003366 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <HAL_I2C_Mem_Read+0x34>
 8003172:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003174:	2b00      	cmp	r3, #0
 8003176:	d105      	bne.n	8003184 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800317e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e0f1      	b.n	8003368 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800318a:	2b01      	cmp	r3, #1
 800318c:	d101      	bne.n	8003192 <HAL_I2C_Mem_Read+0x4e>
 800318e:	2302      	movs	r3, #2
 8003190:	e0ea      	b.n	8003368 <HAL_I2C_Mem_Read+0x224>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800319a:	f7ff fb27 	bl	80027ec <HAL_GetTick>
 800319e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	2319      	movs	r3, #25
 80031a6:	2201      	movs	r2, #1
 80031a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 f9af 	bl	8003510 <I2C_WaitOnFlagUntilTimeout>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e0d5      	b.n	8003368 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2222      	movs	r2, #34	; 0x22
 80031c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2240      	movs	r2, #64	; 0x40
 80031c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6a3a      	ldr	r2, [r7, #32]
 80031d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80031dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031e4:	88f8      	ldrh	r0, [r7, #6]
 80031e6:	893a      	ldrh	r2, [r7, #8]
 80031e8:	8979      	ldrh	r1, [r7, #10]
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	9301      	str	r3, [sp, #4]
 80031ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	4603      	mov	r3, r0
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 f913 	bl	8003420 <I2C_RequestMemoryRead>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d005      	beq.n	800320c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e0ad      	b.n	8003368 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003210:	b29b      	uxth	r3, r3
 8003212:	2bff      	cmp	r3, #255	; 0xff
 8003214:	d90e      	bls.n	8003234 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	22ff      	movs	r2, #255	; 0xff
 800321a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003220:	b2da      	uxtb	r2, r3
 8003222:	8979      	ldrh	r1, [r7, #10]
 8003224:	4b52      	ldr	r3, [pc, #328]	; (8003370 <HAL_I2C_Mem_Read+0x22c>)
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 fb0b 	bl	8003848 <I2C_TransferConfig>
 8003232:	e00f      	b.n	8003254 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003238:	b29a      	uxth	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003242:	b2da      	uxtb	r2, r3
 8003244:	8979      	ldrh	r1, [r7, #10]
 8003246:	4b4a      	ldr	r3, [pc, #296]	; (8003370 <HAL_I2C_Mem_Read+0x22c>)
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 fafa 	bl	8003848 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325a:	2200      	movs	r2, #0
 800325c:	2104      	movs	r1, #4
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f000 f956 	bl	8003510 <I2C_WaitOnFlagUntilTimeout>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e07c      	b.n	8003368 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	b2d2      	uxtb	r2, r2
 800327a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800328a:	3b01      	subs	r3, #1
 800328c:	b29a      	uxth	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003296:	b29b      	uxth	r3, r3
 8003298:	3b01      	subs	r3, #1
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d034      	beq.n	8003314 <HAL_I2C_Mem_Read+0x1d0>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d130      	bne.n	8003314 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b8:	2200      	movs	r2, #0
 80032ba:	2180      	movs	r1, #128	; 0x80
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f000 f927 	bl	8003510 <I2C_WaitOnFlagUntilTimeout>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e04d      	b.n	8003368 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d0:	b29b      	uxth	r3, r3
 80032d2:	2bff      	cmp	r3, #255	; 0xff
 80032d4:	d90e      	bls.n	80032f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	22ff      	movs	r2, #255	; 0xff
 80032da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	8979      	ldrh	r1, [r7, #10]
 80032e4:	2300      	movs	r3, #0
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032ec:	68f8      	ldr	r0, [r7, #12]
 80032ee:	f000 faab 	bl	8003848 <I2C_TransferConfig>
 80032f2:	e00f      	b.n	8003314 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003302:	b2da      	uxtb	r2, r3
 8003304:	8979      	ldrh	r1, [r7, #10]
 8003306:	2300      	movs	r3, #0
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 fa9a 	bl	8003848 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003318:	b29b      	uxth	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d19a      	bne.n	8003254 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 f974 	bl	8003610 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e01a      	b.n	8003368 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2220      	movs	r2, #32
 8003338:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6859      	ldr	r1, [r3, #4]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	4b0b      	ldr	r3, [pc, #44]	; (8003374 <HAL_I2C_Mem_Read+0x230>)
 8003346:	400b      	ands	r3, r1
 8003348:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003362:	2300      	movs	r3, #0
 8003364:	e000      	b.n	8003368 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003366:	2302      	movs	r3, #2
  }
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	80002400 	.word	0x80002400
 8003374:	fe00e800 	.word	0xfe00e800

08003378 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af02      	add	r7, sp, #8
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	4608      	mov	r0, r1
 8003382:	4611      	mov	r1, r2
 8003384:	461a      	mov	r2, r3
 8003386:	4603      	mov	r3, r0
 8003388:	817b      	strh	r3, [r7, #10]
 800338a:	460b      	mov	r3, r1
 800338c:	813b      	strh	r3, [r7, #8]
 800338e:	4613      	mov	r3, r2
 8003390:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003392:	88fb      	ldrh	r3, [r7, #6]
 8003394:	b2da      	uxtb	r2, r3
 8003396:	8979      	ldrh	r1, [r7, #10]
 8003398:	4b20      	ldr	r3, [pc, #128]	; (800341c <I2C_RequestMemoryWrite+0xa4>)
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 fa51 	bl	8003848 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033a6:	69fa      	ldr	r2, [r7, #28]
 80033a8:	69b9      	ldr	r1, [r7, #24]
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 f8f0 	bl	8003590 <I2C_WaitOnTXISFlagUntilTimeout>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e02c      	b.n	8003414 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033ba:	88fb      	ldrh	r3, [r7, #6]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d105      	bne.n	80033cc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033c0:	893b      	ldrh	r3, [r7, #8]
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	629a      	str	r2, [r3, #40]	; 0x28
 80033ca:	e015      	b.n	80033f8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80033cc:	893b      	ldrh	r3, [r7, #8]
 80033ce:	0a1b      	lsrs	r3, r3, #8
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	b2da      	uxtb	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033da:	69fa      	ldr	r2, [r7, #28]
 80033dc:	69b9      	ldr	r1, [r7, #24]
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 f8d6 	bl	8003590 <I2C_WaitOnTXISFlagUntilTimeout>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e012      	b.n	8003414 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033ee:	893b      	ldrh	r3, [r7, #8]
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	2200      	movs	r2, #0
 8003400:	2180      	movs	r1, #128	; 0x80
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 f884 	bl	8003510 <I2C_WaitOnFlagUntilTimeout>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	80002000 	.word	0x80002000

08003420 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af02      	add	r7, sp, #8
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	4608      	mov	r0, r1
 800342a:	4611      	mov	r1, r2
 800342c:	461a      	mov	r2, r3
 800342e:	4603      	mov	r3, r0
 8003430:	817b      	strh	r3, [r7, #10]
 8003432:	460b      	mov	r3, r1
 8003434:	813b      	strh	r3, [r7, #8]
 8003436:	4613      	mov	r3, r2
 8003438:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800343a:	88fb      	ldrh	r3, [r7, #6]
 800343c:	b2da      	uxtb	r2, r3
 800343e:	8979      	ldrh	r1, [r7, #10]
 8003440:	4b20      	ldr	r3, [pc, #128]	; (80034c4 <I2C_RequestMemoryRead+0xa4>)
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	2300      	movs	r3, #0
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f000 f9fe 	bl	8003848 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800344c:	69fa      	ldr	r2, [r7, #28]
 800344e:	69b9      	ldr	r1, [r7, #24]
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 f89d 	bl	8003590 <I2C_WaitOnTXISFlagUntilTimeout>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e02c      	b.n	80034ba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003460:	88fb      	ldrh	r3, [r7, #6]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d105      	bne.n	8003472 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003466:	893b      	ldrh	r3, [r7, #8]
 8003468:	b2da      	uxtb	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	629a      	str	r2, [r3, #40]	; 0x28
 8003470:	e015      	b.n	800349e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003472:	893b      	ldrh	r3, [r7, #8]
 8003474:	0a1b      	lsrs	r3, r3, #8
 8003476:	b29b      	uxth	r3, r3
 8003478:	b2da      	uxtb	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003480:	69fa      	ldr	r2, [r7, #28]
 8003482:	69b9      	ldr	r1, [r7, #24]
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f000 f883 	bl	8003590 <I2C_WaitOnTXISFlagUntilTimeout>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e012      	b.n	80034ba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003494:	893b      	ldrh	r3, [r7, #8]
 8003496:	b2da      	uxtb	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	2200      	movs	r2, #0
 80034a6:	2140      	movs	r1, #64	; 0x40
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 f831 	bl	8003510 <I2C_WaitOnFlagUntilTimeout>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e000      	b.n	80034ba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	80002000 	.word	0x80002000

080034c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d103      	bne.n	80034e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2200      	movs	r2, #0
 80034e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d007      	beq.n	8003504 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	699a      	ldr	r2, [r3, #24]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0201 	orr.w	r2, r2, #1
 8003502:	619a      	str	r2, [r3, #24]
  }
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	603b      	str	r3, [r7, #0]
 800351c:	4613      	mov	r3, r2
 800351e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003520:	e022      	b.n	8003568 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003528:	d01e      	beq.n	8003568 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800352a:	f7ff f95f 	bl	80027ec <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d302      	bcc.n	8003540 <I2C_WaitOnFlagUntilTimeout+0x30>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d113      	bne.n	8003568 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003544:	f043 0220 	orr.w	r2, r3, #32
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e00f      	b.n	8003588 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699a      	ldr	r2, [r3, #24]
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	4013      	ands	r3, r2
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	429a      	cmp	r2, r3
 8003576:	bf0c      	ite	eq
 8003578:	2301      	moveq	r3, #1
 800357a:	2300      	movne	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	461a      	mov	r2, r3
 8003580:	79fb      	ldrb	r3, [r7, #7]
 8003582:	429a      	cmp	r2, r3
 8003584:	d0cd      	beq.n	8003522 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800359c:	e02c      	b.n	80035f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	68b9      	ldr	r1, [r7, #8]
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 f870 	bl	8003688 <I2C_IsErrorOccurred>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e02a      	b.n	8003608 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b8:	d01e      	beq.n	80035f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ba:	f7ff f917 	bl	80027ec <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d302      	bcc.n	80035d0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d113      	bne.n	80035f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d4:	f043 0220 	orr.w	r2, r3, #32
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2220      	movs	r2, #32
 80035e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e007      	b.n	8003608 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b02      	cmp	r3, #2
 8003604:	d1cb      	bne.n	800359e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800361c:	e028      	b.n	8003670 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	68b9      	ldr	r1, [r7, #8]
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 f830 	bl	8003688 <I2C_IsErrorOccurred>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e026      	b.n	8003680 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003632:	f7ff f8db 	bl	80027ec <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	429a      	cmp	r2, r3
 8003640:	d302      	bcc.n	8003648 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d113      	bne.n	8003670 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364c:	f043 0220 	orr.w	r2, r3, #32
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e007      	b.n	8003680 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	f003 0320 	and.w	r3, r3, #32
 800367a:	2b20      	cmp	r3, #32
 800367c:	d1cf      	bne.n	800361e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08a      	sub	sp, #40	; 0x28
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003694:	2300      	movs	r3, #0
 8003696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80036a2:	2300      	movs	r3, #0
 80036a4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	f003 0310 	and.w	r3, r3, #16
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d068      	beq.n	8003786 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2210      	movs	r2, #16
 80036ba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036bc:	e049      	b.n	8003752 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c4:	d045      	beq.n	8003752 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036c6:	f7ff f891 	bl	80027ec <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	68ba      	ldr	r2, [r7, #8]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d302      	bcc.n	80036dc <I2C_IsErrorOccurred+0x54>
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d13a      	bne.n	8003752 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036ee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036fe:	d121      	bne.n	8003744 <I2C_IsErrorOccurred+0xbc>
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003706:	d01d      	beq.n	8003744 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003708:	7cfb      	ldrb	r3, [r7, #19]
 800370a:	2b20      	cmp	r3, #32
 800370c:	d01a      	beq.n	8003744 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800371c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800371e:	f7ff f865 	bl	80027ec <HAL_GetTick>
 8003722:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003724:	e00e      	b.n	8003744 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003726:	f7ff f861 	bl	80027ec <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b19      	cmp	r3, #25
 8003732:	d907      	bls.n	8003744 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	f043 0320 	orr.w	r3, r3, #32
 800373a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003742:	e006      	b.n	8003752 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	f003 0320 	and.w	r3, r3, #32
 800374e:	2b20      	cmp	r3, #32
 8003750:	d1e9      	bne.n	8003726 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	f003 0320 	and.w	r3, r3, #32
 800375c:	2b20      	cmp	r3, #32
 800375e:	d003      	beq.n	8003768 <I2C_IsErrorOccurred+0xe0>
 8003760:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0aa      	beq.n	80036be <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003768:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800376c:	2b00      	cmp	r3, #0
 800376e:	d103      	bne.n	8003778 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2220      	movs	r2, #32
 8003776:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	f043 0304 	orr.w	r3, r3, #4
 800377e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00b      	beq.n	80037b0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	f043 0301 	orr.w	r3, r3, #1
 800379e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00b      	beq.n	80037d2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	f043 0308 	orr.w	r3, r3, #8
 80037c0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00b      	beq.n	80037f4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80037dc:	6a3b      	ldr	r3, [r7, #32]
 80037de:	f043 0302 	orr.w	r3, r3, #2
 80037e2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80037f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d01c      	beq.n	8003836 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f7ff fe63 	bl	80034c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6859      	ldr	r1, [r3, #4]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	4b0d      	ldr	r3, [pc, #52]	; (8003844 <I2C_IsErrorOccurred+0x1bc>)
 800380e:	400b      	ands	r3, r1
 8003810:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003816:	6a3b      	ldr	r3, [r7, #32]
 8003818:	431a      	orrs	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2220      	movs	r2, #32
 8003822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003836:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800383a:	4618      	mov	r0, r3
 800383c:	3728      	adds	r7, #40	; 0x28
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	fe00e800 	.word	0xfe00e800

08003848 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003848:	b480      	push	{r7}
 800384a:	b087      	sub	sp, #28
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	607b      	str	r3, [r7, #4]
 8003852:	460b      	mov	r3, r1
 8003854:	817b      	strh	r3, [r7, #10]
 8003856:	4613      	mov	r3, r2
 8003858:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800385a:	897b      	ldrh	r3, [r7, #10]
 800385c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003860:	7a7b      	ldrb	r3, [r7, #9]
 8003862:	041b      	lsls	r3, r3, #16
 8003864:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003868:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800386e:	6a3b      	ldr	r3, [r7, #32]
 8003870:	4313      	orrs	r3, r2
 8003872:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003876:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	6a3b      	ldr	r3, [r7, #32]
 8003880:	0d5b      	lsrs	r3, r3, #21
 8003882:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003886:	4b08      	ldr	r3, [pc, #32]	; (80038a8 <I2C_TransferConfig+0x60>)
 8003888:	430b      	orrs	r3, r1
 800388a:	43db      	mvns	r3, r3
 800388c:	ea02 0103 	and.w	r1, r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	430a      	orrs	r2, r1
 8003898:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800389a:	bf00      	nop
 800389c:	371c      	adds	r7, #28
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	03ff63ff 	.word	0x03ff63ff

080038ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b20      	cmp	r3, #32
 80038c0:	d138      	bne.n	8003934 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d101      	bne.n	80038d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038cc:	2302      	movs	r3, #2
 80038ce:	e032      	b.n	8003936 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2224      	movs	r2, #36	; 0x24
 80038dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0201 	bic.w	r2, r2, #1
 80038ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6819      	ldr	r1, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f042 0201 	orr.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2220      	movs	r2, #32
 8003924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003930:	2300      	movs	r3, #0
 8003932:	e000      	b.n	8003936 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003934:	2302      	movs	r3, #2
  }
}
 8003936:	4618      	mov	r0, r3
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003942:	b480      	push	{r7}
 8003944:	b085      	sub	sp, #20
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
 800394a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b20      	cmp	r3, #32
 8003956:	d139      	bne.n	80039cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800395e:	2b01      	cmp	r3, #1
 8003960:	d101      	bne.n	8003966 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003962:	2302      	movs	r3, #2
 8003964:	e033      	b.n	80039ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2224      	movs	r2, #36	; 0x24
 8003972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 0201 	bic.w	r2, r2, #1
 8003984:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003994:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	021b      	lsls	r3, r3, #8
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	4313      	orrs	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0201 	orr.w	r2, r2, #1
 80039b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039c8:	2300      	movs	r3, #0
 80039ca:	e000      	b.n	80039ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039cc:	2302      	movs	r3, #2
  }
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80039da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039dc:	b08f      	sub	sp, #60	; 0x3c
 80039de:	af0a      	add	r7, sp, #40	; 0x28
 80039e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e116      	b.n	8003c1a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d106      	bne.n	8003a0c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7fe fcf0 	bl	80023ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2203      	movs	r2, #3
 8003a10:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d102      	bne.n	8003a26 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f003 f844 	bl	8006ab8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	603b      	str	r3, [r7, #0]
 8003a36:	687e      	ldr	r6, [r7, #4]
 8003a38:	466d      	mov	r5, sp
 8003a3a:	f106 0410 	add.w	r4, r6, #16
 8003a3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a4e:	1d33      	adds	r3, r6, #4
 8003a50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a52:	6838      	ldr	r0, [r7, #0]
 8003a54:	f002 ffd8 	bl	8006a08 <USB_CoreInit>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d005      	beq.n	8003a6a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2202      	movs	r2, #2
 8003a62:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e0d7      	b.n	8003c1a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2100      	movs	r1, #0
 8003a70:	4618      	mov	r0, r3
 8003a72:	f003 f832 	bl	8006ada <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a76:	2300      	movs	r3, #0
 8003a78:	73fb      	strb	r3, [r7, #15]
 8003a7a:	e04a      	b.n	8003b12 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a7c:	7bfa      	ldrb	r2, [r7, #15]
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	4613      	mov	r3, r2
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	4413      	add	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	333d      	adds	r3, #61	; 0x3d
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a90:	7bfa      	ldrb	r2, [r7, #15]
 8003a92:	6879      	ldr	r1, [r7, #4]
 8003a94:	4613      	mov	r3, r2
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	4413      	add	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	440b      	add	r3, r1
 8003a9e:	333c      	adds	r3, #60	; 0x3c
 8003aa0:	7bfa      	ldrb	r2, [r7, #15]
 8003aa2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003aa4:	7bfa      	ldrb	r2, [r7, #15]
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
 8003aa8:	b298      	uxth	r0, r3
 8003aaa:	6879      	ldr	r1, [r7, #4]
 8003aac:	4613      	mov	r3, r2
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	4413      	add	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	3344      	adds	r3, #68	; 0x44
 8003ab8:	4602      	mov	r2, r0
 8003aba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003abc:	7bfa      	ldrb	r2, [r7, #15]
 8003abe:	6879      	ldr	r1, [r7, #4]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	4413      	add	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	3340      	adds	r3, #64	; 0x40
 8003acc:	2200      	movs	r2, #0
 8003ace:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ad0:	7bfa      	ldrb	r2, [r7, #15]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	4413      	add	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	3348      	adds	r3, #72	; 0x48
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ae4:	7bfa      	ldrb	r2, [r7, #15]
 8003ae6:	6879      	ldr	r1, [r7, #4]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	4413      	add	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	334c      	adds	r3, #76	; 0x4c
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003af8:	7bfa      	ldrb	r2, [r7, #15]
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	4613      	mov	r3, r2
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	4413      	add	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	3354      	adds	r3, #84	; 0x54
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	73fb      	strb	r3, [r7, #15]
 8003b12:	7bfa      	ldrb	r2, [r7, #15]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d3af      	bcc.n	8003a7c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	73fb      	strb	r3, [r7, #15]
 8003b20:	e044      	b.n	8003bac <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b22:	7bfa      	ldrb	r2, [r7, #15]
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	4613      	mov	r3, r2
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	4413      	add	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	440b      	add	r3, r1
 8003b30:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003b34:	2200      	movs	r2, #0
 8003b36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b38:	7bfa      	ldrb	r2, [r7, #15]
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	4413      	add	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003b4a:	7bfa      	ldrb	r2, [r7, #15]
 8003b4c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b4e:	7bfa      	ldrb	r2, [r7, #15]
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	4613      	mov	r3, r2
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	4413      	add	r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	440b      	add	r3, r1
 8003b5c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003b60:	2200      	movs	r2, #0
 8003b62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b64:	7bfa      	ldrb	r2, [r7, #15]
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	4413      	add	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	440b      	add	r3, r1
 8003b72:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b7a:	7bfa      	ldrb	r2, [r7, #15]
 8003b7c:	6879      	ldr	r1, [r7, #4]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	4413      	add	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	440b      	add	r3, r1
 8003b88:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b90:	7bfa      	ldrb	r2, [r7, #15]
 8003b92:	6879      	ldr	r1, [r7, #4]
 8003b94:	4613      	mov	r3, r2
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	4413      	add	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ba6:	7bfb      	ldrb	r3, [r7, #15]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	73fb      	strb	r3, [r7, #15]
 8003bac:	7bfa      	ldrb	r2, [r7, #15]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d3b5      	bcc.n	8003b22 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	603b      	str	r3, [r7, #0]
 8003bbc:	687e      	ldr	r6, [r7, #4]
 8003bbe:	466d      	mov	r5, sp
 8003bc0:	f106 0410 	add.w	r4, r6, #16
 8003bc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bcc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bd0:	e885 0003 	stmia.w	r5, {r0, r1}
 8003bd4:	1d33      	adds	r3, r6, #4
 8003bd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bd8:	6838      	ldr	r0, [r7, #0]
 8003bda:	f002 ffcb 	bl	8006b74 <USB_DevInit>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d005      	beq.n	8003bf0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2202      	movs	r2, #2
 8003be8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e014      	b.n	8003c1a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d102      	bne.n	8003c0e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f80b 	bl	8003c24 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f003 f989 	bl	8006f2a <USB_DevDisconnect>

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003c24 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c52:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <HAL_PCDEx_ActivateLPM+0x44>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3714      	adds	r7, #20
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr
 8003c68:	10000003 	.word	0x10000003

08003c6c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c70:	4b05      	ldr	r3, [pc, #20]	; (8003c88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a04      	ldr	r2, [pc, #16]	; (8003c88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c7a:	6013      	str	r3, [r2, #0]
}
 8003c7c:	bf00      	nop
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	40007000 	.word	0x40007000

08003c8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003c94:	2300      	movs	r3, #0
 8003c96:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e291      	b.n	80041c6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f000 8087 	beq.w	8003dbe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cb0:	4b96      	ldr	r3, [pc, #600]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f003 030c 	and.w	r3, r3, #12
 8003cb8:	2b04      	cmp	r3, #4
 8003cba:	d00c      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cbc:	4b93      	ldr	r3, [pc, #588]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f003 030c 	and.w	r3, r3, #12
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d112      	bne.n	8003cee <HAL_RCC_OscConfig+0x62>
 8003cc8:	4b90      	ldr	r3, [pc, #576]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cd4:	d10b      	bne.n	8003cee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd6:	4b8d      	ldr	r3, [pc, #564]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d06c      	beq.n	8003dbc <HAL_RCC_OscConfig+0x130>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d168      	bne.n	8003dbc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e26b      	b.n	80041c6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cf6:	d106      	bne.n	8003d06 <HAL_RCC_OscConfig+0x7a>
 8003cf8:	4b84      	ldr	r3, [pc, #528]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a83      	ldr	r2, [pc, #524]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d02:	6013      	str	r3, [r2, #0]
 8003d04:	e02e      	b.n	8003d64 <HAL_RCC_OscConfig+0xd8>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10c      	bne.n	8003d28 <HAL_RCC_OscConfig+0x9c>
 8003d0e:	4b7f      	ldr	r3, [pc, #508]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a7e      	ldr	r2, [pc, #504]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003d14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d18:	6013      	str	r3, [r2, #0]
 8003d1a:	4b7c      	ldr	r3, [pc, #496]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a7b      	ldr	r2, [pc, #492]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003d20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d24:	6013      	str	r3, [r2, #0]
 8003d26:	e01d      	b.n	8003d64 <HAL_RCC_OscConfig+0xd8>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d30:	d10c      	bne.n	8003d4c <HAL_RCC_OscConfig+0xc0>
 8003d32:	4b76      	ldr	r3, [pc, #472]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a75      	ldr	r2, [pc, #468]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	4b73      	ldr	r3, [pc, #460]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a72      	ldr	r2, [pc, #456]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d48:	6013      	str	r3, [r2, #0]
 8003d4a:	e00b      	b.n	8003d64 <HAL_RCC_OscConfig+0xd8>
 8003d4c:	4b6f      	ldr	r3, [pc, #444]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a6e      	ldr	r2, [pc, #440]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d56:	6013      	str	r3, [r2, #0]
 8003d58:	4b6c      	ldr	r3, [pc, #432]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a6b      	ldr	r2, [pc, #428]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d013      	beq.n	8003d94 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6c:	f7fe fd3e 	bl	80027ec <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d74:	f7fe fd3a 	bl	80027ec <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b64      	cmp	r3, #100	; 0x64
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e21f      	b.n	80041c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d86:	4b61      	ldr	r3, [pc, #388]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0f0      	beq.n	8003d74 <HAL_RCC_OscConfig+0xe8>
 8003d92:	e014      	b.n	8003dbe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d94:	f7fe fd2a 	bl	80027ec <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d9c:	f7fe fd26 	bl	80027ec <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b64      	cmp	r3, #100	; 0x64
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e20b      	b.n	80041c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dae:	4b57      	ldr	r3, [pc, #348]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1f0      	bne.n	8003d9c <HAL_RCC_OscConfig+0x110>
 8003dba:	e000      	b.n	8003dbe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d069      	beq.n	8003e9e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dca:	4b50      	ldr	r3, [pc, #320]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 030c 	and.w	r3, r3, #12
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00b      	beq.n	8003dee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dd6:	4b4d      	ldr	r3, [pc, #308]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 030c 	and.w	r3, r3, #12
 8003dde:	2b08      	cmp	r3, #8
 8003de0:	d11c      	bne.n	8003e1c <HAL_RCC_OscConfig+0x190>
 8003de2:	4b4a      	ldr	r3, [pc, #296]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d116      	bne.n	8003e1c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dee:	4b47      	ldr	r3, [pc, #284]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d005      	beq.n	8003e06 <HAL_RCC_OscConfig+0x17a>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d001      	beq.n	8003e06 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e1df      	b.n	80041c6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e06:	4b41      	ldr	r3, [pc, #260]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	493d      	ldr	r1, [pc, #244]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e1a:	e040      	b.n	8003e9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d023      	beq.n	8003e6c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e24:	4b39      	ldr	r3, [pc, #228]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a38      	ldr	r2, [pc, #224]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003e2a:	f043 0301 	orr.w	r3, r3, #1
 8003e2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e30:	f7fe fcdc 	bl	80027ec <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e38:	f7fe fcd8 	bl	80027ec <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e1bd      	b.n	80041c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e4a:	4b30      	ldr	r3, [pc, #192]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0f0      	beq.n	8003e38 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e56:	4b2d      	ldr	r3, [pc, #180]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	4929      	ldr	r1, [pc, #164]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	600b      	str	r3, [r1, #0]
 8003e6a:	e018      	b.n	8003e9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e6c:	4b27      	ldr	r3, [pc, #156]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a26      	ldr	r2, [pc, #152]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003e72:	f023 0301 	bic.w	r3, r3, #1
 8003e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e78:	f7fe fcb8 	bl	80027ec <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e80:	f7fe fcb4 	bl	80027ec <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e199      	b.n	80041c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e92:	4b1e      	ldr	r3, [pc, #120]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1f0      	bne.n	8003e80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0308 	and.w	r3, r3, #8
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d038      	beq.n	8003f1c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d019      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eb2:	4b16      	ldr	r3, [pc, #88]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eb6:	4a15      	ldr	r2, [pc, #84]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003eb8:	f043 0301 	orr.w	r3, r3, #1
 8003ebc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ebe:	f7fe fc95 	bl	80027ec <HAL_GetTick>
 8003ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ec4:	e008      	b.n	8003ed8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ec6:	f7fe fc91 	bl	80027ec <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e176      	b.n	80041c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ed8:	4b0c      	ldr	r3, [pc, #48]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d0f0      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x23a>
 8003ee4:	e01a      	b.n	8003f1c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ee6:	4b09      	ldr	r3, [pc, #36]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eea:	4a08      	ldr	r2, [pc, #32]	; (8003f0c <HAL_RCC_OscConfig+0x280>)
 8003eec:	f023 0301 	bic.w	r3, r3, #1
 8003ef0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef2:	f7fe fc7b 	bl	80027ec <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ef8:	e00a      	b.n	8003f10 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003efa:	f7fe fc77 	bl	80027ec <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d903      	bls.n	8003f10 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e15c      	b.n	80041c6 <HAL_RCC_OscConfig+0x53a>
 8003f0c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f10:	4b91      	ldr	r3, [pc, #580]	; (8004158 <HAL_RCC_OscConfig+0x4cc>)
 8003f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1ee      	bne.n	8003efa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 80a4 	beq.w	8004072 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f2a:	4b8b      	ldr	r3, [pc, #556]	; (8004158 <HAL_RCC_OscConfig+0x4cc>)
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10d      	bne.n	8003f52 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f36:	4b88      	ldr	r3, [pc, #544]	; (8004158 <HAL_RCC_OscConfig+0x4cc>)
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	4a87      	ldr	r2, [pc, #540]	; (8004158 <HAL_RCC_OscConfig+0x4cc>)
 8003f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f40:	6413      	str	r3, [r2, #64]	; 0x40
 8003f42:	4b85      	ldr	r3, [pc, #532]	; (8004158 <HAL_RCC_OscConfig+0x4cc>)
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f4a:	60bb      	str	r3, [r7, #8]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f52:	4b82      	ldr	r3, [pc, #520]	; (800415c <HAL_RCC_OscConfig+0x4d0>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d118      	bne.n	8003f90 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003f5e:	4b7f      	ldr	r3, [pc, #508]	; (800415c <HAL_RCC_OscConfig+0x4d0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a7e      	ldr	r2, [pc, #504]	; (800415c <HAL_RCC_OscConfig+0x4d0>)
 8003f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f6a:	f7fe fc3f 	bl	80027ec <HAL_GetTick>
 8003f6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f70:	e008      	b.n	8003f84 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f72:	f7fe fc3b 	bl	80027ec <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b64      	cmp	r3, #100	; 0x64
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e120      	b.n	80041c6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f84:	4b75      	ldr	r3, [pc, #468]	; (800415c <HAL_RCC_OscConfig+0x4d0>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d0f0      	beq.n	8003f72 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d106      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x31a>
 8003f98:	4b6f      	ldr	r3, [pc, #444]	; (8004158 <HAL_RCC_OscConfig+0x4cc>)
 8003f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9c:	4a6e      	ldr	r2, [pc, #440]	; (8004158 <HAL_RCC_OscConfig+0x4cc>)
 8003f9e:	f043 0301 	orr.w	r3, r3, #1
 8003fa2:	6713      	str	r3, [r2, #112]	; 0x70
 8003fa4:	e02d      	b.n	8004002 <HAL_RCC_OscConfig+0x376>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10c      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x33c>
 8003fae:	4b6a      	ldr	r3, [pc, #424]	; (8004158 <HAL_RCC_OscConfig+0x4cc>)
 8003fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb2:	4a69      	ldr	r2, [pc, #420]	; (8004158 <HAL_RCC_OscConfig+0x4cc>)
 8003fb4:	f023 0301 	bic.w	r3, r3, #1
 8003fb8:	6713      	str	r3, [r2, #112]	; 0x70
 8003fba:	4b67      	ldr	r3, [pc, #412]	; (8004158 <HAL_RCC_OscConfig+0x4cc>)
 8003fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbe:	4a66      	ldr	r2, [pc, #408]	; (8004158 <HAL_RCC_OscConfig+0x4cc>)
 8003fc0:	f023 0304 	bic.w	r3, r3, #4
 8003fc4:	6713      	str	r3, [r2, #112]	; 0x70
 8003fc6:	e01c      	b.n	8004002 <HAL_RCC_OscConfig+0x376>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	2b05      	cmp	r3, #5
 8003fce:	d10c      	bne.n	8003fea <HAL_RCC_OscConfig+0x35e>
 8003fd0:	4b61      	ldr	r3, [pc, #388]	; (8004158 <HAL_RCC_OscConfig+0x4cc>)
 8003fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd4:	4a60      	ldr	r2, [pc, #384]	; (8004158 <HAL_RCC_OscConfig+0x4cc>)
 8003fd6:	f043 0304 	orr.w	r3, r3, #4
 8003fda:	6713      	str	r3, [r2, #112]	; 0x70
 8003fdc:	4b5e      	ldr	r3, [pc, #376]	; (8004158 <HAL_RCC_OscConfig+0x4cc>)
 8003fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe0:	4a5d      	ldr	r2, [pc, #372]	; (8004158 <HAL_RCC_OscConfig+0x4cc>)
 8003fe2:	f043 0301 	orr.w	r3, r3, #1
 8003fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8003fe8:	e00b      	b.n	8004002 <HAL_RCC_OscConfig+0x376>
 8003fea:	4b5b      	ldr	r3, [pc, #364]	; (8004158 <HAL_RCC_OscConfig+0x4cc>)
 8003fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fee:	4a5a      	ldr	r2, [pc, #360]	; (8004158 <HAL_RCC_OscConfig+0x4cc>)
 8003ff0:	f023 0301 	bic.w	r3, r3, #1
 8003ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff6:	4b58      	ldr	r3, [pc, #352]	; (8004158 <HAL_RCC_OscConfig+0x4cc>)
 8003ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffa:	4a57      	ldr	r2, [pc, #348]	; (8004158 <HAL_RCC_OscConfig+0x4cc>)
 8003ffc:	f023 0304 	bic.w	r3, r3, #4
 8004000:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d015      	beq.n	8004036 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800400a:	f7fe fbef 	bl	80027ec <HAL_GetTick>
 800400e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004010:	e00a      	b.n	8004028 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004012:	f7fe fbeb 	bl	80027ec <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004020:	4293      	cmp	r3, r2
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e0ce      	b.n	80041c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004028:	4b4b      	ldr	r3, [pc, #300]	; (8004158 <HAL_RCC_OscConfig+0x4cc>)
 800402a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d0ee      	beq.n	8004012 <HAL_RCC_OscConfig+0x386>
 8004034:	e014      	b.n	8004060 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004036:	f7fe fbd9 	bl	80027ec <HAL_GetTick>
 800403a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800403c:	e00a      	b.n	8004054 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800403e:	f7fe fbd5 	bl	80027ec <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	f241 3288 	movw	r2, #5000	; 0x1388
 800404c:	4293      	cmp	r3, r2
 800404e:	d901      	bls.n	8004054 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e0b8      	b.n	80041c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004054:	4b40      	ldr	r3, [pc, #256]	; (8004158 <HAL_RCC_OscConfig+0x4cc>)
 8004056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1ee      	bne.n	800403e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004060:	7dfb      	ldrb	r3, [r7, #23]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d105      	bne.n	8004072 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004066:	4b3c      	ldr	r3, [pc, #240]	; (8004158 <HAL_RCC_OscConfig+0x4cc>)
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	4a3b      	ldr	r2, [pc, #236]	; (8004158 <HAL_RCC_OscConfig+0x4cc>)
 800406c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004070:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 80a4 	beq.w	80041c4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800407c:	4b36      	ldr	r3, [pc, #216]	; (8004158 <HAL_RCC_OscConfig+0x4cc>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f003 030c 	and.w	r3, r3, #12
 8004084:	2b08      	cmp	r3, #8
 8004086:	d06b      	beq.n	8004160 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	699b      	ldr	r3, [r3, #24]
 800408c:	2b02      	cmp	r3, #2
 800408e:	d149      	bne.n	8004124 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004090:	4b31      	ldr	r3, [pc, #196]	; (8004158 <HAL_RCC_OscConfig+0x4cc>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a30      	ldr	r2, [pc, #192]	; (8004158 <HAL_RCC_OscConfig+0x4cc>)
 8004096:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800409a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409c:	f7fe fba6 	bl	80027ec <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040a4:	f7fe fba2 	bl	80027ec <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e087      	b.n	80041c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040b6:	4b28      	ldr	r3, [pc, #160]	; (8004158 <HAL_RCC_OscConfig+0x4cc>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1f0      	bne.n	80040a4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	69da      	ldr	r2, [r3, #28]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	019b      	lsls	r3, r3, #6
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d8:	085b      	lsrs	r3, r3, #1
 80040da:	3b01      	subs	r3, #1
 80040dc:	041b      	lsls	r3, r3, #16
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e4:	061b      	lsls	r3, r3, #24
 80040e6:	4313      	orrs	r3, r2
 80040e8:	4a1b      	ldr	r2, [pc, #108]	; (8004158 <HAL_RCC_OscConfig+0x4cc>)
 80040ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040ee:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040f0:	4b19      	ldr	r3, [pc, #100]	; (8004158 <HAL_RCC_OscConfig+0x4cc>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a18      	ldr	r2, [pc, #96]	; (8004158 <HAL_RCC_OscConfig+0x4cc>)
 80040f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fc:	f7fe fb76 	bl	80027ec <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004104:	f7fe fb72 	bl	80027ec <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e057      	b.n	80041c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004116:	4b10      	ldr	r3, [pc, #64]	; (8004158 <HAL_RCC_OscConfig+0x4cc>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0f0      	beq.n	8004104 <HAL_RCC_OscConfig+0x478>
 8004122:	e04f      	b.n	80041c4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004124:	4b0c      	ldr	r3, [pc, #48]	; (8004158 <HAL_RCC_OscConfig+0x4cc>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a0b      	ldr	r2, [pc, #44]	; (8004158 <HAL_RCC_OscConfig+0x4cc>)
 800412a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800412e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004130:	f7fe fb5c 	bl	80027ec <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004138:	f7fe fb58 	bl	80027ec <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e03d      	b.n	80041c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800414a:	4b03      	ldr	r3, [pc, #12]	; (8004158 <HAL_RCC_OscConfig+0x4cc>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1f0      	bne.n	8004138 <HAL_RCC_OscConfig+0x4ac>
 8004156:	e035      	b.n	80041c4 <HAL_RCC_OscConfig+0x538>
 8004158:	40023800 	.word	0x40023800
 800415c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004160:	4b1b      	ldr	r3, [pc, #108]	; (80041d0 <HAL_RCC_OscConfig+0x544>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d028      	beq.n	80041c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004178:	429a      	cmp	r2, r3
 800417a:	d121      	bne.n	80041c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004186:	429a      	cmp	r2, r3
 8004188:	d11a      	bne.n	80041c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004190:	4013      	ands	r3, r2
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004196:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004198:	4293      	cmp	r3, r2
 800419a:	d111      	bne.n	80041c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a6:	085b      	lsrs	r3, r3, #1
 80041a8:	3b01      	subs	r3, #1
 80041aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d107      	bne.n	80041c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80041bc:	429a      	cmp	r2, r3
 80041be:	d001      	beq.n	80041c4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e000      	b.n	80041c6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3718      	adds	r7, #24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	40023800 	.word	0x40023800

080041d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80041de:	2300      	movs	r3, #0
 80041e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e0d0      	b.n	800438e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041ec:	4b6a      	ldr	r3, [pc, #424]	; (8004398 <HAL_RCC_ClockConfig+0x1c4>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 030f 	and.w	r3, r3, #15
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d910      	bls.n	800421c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fa:	4b67      	ldr	r3, [pc, #412]	; (8004398 <HAL_RCC_ClockConfig+0x1c4>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f023 020f 	bic.w	r2, r3, #15
 8004202:	4965      	ldr	r1, [pc, #404]	; (8004398 <HAL_RCC_ClockConfig+0x1c4>)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	4313      	orrs	r3, r2
 8004208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800420a:	4b63      	ldr	r3, [pc, #396]	; (8004398 <HAL_RCC_ClockConfig+0x1c4>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 030f 	and.w	r3, r3, #15
 8004212:	683a      	ldr	r2, [r7, #0]
 8004214:	429a      	cmp	r2, r3
 8004216:	d001      	beq.n	800421c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e0b8      	b.n	800438e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d020      	beq.n	800426a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0304 	and.w	r3, r3, #4
 8004230:	2b00      	cmp	r3, #0
 8004232:	d005      	beq.n	8004240 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004234:	4b59      	ldr	r3, [pc, #356]	; (800439c <HAL_RCC_ClockConfig+0x1c8>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	4a58      	ldr	r2, [pc, #352]	; (800439c <HAL_RCC_ClockConfig+0x1c8>)
 800423a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800423e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0308 	and.w	r3, r3, #8
 8004248:	2b00      	cmp	r3, #0
 800424a:	d005      	beq.n	8004258 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800424c:	4b53      	ldr	r3, [pc, #332]	; (800439c <HAL_RCC_ClockConfig+0x1c8>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	4a52      	ldr	r2, [pc, #328]	; (800439c <HAL_RCC_ClockConfig+0x1c8>)
 8004252:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004256:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004258:	4b50      	ldr	r3, [pc, #320]	; (800439c <HAL_RCC_ClockConfig+0x1c8>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	494d      	ldr	r1, [pc, #308]	; (800439c <HAL_RCC_ClockConfig+0x1c8>)
 8004266:	4313      	orrs	r3, r2
 8004268:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	2b00      	cmp	r3, #0
 8004274:	d040      	beq.n	80042f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d107      	bne.n	800428e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427e:	4b47      	ldr	r3, [pc, #284]	; (800439c <HAL_RCC_ClockConfig+0x1c8>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d115      	bne.n	80042b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e07f      	b.n	800438e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b02      	cmp	r3, #2
 8004294:	d107      	bne.n	80042a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004296:	4b41      	ldr	r3, [pc, #260]	; (800439c <HAL_RCC_ClockConfig+0x1c8>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d109      	bne.n	80042b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e073      	b.n	800438e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042a6:	4b3d      	ldr	r3, [pc, #244]	; (800439c <HAL_RCC_ClockConfig+0x1c8>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e06b      	b.n	800438e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042b6:	4b39      	ldr	r3, [pc, #228]	; (800439c <HAL_RCC_ClockConfig+0x1c8>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f023 0203 	bic.w	r2, r3, #3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	4936      	ldr	r1, [pc, #216]	; (800439c <HAL_RCC_ClockConfig+0x1c8>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c8:	f7fe fa90 	bl	80027ec <HAL_GetTick>
 80042cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ce:	e00a      	b.n	80042e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042d0:	f7fe fa8c 	bl	80027ec <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	f241 3288 	movw	r2, #5000	; 0x1388
 80042de:	4293      	cmp	r3, r2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e053      	b.n	800438e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e6:	4b2d      	ldr	r3, [pc, #180]	; (800439c <HAL_RCC_ClockConfig+0x1c8>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 020c 	and.w	r2, r3, #12
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d1eb      	bne.n	80042d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042f8:	4b27      	ldr	r3, [pc, #156]	; (8004398 <HAL_RCC_ClockConfig+0x1c4>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 030f 	and.w	r3, r3, #15
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	429a      	cmp	r2, r3
 8004304:	d210      	bcs.n	8004328 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004306:	4b24      	ldr	r3, [pc, #144]	; (8004398 <HAL_RCC_ClockConfig+0x1c4>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f023 020f 	bic.w	r2, r3, #15
 800430e:	4922      	ldr	r1, [pc, #136]	; (8004398 <HAL_RCC_ClockConfig+0x1c4>)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	4313      	orrs	r3, r2
 8004314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004316:	4b20      	ldr	r3, [pc, #128]	; (8004398 <HAL_RCC_ClockConfig+0x1c4>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	429a      	cmp	r2, r3
 8004322:	d001      	beq.n	8004328 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e032      	b.n	800438e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b00      	cmp	r3, #0
 8004332:	d008      	beq.n	8004346 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004334:	4b19      	ldr	r3, [pc, #100]	; (800439c <HAL_RCC_ClockConfig+0x1c8>)
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	4916      	ldr	r1, [pc, #88]	; (800439c <HAL_RCC_ClockConfig+0x1c8>)
 8004342:	4313      	orrs	r3, r2
 8004344:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0308 	and.w	r3, r3, #8
 800434e:	2b00      	cmp	r3, #0
 8004350:	d009      	beq.n	8004366 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004352:	4b12      	ldr	r3, [pc, #72]	; (800439c <HAL_RCC_ClockConfig+0x1c8>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	490e      	ldr	r1, [pc, #56]	; (800439c <HAL_RCC_ClockConfig+0x1c8>)
 8004362:	4313      	orrs	r3, r2
 8004364:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004366:	f000 f821 	bl	80043ac <HAL_RCC_GetSysClockFreq>
 800436a:	4602      	mov	r2, r0
 800436c:	4b0b      	ldr	r3, [pc, #44]	; (800439c <HAL_RCC_ClockConfig+0x1c8>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	091b      	lsrs	r3, r3, #4
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	490a      	ldr	r1, [pc, #40]	; (80043a0 <HAL_RCC_ClockConfig+0x1cc>)
 8004378:	5ccb      	ldrb	r3, [r1, r3]
 800437a:	fa22 f303 	lsr.w	r3, r2, r3
 800437e:	4a09      	ldr	r2, [pc, #36]	; (80043a4 <HAL_RCC_ClockConfig+0x1d0>)
 8004380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004382:	4b09      	ldr	r3, [pc, #36]	; (80043a8 <HAL_RCC_ClockConfig+0x1d4>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f7fe f9ec 	bl	8002764 <HAL_InitTick>

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	40023c00 	.word	0x40023c00
 800439c:	40023800 	.word	0x40023800
 80043a0:	08009a98 	.word	0x08009a98
 80043a4:	2000000c 	.word	0x2000000c
 80043a8:	20000010 	.word	0x20000010

080043ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043b0:	b094      	sub	sp, #80	; 0x50
 80043b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80043b4:	2300      	movs	r3, #0
 80043b6:	647b      	str	r3, [r7, #68]	; 0x44
 80043b8:	2300      	movs	r3, #0
 80043ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043bc:	2300      	movs	r3, #0
 80043be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80043c0:	2300      	movs	r3, #0
 80043c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043c4:	4b79      	ldr	r3, [pc, #484]	; (80045ac <HAL_RCC_GetSysClockFreq+0x200>)
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f003 030c 	and.w	r3, r3, #12
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d00d      	beq.n	80043ec <HAL_RCC_GetSysClockFreq+0x40>
 80043d0:	2b08      	cmp	r3, #8
 80043d2:	f200 80e1 	bhi.w	8004598 <HAL_RCC_GetSysClockFreq+0x1ec>
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d002      	beq.n	80043e0 <HAL_RCC_GetSysClockFreq+0x34>
 80043da:	2b04      	cmp	r3, #4
 80043dc:	d003      	beq.n	80043e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80043de:	e0db      	b.n	8004598 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043e0:	4b73      	ldr	r3, [pc, #460]	; (80045b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80043e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043e4:	e0db      	b.n	800459e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043e6:	4b73      	ldr	r3, [pc, #460]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80043e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043ea:	e0d8      	b.n	800459e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043ec:	4b6f      	ldr	r3, [pc, #444]	; (80045ac <HAL_RCC_GetSysClockFreq+0x200>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043f4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80043f6:	4b6d      	ldr	r3, [pc, #436]	; (80045ac <HAL_RCC_GetSysClockFreq+0x200>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d063      	beq.n	80044ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004402:	4b6a      	ldr	r3, [pc, #424]	; (80045ac <HAL_RCC_GetSysClockFreq+0x200>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	099b      	lsrs	r3, r3, #6
 8004408:	2200      	movs	r2, #0
 800440a:	63bb      	str	r3, [r7, #56]	; 0x38
 800440c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800440e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004414:	633b      	str	r3, [r7, #48]	; 0x30
 8004416:	2300      	movs	r3, #0
 8004418:	637b      	str	r3, [r7, #52]	; 0x34
 800441a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800441e:	4622      	mov	r2, r4
 8004420:	462b      	mov	r3, r5
 8004422:	f04f 0000 	mov.w	r0, #0
 8004426:	f04f 0100 	mov.w	r1, #0
 800442a:	0159      	lsls	r1, r3, #5
 800442c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004430:	0150      	lsls	r0, r2, #5
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
 8004436:	4621      	mov	r1, r4
 8004438:	1a51      	subs	r1, r2, r1
 800443a:	6139      	str	r1, [r7, #16]
 800443c:	4629      	mov	r1, r5
 800443e:	eb63 0301 	sbc.w	r3, r3, r1
 8004442:	617b      	str	r3, [r7, #20]
 8004444:	f04f 0200 	mov.w	r2, #0
 8004448:	f04f 0300 	mov.w	r3, #0
 800444c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004450:	4659      	mov	r1, fp
 8004452:	018b      	lsls	r3, r1, #6
 8004454:	4651      	mov	r1, sl
 8004456:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800445a:	4651      	mov	r1, sl
 800445c:	018a      	lsls	r2, r1, #6
 800445e:	4651      	mov	r1, sl
 8004460:	ebb2 0801 	subs.w	r8, r2, r1
 8004464:	4659      	mov	r1, fp
 8004466:	eb63 0901 	sbc.w	r9, r3, r1
 800446a:	f04f 0200 	mov.w	r2, #0
 800446e:	f04f 0300 	mov.w	r3, #0
 8004472:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004476:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800447a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800447e:	4690      	mov	r8, r2
 8004480:	4699      	mov	r9, r3
 8004482:	4623      	mov	r3, r4
 8004484:	eb18 0303 	adds.w	r3, r8, r3
 8004488:	60bb      	str	r3, [r7, #8]
 800448a:	462b      	mov	r3, r5
 800448c:	eb49 0303 	adc.w	r3, r9, r3
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	f04f 0200 	mov.w	r2, #0
 8004496:	f04f 0300 	mov.w	r3, #0
 800449a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800449e:	4629      	mov	r1, r5
 80044a0:	024b      	lsls	r3, r1, #9
 80044a2:	4621      	mov	r1, r4
 80044a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044a8:	4621      	mov	r1, r4
 80044aa:	024a      	lsls	r2, r1, #9
 80044ac:	4610      	mov	r0, r2
 80044ae:	4619      	mov	r1, r3
 80044b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044b2:	2200      	movs	r2, #0
 80044b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80044b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044bc:	f7fc fc34 	bl	8000d28 <__aeabi_uldivmod>
 80044c0:	4602      	mov	r2, r0
 80044c2:	460b      	mov	r3, r1
 80044c4:	4613      	mov	r3, r2
 80044c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044c8:	e058      	b.n	800457c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ca:	4b38      	ldr	r3, [pc, #224]	; (80045ac <HAL_RCC_GetSysClockFreq+0x200>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	099b      	lsrs	r3, r3, #6
 80044d0:	2200      	movs	r2, #0
 80044d2:	4618      	mov	r0, r3
 80044d4:	4611      	mov	r1, r2
 80044d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044da:	623b      	str	r3, [r7, #32]
 80044dc:	2300      	movs	r3, #0
 80044de:	627b      	str	r3, [r7, #36]	; 0x24
 80044e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044e4:	4642      	mov	r2, r8
 80044e6:	464b      	mov	r3, r9
 80044e8:	f04f 0000 	mov.w	r0, #0
 80044ec:	f04f 0100 	mov.w	r1, #0
 80044f0:	0159      	lsls	r1, r3, #5
 80044f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044f6:	0150      	lsls	r0, r2, #5
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4641      	mov	r1, r8
 80044fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004502:	4649      	mov	r1, r9
 8004504:	eb63 0b01 	sbc.w	fp, r3, r1
 8004508:	f04f 0200 	mov.w	r2, #0
 800450c:	f04f 0300 	mov.w	r3, #0
 8004510:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004514:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004518:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800451c:	ebb2 040a 	subs.w	r4, r2, sl
 8004520:	eb63 050b 	sbc.w	r5, r3, fp
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	f04f 0300 	mov.w	r3, #0
 800452c:	00eb      	lsls	r3, r5, #3
 800452e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004532:	00e2      	lsls	r2, r4, #3
 8004534:	4614      	mov	r4, r2
 8004536:	461d      	mov	r5, r3
 8004538:	4643      	mov	r3, r8
 800453a:	18e3      	adds	r3, r4, r3
 800453c:	603b      	str	r3, [r7, #0]
 800453e:	464b      	mov	r3, r9
 8004540:	eb45 0303 	adc.w	r3, r5, r3
 8004544:	607b      	str	r3, [r7, #4]
 8004546:	f04f 0200 	mov.w	r2, #0
 800454a:	f04f 0300 	mov.w	r3, #0
 800454e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004552:	4629      	mov	r1, r5
 8004554:	028b      	lsls	r3, r1, #10
 8004556:	4621      	mov	r1, r4
 8004558:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800455c:	4621      	mov	r1, r4
 800455e:	028a      	lsls	r2, r1, #10
 8004560:	4610      	mov	r0, r2
 8004562:	4619      	mov	r1, r3
 8004564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004566:	2200      	movs	r2, #0
 8004568:	61bb      	str	r3, [r7, #24]
 800456a:	61fa      	str	r2, [r7, #28]
 800456c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004570:	f7fc fbda 	bl	8000d28 <__aeabi_uldivmod>
 8004574:	4602      	mov	r2, r0
 8004576:	460b      	mov	r3, r1
 8004578:	4613      	mov	r3, r2
 800457a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800457c:	4b0b      	ldr	r3, [pc, #44]	; (80045ac <HAL_RCC_GetSysClockFreq+0x200>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	0c1b      	lsrs	r3, r3, #16
 8004582:	f003 0303 	and.w	r3, r3, #3
 8004586:	3301      	adds	r3, #1
 8004588:	005b      	lsls	r3, r3, #1
 800458a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800458c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800458e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004590:	fbb2 f3f3 	udiv	r3, r2, r3
 8004594:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004596:	e002      	b.n	800459e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004598:	4b05      	ldr	r3, [pc, #20]	; (80045b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800459a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800459c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800459e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3750      	adds	r7, #80	; 0x50
 80045a4:	46bd      	mov	sp, r7
 80045a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045aa:	bf00      	nop
 80045ac:	40023800 	.word	0x40023800
 80045b0:	00f42400 	.word	0x00f42400
 80045b4:	007a1200 	.word	0x007a1200

080045b8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045b8:	b480      	push	{r7}
 80045ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045bc:	4b03      	ldr	r3, [pc, #12]	; (80045cc <HAL_RCC_GetHCLKFreq+0x14>)
 80045be:	681b      	ldr	r3, [r3, #0]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	2000000c 	.word	0x2000000c

080045d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045d4:	f7ff fff0 	bl	80045b8 <HAL_RCC_GetHCLKFreq>
 80045d8:	4602      	mov	r2, r0
 80045da:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	0a9b      	lsrs	r3, r3, #10
 80045e0:	f003 0307 	and.w	r3, r3, #7
 80045e4:	4903      	ldr	r1, [pc, #12]	; (80045f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045e6:	5ccb      	ldrb	r3, [r1, r3]
 80045e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	40023800 	.word	0x40023800
 80045f4:	08009aa8 	.word	0x08009aa8

080045f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045fc:	f7ff ffdc 	bl	80045b8 <HAL_RCC_GetHCLKFreq>
 8004600:	4602      	mov	r2, r0
 8004602:	4b05      	ldr	r3, [pc, #20]	; (8004618 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	0b5b      	lsrs	r3, r3, #13
 8004608:	f003 0307 	and.w	r3, r3, #7
 800460c:	4903      	ldr	r1, [pc, #12]	; (800461c <HAL_RCC_GetPCLK2Freq+0x24>)
 800460e:	5ccb      	ldrb	r3, [r1, r3]
 8004610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004614:	4618      	mov	r0, r3
 8004616:	bd80      	pop	{r7, pc}
 8004618:	40023800 	.word	0x40023800
 800461c:	08009aa8 	.word	0x08009aa8

08004620 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b088      	sub	sp, #32
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004628:	2300      	movs	r3, #0
 800462a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800462c:	2300      	movs	r3, #0
 800462e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004630:	2300      	movs	r3, #0
 8004632:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004634:	2300      	movs	r3, #0
 8004636:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004638:	2300      	movs	r3, #0
 800463a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	d012      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004648:	4b69      	ldr	r3, [pc, #420]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	4a68      	ldr	r2, [pc, #416]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800464e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004652:	6093      	str	r3, [r2, #8]
 8004654:	4b66      	ldr	r3, [pc, #408]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800465c:	4964      	ldr	r1, [pc, #400]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800465e:	4313      	orrs	r3, r2
 8004660:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800466a:	2301      	movs	r3, #1
 800466c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d017      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800467a:	4b5d      	ldr	r3, [pc, #372]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800467c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004680:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004688:	4959      	ldr	r1, [pc, #356]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800468a:	4313      	orrs	r3, r2
 800468c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004694:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004698:	d101      	bne.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800469a:	2301      	movs	r3, #1
 800469c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80046a6:	2301      	movs	r3, #1
 80046a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d017      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046b6:	4b4e      	ldr	r3, [pc, #312]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c4:	494a      	ldr	r1, [pc, #296]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046d4:	d101      	bne.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80046d6:	2301      	movs	r3, #1
 80046d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80046e2:	2301      	movs	r3, #1
 80046e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80046f2:	2301      	movs	r3, #1
 80046f4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0320 	and.w	r3, r3, #32
 80046fe:	2b00      	cmp	r3, #0
 8004700:	f000 808b 	beq.w	800481a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004704:	4b3a      	ldr	r3, [pc, #232]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004708:	4a39      	ldr	r2, [pc, #228]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800470a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800470e:	6413      	str	r3, [r2, #64]	; 0x40
 8004710:	4b37      	ldr	r3, [pc, #220]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004718:	60bb      	str	r3, [r7, #8]
 800471a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800471c:	4b35      	ldr	r3, [pc, #212]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a34      	ldr	r2, [pc, #208]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004726:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004728:	f7fe f860 	bl	80027ec <HAL_GetTick>
 800472c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800472e:	e008      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004730:	f7fe f85c 	bl	80027ec <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b64      	cmp	r3, #100	; 0x64
 800473c:	d901      	bls.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e357      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004742:	4b2c      	ldr	r3, [pc, #176]	; (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474a:	2b00      	cmp	r3, #0
 800474c:	d0f0      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800474e:	4b28      	ldr	r3, [pc, #160]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004756:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d035      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	429a      	cmp	r2, r3
 800476a:	d02e      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800476c:	4b20      	ldr	r3, [pc, #128]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800476e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004774:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004776:	4b1e      	ldr	r3, [pc, #120]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477a:	4a1d      	ldr	r2, [pc, #116]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800477c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004780:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004782:	4b1b      	ldr	r3, [pc, #108]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004786:	4a1a      	ldr	r2, [pc, #104]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800478c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800478e:	4a18      	ldr	r2, [pc, #96]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004794:	4b16      	ldr	r3, [pc, #88]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	2b01      	cmp	r3, #1
 800479e:	d114      	bne.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a0:	f7fe f824 	bl	80027ec <HAL_GetTick>
 80047a4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a6:	e00a      	b.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047a8:	f7fe f820 	bl	80027ec <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d901      	bls.n	80047be <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e319      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047be:	4b0c      	ldr	r3, [pc, #48]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d0ee      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047d6:	d111      	bne.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80047d8:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047e4:	4b04      	ldr	r3, [pc, #16]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80047e6:	400b      	ands	r3, r1
 80047e8:	4901      	ldr	r1, [pc, #4]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	608b      	str	r3, [r1, #8]
 80047ee:	e00b      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80047f0:	40023800 	.word	0x40023800
 80047f4:	40007000 	.word	0x40007000
 80047f8:	0ffffcff 	.word	0x0ffffcff
 80047fc:	4baa      	ldr	r3, [pc, #680]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	4aa9      	ldr	r2, [pc, #676]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004802:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004806:	6093      	str	r3, [r2, #8]
 8004808:	4ba7      	ldr	r3, [pc, #668]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800480a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004814:	49a4      	ldr	r1, [pc, #656]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004816:	4313      	orrs	r3, r2
 8004818:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0310 	and.w	r3, r3, #16
 8004822:	2b00      	cmp	r3, #0
 8004824:	d010      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004826:	4ba0      	ldr	r3, [pc, #640]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004828:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800482c:	4a9e      	ldr	r2, [pc, #632]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800482e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004832:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004836:	4b9c      	ldr	r3, [pc, #624]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004838:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004840:	4999      	ldr	r1, [pc, #612]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004842:	4313      	orrs	r3, r2
 8004844:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00a      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004854:	4b94      	ldr	r3, [pc, #592]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004862:	4991      	ldr	r1, [pc, #580]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004864:	4313      	orrs	r3, r2
 8004866:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00a      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004876:	4b8c      	ldr	r3, [pc, #560]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800487c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004884:	4988      	ldr	r1, [pc, #544]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004886:	4313      	orrs	r3, r2
 8004888:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00a      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004898:	4b83      	ldr	r3, [pc, #524]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800489a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800489e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048a6:	4980      	ldr	r1, [pc, #512]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048ba:	4b7b      	ldr	r3, [pc, #492]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c8:	4977      	ldr	r1, [pc, #476]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00a      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048dc:	4b72      	ldr	r3, [pc, #456]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e2:	f023 0203 	bic.w	r2, r3, #3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ea:	496f      	ldr	r1, [pc, #444]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00a      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048fe:	4b6a      	ldr	r3, [pc, #424]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004904:	f023 020c 	bic.w	r2, r3, #12
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800490c:	4966      	ldr	r1, [pc, #408]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800490e:	4313      	orrs	r3, r2
 8004910:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491c:	2b00      	cmp	r3, #0
 800491e:	d00a      	beq.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004920:	4b61      	ldr	r3, [pc, #388]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004926:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800492e:	495e      	ldr	r1, [pc, #376]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004930:	4313      	orrs	r3, r2
 8004932:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00a      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004942:	4b59      	ldr	r3, [pc, #356]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004948:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004950:	4955      	ldr	r1, [pc, #340]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004952:	4313      	orrs	r3, r2
 8004954:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00a      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004964:	4b50      	ldr	r3, [pc, #320]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800496a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004972:	494d      	ldr	r1, [pc, #308]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004974:	4313      	orrs	r3, r2
 8004976:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00a      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004986:	4b48      	ldr	r3, [pc, #288]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800498c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004994:	4944      	ldr	r1, [pc, #272]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004996:	4313      	orrs	r3, r2
 8004998:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00a      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80049a8:	4b3f      	ldr	r3, [pc, #252]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b6:	493c      	ldr	r1, [pc, #240]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00a      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80049ca:	4b37      	ldr	r3, [pc, #220]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049d8:	4933      	ldr	r1, [pc, #204]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00a      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80049ec:	4b2e      	ldr	r3, [pc, #184]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049fa:	492b      	ldr	r1, [pc, #172]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d011      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004a0e:	4b26      	ldr	r3, [pc, #152]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a14:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a1c:	4922      	ldr	r1, [pc, #136]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a2c:	d101      	bne.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0308 	and.w	r3, r3, #8
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00a      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a4e:	4b16      	ldr	r3, [pc, #88]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a54:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a5c:	4912      	ldr	r1, [pc, #72]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00b      	beq.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a70:	4b0d      	ldr	r3, [pc, #52]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a76:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a80:	4909      	ldr	r1, [pc, #36]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d006      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 80d9 	beq.w	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a9c:	4b02      	ldr	r3, [pc, #8]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a01      	ldr	r2, [pc, #4]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004aa2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004aa6:	e001      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004aa8:	40023800 	.word	0x40023800
 8004aac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aae:	f7fd fe9d 	bl	80027ec <HAL_GetTick>
 8004ab2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ab4:	e008      	b.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ab6:	f7fd fe99 	bl	80027ec <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	2b64      	cmp	r3, #100	; 0x64
 8004ac2:	d901      	bls.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e194      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ac8:	4b6c      	ldr	r3, [pc, #432]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1f0      	bne.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0301 	and.w	r3, r3, #1
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d021      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d11d      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004ae8:	4b64      	ldr	r3, [pc, #400]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aee:	0c1b      	lsrs	r3, r3, #16
 8004af0:	f003 0303 	and.w	r3, r3, #3
 8004af4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004af6:	4b61      	ldr	r3, [pc, #388]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004afc:	0e1b      	lsrs	r3, r3, #24
 8004afe:	f003 030f 	and.w	r3, r3, #15
 8004b02:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	019a      	lsls	r2, r3, #6
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	041b      	lsls	r3, r3, #16
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	061b      	lsls	r3, r3, #24
 8004b14:	431a      	orrs	r2, r3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	071b      	lsls	r3, r3, #28
 8004b1c:	4957      	ldr	r1, [pc, #348]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d004      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b38:	d00a      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d02e      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b4e:	d129      	bne.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b50:	4b4a      	ldr	r3, [pc, #296]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b56:	0c1b      	lsrs	r3, r3, #16
 8004b58:	f003 0303 	and.w	r3, r3, #3
 8004b5c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b5e:	4b47      	ldr	r3, [pc, #284]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b64:	0f1b      	lsrs	r3, r3, #28
 8004b66:	f003 0307 	and.w	r3, r3, #7
 8004b6a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	019a      	lsls	r2, r3, #6
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	041b      	lsls	r3, r3, #16
 8004b76:	431a      	orrs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	061b      	lsls	r3, r3, #24
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	071b      	lsls	r3, r3, #28
 8004b84:	493d      	ldr	r1, [pc, #244]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b8c:	4b3b      	ldr	r3, [pc, #236]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b92:	f023 021f 	bic.w	r2, r3, #31
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	4937      	ldr	r1, [pc, #220]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d01d      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004bb0:	4b32      	ldr	r3, [pc, #200]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bb6:	0e1b      	lsrs	r3, r3, #24
 8004bb8:	f003 030f 	and.w	r3, r3, #15
 8004bbc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004bbe:	4b2f      	ldr	r3, [pc, #188]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bc4:	0f1b      	lsrs	r3, r3, #28
 8004bc6:	f003 0307 	and.w	r3, r3, #7
 8004bca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	019a      	lsls	r2, r3, #6
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	041b      	lsls	r3, r3, #16
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	061b      	lsls	r3, r3, #24
 8004bde:	431a      	orrs	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	071b      	lsls	r3, r3, #28
 8004be4:	4925      	ldr	r1, [pc, #148]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d011      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	019a      	lsls	r2, r3, #6
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	041b      	lsls	r3, r3, #16
 8004c04:	431a      	orrs	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	061b      	lsls	r3, r3, #24
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	071b      	lsls	r3, r3, #28
 8004c14:	4919      	ldr	r1, [pc, #100]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c1c:	4b17      	ldr	r3, [pc, #92]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a16      	ldr	r2, [pc, #88]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c28:	f7fd fde0 	bl	80027ec <HAL_GetTick>
 8004c2c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c2e:	e008      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c30:	f7fd fddc 	bl	80027ec <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b64      	cmp	r3, #100	; 0x64
 8004c3c:	d901      	bls.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e0d7      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c42:	4b0e      	ldr	r3, [pc, #56]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0f0      	beq.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	f040 80cd 	bne.w	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004c56:	4b09      	ldr	r3, [pc, #36]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a08      	ldr	r2, [pc, #32]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c62:	f7fd fdc3 	bl	80027ec <HAL_GetTick>
 8004c66:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c68:	e00a      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c6a:	f7fd fdbf 	bl	80027ec <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b64      	cmp	r3, #100	; 0x64
 8004c76:	d903      	bls.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e0ba      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004c7c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c80:	4b5e      	ldr	r3, [pc, #376]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c8c:	d0ed      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d003      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d009      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d02e      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d12a      	bne.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004cb6:	4b51      	ldr	r3, [pc, #324]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cbc:	0c1b      	lsrs	r3, r3, #16
 8004cbe:	f003 0303 	and.w	r3, r3, #3
 8004cc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004cc4:	4b4d      	ldr	r3, [pc, #308]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cca:	0f1b      	lsrs	r3, r3, #28
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	019a      	lsls	r2, r3, #6
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	041b      	lsls	r3, r3, #16
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	061b      	lsls	r3, r3, #24
 8004ce4:	431a      	orrs	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	071b      	lsls	r3, r3, #28
 8004cea:	4944      	ldr	r1, [pc, #272]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004cf2:	4b42      	ldr	r3, [pc, #264]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cf8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d00:	3b01      	subs	r3, #1
 8004d02:	021b      	lsls	r3, r3, #8
 8004d04:	493d      	ldr	r1, [pc, #244]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d022      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d20:	d11d      	bne.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d22:	4b36      	ldr	r3, [pc, #216]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d28:	0e1b      	lsrs	r3, r3, #24
 8004d2a:	f003 030f 	and.w	r3, r3, #15
 8004d2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d30:	4b32      	ldr	r3, [pc, #200]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d36:	0f1b      	lsrs	r3, r3, #28
 8004d38:	f003 0307 	and.w	r3, r3, #7
 8004d3c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	019a      	lsls	r2, r3, #6
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	041b      	lsls	r3, r3, #16
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	061b      	lsls	r3, r3, #24
 8004d50:	431a      	orrs	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	071b      	lsls	r3, r3, #28
 8004d56:	4929      	ldr	r1, [pc, #164]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0308 	and.w	r3, r3, #8
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d028      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d6a:	4b24      	ldr	r3, [pc, #144]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d70:	0e1b      	lsrs	r3, r3, #24
 8004d72:	f003 030f 	and.w	r3, r3, #15
 8004d76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d78:	4b20      	ldr	r3, [pc, #128]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7e:	0c1b      	lsrs	r3, r3, #16
 8004d80:	f003 0303 	and.w	r3, r3, #3
 8004d84:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	019a      	lsls	r2, r3, #6
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	041b      	lsls	r3, r3, #16
 8004d90:	431a      	orrs	r2, r3
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	061b      	lsls	r3, r3, #24
 8004d96:	431a      	orrs	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	69db      	ldr	r3, [r3, #28]
 8004d9c:	071b      	lsls	r3, r3, #28
 8004d9e:	4917      	ldr	r1, [pc, #92]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004da6:	4b15      	ldr	r3, [pc, #84]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db4:	4911      	ldr	r1, [pc, #68]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004dbc:	4b0f      	ldr	r3, [pc, #60]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a0e      	ldr	r2, [pc, #56]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dc8:	f7fd fd10 	bl	80027ec <HAL_GetTick>
 8004dcc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004dce:	e008      	b.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004dd0:	f7fd fd0c 	bl	80027ec <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b64      	cmp	r3, #100	; 0x64
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e007      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004de2:	4b06      	ldr	r3, [pc, #24]	; (8004dfc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dee:	d1ef      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3720      	adds	r7, #32
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	40023800 	.word	0x40023800

08004e00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b082      	sub	sp, #8
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e049      	b.n	8004ea6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d106      	bne.n	8004e2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7fd fa04 	bl	8002234 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2202      	movs	r2, #2
 8004e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3304      	adds	r3, #4
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	4610      	mov	r0, r2
 8004e40:	f000 fd26 	bl	8005890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3708      	adds	r7, #8
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
	...

08004eb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d001      	beq.n	8004ec8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e054      	b.n	8004f72 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2202      	movs	r2, #2
 8004ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68da      	ldr	r2, [r3, #12]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f042 0201 	orr.w	r2, r2, #1
 8004ede:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a26      	ldr	r2, [pc, #152]	; (8004f80 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d022      	beq.n	8004f30 <HAL_TIM_Base_Start_IT+0x80>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef2:	d01d      	beq.n	8004f30 <HAL_TIM_Base_Start_IT+0x80>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a22      	ldr	r2, [pc, #136]	; (8004f84 <HAL_TIM_Base_Start_IT+0xd4>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d018      	beq.n	8004f30 <HAL_TIM_Base_Start_IT+0x80>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a21      	ldr	r2, [pc, #132]	; (8004f88 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d013      	beq.n	8004f30 <HAL_TIM_Base_Start_IT+0x80>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a1f      	ldr	r2, [pc, #124]	; (8004f8c <HAL_TIM_Base_Start_IT+0xdc>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d00e      	beq.n	8004f30 <HAL_TIM_Base_Start_IT+0x80>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a1e      	ldr	r2, [pc, #120]	; (8004f90 <HAL_TIM_Base_Start_IT+0xe0>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d009      	beq.n	8004f30 <HAL_TIM_Base_Start_IT+0x80>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a1c      	ldr	r2, [pc, #112]	; (8004f94 <HAL_TIM_Base_Start_IT+0xe4>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d004      	beq.n	8004f30 <HAL_TIM_Base_Start_IT+0x80>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a1b      	ldr	r2, [pc, #108]	; (8004f98 <HAL_TIM_Base_Start_IT+0xe8>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d115      	bne.n	8004f5c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689a      	ldr	r2, [r3, #8]
 8004f36:	4b19      	ldr	r3, [pc, #100]	; (8004f9c <HAL_TIM_Base_Start_IT+0xec>)
 8004f38:	4013      	ands	r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2b06      	cmp	r3, #6
 8004f40:	d015      	beq.n	8004f6e <HAL_TIM_Base_Start_IT+0xbe>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f48:	d011      	beq.n	8004f6e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f042 0201 	orr.w	r2, r2, #1
 8004f58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f5a:	e008      	b.n	8004f6e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f042 0201 	orr.w	r2, r2, #1
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	e000      	b.n	8004f70 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	40010000 	.word	0x40010000
 8004f84:	40000400 	.word	0x40000400
 8004f88:	40000800 	.word	0x40000800
 8004f8c:	40000c00 	.word	0x40000c00
 8004f90:	40010400 	.word	0x40010400
 8004f94:	40014000 	.word	0x40014000
 8004f98:	40001800 	.word	0x40001800
 8004f9c:	00010007 	.word	0x00010007

08004fa0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e049      	b.n	8005046 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d106      	bne.n	8004fcc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f7fd f958 	bl	800227c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2202      	movs	r2, #2
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	3304      	adds	r3, #4
 8004fdc:	4619      	mov	r1, r3
 8004fde:	4610      	mov	r0, r2
 8004fe0:	f000 fc56 	bl	8005890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3708      	adds	r7, #8
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
	...

08005050 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d109      	bne.n	8005074 <HAL_TIM_PWM_Start+0x24>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b01      	cmp	r3, #1
 800506a:	bf14      	ite	ne
 800506c:	2301      	movne	r3, #1
 800506e:	2300      	moveq	r3, #0
 8005070:	b2db      	uxtb	r3, r3
 8005072:	e03c      	b.n	80050ee <HAL_TIM_PWM_Start+0x9e>
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	2b04      	cmp	r3, #4
 8005078:	d109      	bne.n	800508e <HAL_TIM_PWM_Start+0x3e>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b01      	cmp	r3, #1
 8005084:	bf14      	ite	ne
 8005086:	2301      	movne	r3, #1
 8005088:	2300      	moveq	r3, #0
 800508a:	b2db      	uxtb	r3, r3
 800508c:	e02f      	b.n	80050ee <HAL_TIM_PWM_Start+0x9e>
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2b08      	cmp	r3, #8
 8005092:	d109      	bne.n	80050a8 <HAL_TIM_PWM_Start+0x58>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b01      	cmp	r3, #1
 800509e:	bf14      	ite	ne
 80050a0:	2301      	movne	r3, #1
 80050a2:	2300      	moveq	r3, #0
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	e022      	b.n	80050ee <HAL_TIM_PWM_Start+0x9e>
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	2b0c      	cmp	r3, #12
 80050ac:	d109      	bne.n	80050c2 <HAL_TIM_PWM_Start+0x72>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	bf14      	ite	ne
 80050ba:	2301      	movne	r3, #1
 80050bc:	2300      	moveq	r3, #0
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	e015      	b.n	80050ee <HAL_TIM_PWM_Start+0x9e>
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2b10      	cmp	r3, #16
 80050c6:	d109      	bne.n	80050dc <HAL_TIM_PWM_Start+0x8c>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	bf14      	ite	ne
 80050d4:	2301      	movne	r3, #1
 80050d6:	2300      	moveq	r3, #0
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	e008      	b.n	80050ee <HAL_TIM_PWM_Start+0x9e>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	bf14      	ite	ne
 80050e8:	2301      	movne	r3, #1
 80050ea:	2300      	moveq	r3, #0
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d001      	beq.n	80050f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e092      	b.n	800521c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d104      	bne.n	8005106 <HAL_TIM_PWM_Start+0xb6>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005104:	e023      	b.n	800514e <HAL_TIM_PWM_Start+0xfe>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2b04      	cmp	r3, #4
 800510a:	d104      	bne.n	8005116 <HAL_TIM_PWM_Start+0xc6>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005114:	e01b      	b.n	800514e <HAL_TIM_PWM_Start+0xfe>
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2b08      	cmp	r3, #8
 800511a:	d104      	bne.n	8005126 <HAL_TIM_PWM_Start+0xd6>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2202      	movs	r2, #2
 8005120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005124:	e013      	b.n	800514e <HAL_TIM_PWM_Start+0xfe>
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b0c      	cmp	r3, #12
 800512a:	d104      	bne.n	8005136 <HAL_TIM_PWM_Start+0xe6>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005134:	e00b      	b.n	800514e <HAL_TIM_PWM_Start+0xfe>
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2b10      	cmp	r3, #16
 800513a:	d104      	bne.n	8005146 <HAL_TIM_PWM_Start+0xf6>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005144:	e003      	b.n	800514e <HAL_TIM_PWM_Start+0xfe>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2202      	movs	r2, #2
 800514a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2201      	movs	r2, #1
 8005154:	6839      	ldr	r1, [r7, #0]
 8005156:	4618      	mov	r0, r3
 8005158:	f000 ff32 	bl	8005fc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a30      	ldr	r2, [pc, #192]	; (8005224 <HAL_TIM_PWM_Start+0x1d4>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d004      	beq.n	8005170 <HAL_TIM_PWM_Start+0x120>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a2f      	ldr	r2, [pc, #188]	; (8005228 <HAL_TIM_PWM_Start+0x1d8>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d101      	bne.n	8005174 <HAL_TIM_PWM_Start+0x124>
 8005170:	2301      	movs	r3, #1
 8005172:	e000      	b.n	8005176 <HAL_TIM_PWM_Start+0x126>
 8005174:	2300      	movs	r3, #0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d007      	beq.n	800518a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005188:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a25      	ldr	r2, [pc, #148]	; (8005224 <HAL_TIM_PWM_Start+0x1d4>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d022      	beq.n	80051da <HAL_TIM_PWM_Start+0x18a>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800519c:	d01d      	beq.n	80051da <HAL_TIM_PWM_Start+0x18a>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a22      	ldr	r2, [pc, #136]	; (800522c <HAL_TIM_PWM_Start+0x1dc>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d018      	beq.n	80051da <HAL_TIM_PWM_Start+0x18a>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a20      	ldr	r2, [pc, #128]	; (8005230 <HAL_TIM_PWM_Start+0x1e0>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d013      	beq.n	80051da <HAL_TIM_PWM_Start+0x18a>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a1f      	ldr	r2, [pc, #124]	; (8005234 <HAL_TIM_PWM_Start+0x1e4>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d00e      	beq.n	80051da <HAL_TIM_PWM_Start+0x18a>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a19      	ldr	r2, [pc, #100]	; (8005228 <HAL_TIM_PWM_Start+0x1d8>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d009      	beq.n	80051da <HAL_TIM_PWM_Start+0x18a>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a1b      	ldr	r2, [pc, #108]	; (8005238 <HAL_TIM_PWM_Start+0x1e8>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d004      	beq.n	80051da <HAL_TIM_PWM_Start+0x18a>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a19      	ldr	r2, [pc, #100]	; (800523c <HAL_TIM_PWM_Start+0x1ec>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d115      	bne.n	8005206 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689a      	ldr	r2, [r3, #8]
 80051e0:	4b17      	ldr	r3, [pc, #92]	; (8005240 <HAL_TIM_PWM_Start+0x1f0>)
 80051e2:	4013      	ands	r3, r2
 80051e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2b06      	cmp	r3, #6
 80051ea:	d015      	beq.n	8005218 <HAL_TIM_PWM_Start+0x1c8>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051f2:	d011      	beq.n	8005218 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f042 0201 	orr.w	r2, r2, #1
 8005202:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005204:	e008      	b.n	8005218 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f042 0201 	orr.w	r2, r2, #1
 8005214:	601a      	str	r2, [r3, #0]
 8005216:	e000      	b.n	800521a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005218:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	40010000 	.word	0x40010000
 8005228:	40010400 	.word	0x40010400
 800522c:	40000400 	.word	0x40000400
 8005230:	40000800 	.word	0x40000800
 8005234:	40000c00 	.word	0x40000c00
 8005238:	40014000 	.word	0x40014000
 800523c:	40001800 	.word	0x40001800
 8005240:	00010007 	.word	0x00010007

08005244 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b02      	cmp	r3, #2
 8005258:	d122      	bne.n	80052a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	f003 0302 	and.w	r3, r3, #2
 8005264:	2b02      	cmp	r3, #2
 8005266:	d11b      	bne.n	80052a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f06f 0202 	mvn.w	r2, #2
 8005270:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	f003 0303 	and.w	r3, r3, #3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d003      	beq.n	800528e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 fae4 	bl	8005854 <HAL_TIM_IC_CaptureCallback>
 800528c:	e005      	b.n	800529a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 fad6 	bl	8005840 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 fae7 	bl	8005868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	f003 0304 	and.w	r3, r3, #4
 80052aa:	2b04      	cmp	r3, #4
 80052ac:	d122      	bne.n	80052f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	f003 0304 	and.w	r3, r3, #4
 80052b8:	2b04      	cmp	r3, #4
 80052ba:	d11b      	bne.n	80052f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f06f 0204 	mvn.w	r2, #4
 80052c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2202      	movs	r2, #2
 80052ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d003      	beq.n	80052e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 faba 	bl	8005854 <HAL_TIM_IC_CaptureCallback>
 80052e0:	e005      	b.n	80052ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 faac 	bl	8005840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 fabd 	bl	8005868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	f003 0308 	and.w	r3, r3, #8
 80052fe:	2b08      	cmp	r3, #8
 8005300:	d122      	bne.n	8005348 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f003 0308 	and.w	r3, r3, #8
 800530c:	2b08      	cmp	r3, #8
 800530e:	d11b      	bne.n	8005348 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f06f 0208 	mvn.w	r2, #8
 8005318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2204      	movs	r2, #4
 800531e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	f003 0303 	and.w	r3, r3, #3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d003      	beq.n	8005336 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 fa90 	bl	8005854 <HAL_TIM_IC_CaptureCallback>
 8005334:	e005      	b.n	8005342 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 fa82 	bl	8005840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 fa93 	bl	8005868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	f003 0310 	and.w	r3, r3, #16
 8005352:	2b10      	cmp	r3, #16
 8005354:	d122      	bne.n	800539c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	f003 0310 	and.w	r3, r3, #16
 8005360:	2b10      	cmp	r3, #16
 8005362:	d11b      	bne.n	800539c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f06f 0210 	mvn.w	r2, #16
 800536c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2208      	movs	r2, #8
 8005372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 fa66 	bl	8005854 <HAL_TIM_IC_CaptureCallback>
 8005388:	e005      	b.n	8005396 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 fa58 	bl	8005840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 fa69 	bl	8005868 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d10e      	bne.n	80053c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f003 0301 	and.w	r3, r3, #1
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d107      	bne.n	80053c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f06f 0201 	mvn.w	r2, #1
 80053c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7fc fdba 	bl	8001f3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d2:	2b80      	cmp	r3, #128	; 0x80
 80053d4:	d10e      	bne.n	80053f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e0:	2b80      	cmp	r3, #128	; 0x80
 80053e2:	d107      	bne.n	80053f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 fea4 	bl	800613c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005402:	d10e      	bne.n	8005422 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540e:	2b80      	cmp	r3, #128	; 0x80
 8005410:	d107      	bne.n	8005422 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800541a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 fe97 	bl	8006150 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542c:	2b40      	cmp	r3, #64	; 0x40
 800542e:	d10e      	bne.n	800544e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800543a:	2b40      	cmp	r3, #64	; 0x40
 800543c:	d107      	bne.n	800544e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 fa17 	bl	800587c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	f003 0320 	and.w	r3, r3, #32
 8005458:	2b20      	cmp	r3, #32
 800545a:	d10e      	bne.n	800547a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	f003 0320 	and.w	r3, r3, #32
 8005466:	2b20      	cmp	r3, #32
 8005468:	d107      	bne.n	800547a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f06f 0220 	mvn.w	r2, #32
 8005472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 fe57 	bl	8006128 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800547a:	bf00      	nop
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
	...

08005484 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005490:	2300      	movs	r3, #0
 8005492:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800549a:	2b01      	cmp	r3, #1
 800549c:	d101      	bne.n	80054a2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800549e:	2302      	movs	r3, #2
 80054a0:	e0ff      	b.n	80056a2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b14      	cmp	r3, #20
 80054ae:	f200 80f0 	bhi.w	8005692 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80054b2:	a201      	add	r2, pc, #4	; (adr r2, 80054b8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80054b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b8:	0800550d 	.word	0x0800550d
 80054bc:	08005693 	.word	0x08005693
 80054c0:	08005693 	.word	0x08005693
 80054c4:	08005693 	.word	0x08005693
 80054c8:	0800554d 	.word	0x0800554d
 80054cc:	08005693 	.word	0x08005693
 80054d0:	08005693 	.word	0x08005693
 80054d4:	08005693 	.word	0x08005693
 80054d8:	0800558f 	.word	0x0800558f
 80054dc:	08005693 	.word	0x08005693
 80054e0:	08005693 	.word	0x08005693
 80054e4:	08005693 	.word	0x08005693
 80054e8:	080055cf 	.word	0x080055cf
 80054ec:	08005693 	.word	0x08005693
 80054f0:	08005693 	.word	0x08005693
 80054f4:	08005693 	.word	0x08005693
 80054f8:	08005611 	.word	0x08005611
 80054fc:	08005693 	.word	0x08005693
 8005500:	08005693 	.word	0x08005693
 8005504:	08005693 	.word	0x08005693
 8005508:	08005651 	.word	0x08005651
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68b9      	ldr	r1, [r7, #8]
 8005512:	4618      	mov	r0, r3
 8005514:	f000 fa5c 	bl	80059d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	699a      	ldr	r2, [r3, #24]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f042 0208 	orr.w	r2, r2, #8
 8005526:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	699a      	ldr	r2, [r3, #24]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 0204 	bic.w	r2, r2, #4
 8005536:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6999      	ldr	r1, [r3, #24]
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	691a      	ldr	r2, [r3, #16]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	430a      	orrs	r2, r1
 8005548:	619a      	str	r2, [r3, #24]
      break;
 800554a:	e0a5      	b.n	8005698 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68b9      	ldr	r1, [r7, #8]
 8005552:	4618      	mov	r0, r3
 8005554:	f000 faae 	bl	8005ab4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	699a      	ldr	r2, [r3, #24]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005566:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699a      	ldr	r2, [r3, #24]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005576:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6999      	ldr	r1, [r3, #24]
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	021a      	lsls	r2, r3, #8
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	430a      	orrs	r2, r1
 800558a:	619a      	str	r2, [r3, #24]
      break;
 800558c:	e084      	b.n	8005698 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68b9      	ldr	r1, [r7, #8]
 8005594:	4618      	mov	r0, r3
 8005596:	f000 fb05 	bl	8005ba4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	69da      	ldr	r2, [r3, #28]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f042 0208 	orr.w	r2, r2, #8
 80055a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	69da      	ldr	r2, [r3, #28]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f022 0204 	bic.w	r2, r2, #4
 80055b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69d9      	ldr	r1, [r3, #28]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	691a      	ldr	r2, [r3, #16]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	61da      	str	r2, [r3, #28]
      break;
 80055cc:	e064      	b.n	8005698 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68b9      	ldr	r1, [r7, #8]
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 fb5b 	bl	8005c90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	69da      	ldr	r2, [r3, #28]
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	69da      	ldr	r2, [r3, #28]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	69d9      	ldr	r1, [r3, #28]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	021a      	lsls	r2, r3, #8
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	430a      	orrs	r2, r1
 800560c:	61da      	str	r2, [r3, #28]
      break;
 800560e:	e043      	b.n	8005698 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68b9      	ldr	r1, [r7, #8]
 8005616:	4618      	mov	r0, r3
 8005618:	f000 fb92 	bl	8005d40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f042 0208 	orr.w	r2, r2, #8
 800562a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f022 0204 	bic.w	r2, r2, #4
 800563a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	691a      	ldr	r2, [r3, #16]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	430a      	orrs	r2, r1
 800564c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800564e:	e023      	b.n	8005698 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68b9      	ldr	r1, [r7, #8]
 8005656:	4618      	mov	r0, r3
 8005658:	f000 fbc4 	bl	8005de4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800566a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800567a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	021a      	lsls	r2, r3, #8
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	430a      	orrs	r2, r1
 800568e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005690:	e002      	b.n	8005698 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	75fb      	strb	r3, [r7, #23]
      break;
 8005696:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3718      	adds	r7, #24
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop

080056ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056b6:	2300      	movs	r3, #0
 80056b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d101      	bne.n	80056c8 <HAL_TIM_ConfigClockSource+0x1c>
 80056c4:	2302      	movs	r3, #2
 80056c6:	e0b4      	b.n	8005832 <HAL_TIM_ConfigClockSource+0x186>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2202      	movs	r2, #2
 80056d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056e0:	68ba      	ldr	r2, [r7, #8]
 80056e2:	4b56      	ldr	r3, [pc, #344]	; (800583c <HAL_TIM_ConfigClockSource+0x190>)
 80056e4:	4013      	ands	r3, r2
 80056e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68ba      	ldr	r2, [r7, #8]
 80056f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005700:	d03e      	beq.n	8005780 <HAL_TIM_ConfigClockSource+0xd4>
 8005702:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005706:	f200 8087 	bhi.w	8005818 <HAL_TIM_ConfigClockSource+0x16c>
 800570a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800570e:	f000 8086 	beq.w	800581e <HAL_TIM_ConfigClockSource+0x172>
 8005712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005716:	d87f      	bhi.n	8005818 <HAL_TIM_ConfigClockSource+0x16c>
 8005718:	2b70      	cmp	r3, #112	; 0x70
 800571a:	d01a      	beq.n	8005752 <HAL_TIM_ConfigClockSource+0xa6>
 800571c:	2b70      	cmp	r3, #112	; 0x70
 800571e:	d87b      	bhi.n	8005818 <HAL_TIM_ConfigClockSource+0x16c>
 8005720:	2b60      	cmp	r3, #96	; 0x60
 8005722:	d050      	beq.n	80057c6 <HAL_TIM_ConfigClockSource+0x11a>
 8005724:	2b60      	cmp	r3, #96	; 0x60
 8005726:	d877      	bhi.n	8005818 <HAL_TIM_ConfigClockSource+0x16c>
 8005728:	2b50      	cmp	r3, #80	; 0x50
 800572a:	d03c      	beq.n	80057a6 <HAL_TIM_ConfigClockSource+0xfa>
 800572c:	2b50      	cmp	r3, #80	; 0x50
 800572e:	d873      	bhi.n	8005818 <HAL_TIM_ConfigClockSource+0x16c>
 8005730:	2b40      	cmp	r3, #64	; 0x40
 8005732:	d058      	beq.n	80057e6 <HAL_TIM_ConfigClockSource+0x13a>
 8005734:	2b40      	cmp	r3, #64	; 0x40
 8005736:	d86f      	bhi.n	8005818 <HAL_TIM_ConfigClockSource+0x16c>
 8005738:	2b30      	cmp	r3, #48	; 0x30
 800573a:	d064      	beq.n	8005806 <HAL_TIM_ConfigClockSource+0x15a>
 800573c:	2b30      	cmp	r3, #48	; 0x30
 800573e:	d86b      	bhi.n	8005818 <HAL_TIM_ConfigClockSource+0x16c>
 8005740:	2b20      	cmp	r3, #32
 8005742:	d060      	beq.n	8005806 <HAL_TIM_ConfigClockSource+0x15a>
 8005744:	2b20      	cmp	r3, #32
 8005746:	d867      	bhi.n	8005818 <HAL_TIM_ConfigClockSource+0x16c>
 8005748:	2b00      	cmp	r3, #0
 800574a:	d05c      	beq.n	8005806 <HAL_TIM_ConfigClockSource+0x15a>
 800574c:	2b10      	cmp	r3, #16
 800574e:	d05a      	beq.n	8005806 <HAL_TIM_ConfigClockSource+0x15a>
 8005750:	e062      	b.n	8005818 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6818      	ldr	r0, [r3, #0]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	6899      	ldr	r1, [r3, #8]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	f000 fc0d 	bl	8005f80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005774:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	609a      	str	r2, [r3, #8]
      break;
 800577e:	e04f      	b.n	8005820 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6818      	ldr	r0, [r3, #0]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	6899      	ldr	r1, [r3, #8]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	685a      	ldr	r2, [r3, #4]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	f000 fbf6 	bl	8005f80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	689a      	ldr	r2, [r3, #8]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057a2:	609a      	str	r2, [r3, #8]
      break;
 80057a4:	e03c      	b.n	8005820 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6818      	ldr	r0, [r3, #0]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	6859      	ldr	r1, [r3, #4]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	461a      	mov	r2, r3
 80057b4:	f000 fb6a 	bl	8005e8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2150      	movs	r1, #80	; 0x50
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 fbc3 	bl	8005f4a <TIM_ITRx_SetConfig>
      break;
 80057c4:	e02c      	b.n	8005820 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6818      	ldr	r0, [r3, #0]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	6859      	ldr	r1, [r3, #4]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	461a      	mov	r2, r3
 80057d4:	f000 fb89 	bl	8005eea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2160      	movs	r1, #96	; 0x60
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 fbb3 	bl	8005f4a <TIM_ITRx_SetConfig>
      break;
 80057e4:	e01c      	b.n	8005820 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6818      	ldr	r0, [r3, #0]
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	6859      	ldr	r1, [r3, #4]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	461a      	mov	r2, r3
 80057f4:	f000 fb4a 	bl	8005e8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2140      	movs	r1, #64	; 0x40
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 fba3 	bl	8005f4a <TIM_ITRx_SetConfig>
      break;
 8005804:	e00c      	b.n	8005820 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4619      	mov	r1, r3
 8005810:	4610      	mov	r0, r2
 8005812:	f000 fb9a 	bl	8005f4a <TIM_ITRx_SetConfig>
      break;
 8005816:	e003      	b.n	8005820 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	73fb      	strb	r3, [r7, #15]
      break;
 800581c:	e000      	b.n	8005820 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800581e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005830:	7bfb      	ldrb	r3, [r7, #15]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	fffeff88 	.word	0xfffeff88

08005840 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005870:	bf00      	nop
 8005872:	370c      	adds	r7, #12
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a40      	ldr	r2, [pc, #256]	; (80059a4 <TIM_Base_SetConfig+0x114>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d013      	beq.n	80058d0 <TIM_Base_SetConfig+0x40>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ae:	d00f      	beq.n	80058d0 <TIM_Base_SetConfig+0x40>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a3d      	ldr	r2, [pc, #244]	; (80059a8 <TIM_Base_SetConfig+0x118>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d00b      	beq.n	80058d0 <TIM_Base_SetConfig+0x40>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a3c      	ldr	r2, [pc, #240]	; (80059ac <TIM_Base_SetConfig+0x11c>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d007      	beq.n	80058d0 <TIM_Base_SetConfig+0x40>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a3b      	ldr	r2, [pc, #236]	; (80059b0 <TIM_Base_SetConfig+0x120>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d003      	beq.n	80058d0 <TIM_Base_SetConfig+0x40>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a3a      	ldr	r2, [pc, #232]	; (80059b4 <TIM_Base_SetConfig+0x124>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d108      	bne.n	80058e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	4313      	orrs	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a2f      	ldr	r2, [pc, #188]	; (80059a4 <TIM_Base_SetConfig+0x114>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d02b      	beq.n	8005942 <TIM_Base_SetConfig+0xb2>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058f0:	d027      	beq.n	8005942 <TIM_Base_SetConfig+0xb2>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a2c      	ldr	r2, [pc, #176]	; (80059a8 <TIM_Base_SetConfig+0x118>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d023      	beq.n	8005942 <TIM_Base_SetConfig+0xb2>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a2b      	ldr	r2, [pc, #172]	; (80059ac <TIM_Base_SetConfig+0x11c>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d01f      	beq.n	8005942 <TIM_Base_SetConfig+0xb2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a2a      	ldr	r2, [pc, #168]	; (80059b0 <TIM_Base_SetConfig+0x120>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d01b      	beq.n	8005942 <TIM_Base_SetConfig+0xb2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a29      	ldr	r2, [pc, #164]	; (80059b4 <TIM_Base_SetConfig+0x124>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d017      	beq.n	8005942 <TIM_Base_SetConfig+0xb2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a28      	ldr	r2, [pc, #160]	; (80059b8 <TIM_Base_SetConfig+0x128>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d013      	beq.n	8005942 <TIM_Base_SetConfig+0xb2>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a27      	ldr	r2, [pc, #156]	; (80059bc <TIM_Base_SetConfig+0x12c>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d00f      	beq.n	8005942 <TIM_Base_SetConfig+0xb2>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a26      	ldr	r2, [pc, #152]	; (80059c0 <TIM_Base_SetConfig+0x130>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d00b      	beq.n	8005942 <TIM_Base_SetConfig+0xb2>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a25      	ldr	r2, [pc, #148]	; (80059c4 <TIM_Base_SetConfig+0x134>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d007      	beq.n	8005942 <TIM_Base_SetConfig+0xb2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a24      	ldr	r2, [pc, #144]	; (80059c8 <TIM_Base_SetConfig+0x138>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d003      	beq.n	8005942 <TIM_Base_SetConfig+0xb2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a23      	ldr	r2, [pc, #140]	; (80059cc <TIM_Base_SetConfig+0x13c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d108      	bne.n	8005954 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005948:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	4313      	orrs	r3, r2
 8005952:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	4313      	orrs	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	689a      	ldr	r2, [r3, #8]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a0a      	ldr	r2, [pc, #40]	; (80059a4 <TIM_Base_SetConfig+0x114>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d003      	beq.n	8005988 <TIM_Base_SetConfig+0xf8>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a0c      	ldr	r2, [pc, #48]	; (80059b4 <TIM_Base_SetConfig+0x124>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d103      	bne.n	8005990 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	691a      	ldr	r2, [r3, #16]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	615a      	str	r2, [r3, #20]
}
 8005996:	bf00      	nop
 8005998:	3714      	adds	r7, #20
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	40010000 	.word	0x40010000
 80059a8:	40000400 	.word	0x40000400
 80059ac:	40000800 	.word	0x40000800
 80059b0:	40000c00 	.word	0x40000c00
 80059b4:	40010400 	.word	0x40010400
 80059b8:	40014000 	.word	0x40014000
 80059bc:	40014400 	.word	0x40014400
 80059c0:	40014800 	.word	0x40014800
 80059c4:	40001800 	.word	0x40001800
 80059c8:	40001c00 	.word	0x40001c00
 80059cc:	40002000 	.word	0x40002000

080059d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b087      	sub	sp, #28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	f023 0201 	bic.w	r2, r3, #1
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	4b2b      	ldr	r3, [pc, #172]	; (8005aa8 <TIM_OC1_SetConfig+0xd8>)
 80059fc:	4013      	ands	r3, r2
 80059fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f023 0303 	bic.w	r3, r3, #3
 8005a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	f023 0302 	bic.w	r3, r3, #2
 8005a18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a21      	ldr	r2, [pc, #132]	; (8005aac <TIM_OC1_SetConfig+0xdc>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d003      	beq.n	8005a34 <TIM_OC1_SetConfig+0x64>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a20      	ldr	r2, [pc, #128]	; (8005ab0 <TIM_OC1_SetConfig+0xe0>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d10c      	bne.n	8005a4e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f023 0308 	bic.w	r3, r3, #8
 8005a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f023 0304 	bic.w	r3, r3, #4
 8005a4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a16      	ldr	r2, [pc, #88]	; (8005aac <TIM_OC1_SetConfig+0xdc>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d003      	beq.n	8005a5e <TIM_OC1_SetConfig+0x8e>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a15      	ldr	r2, [pc, #84]	; (8005ab0 <TIM_OC1_SetConfig+0xe0>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d111      	bne.n	8005a82 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	621a      	str	r2, [r3, #32]
}
 8005a9c:	bf00      	nop
 8005a9e:	371c      	adds	r7, #28
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr
 8005aa8:	fffeff8f 	.word	0xfffeff8f
 8005aac:	40010000 	.word	0x40010000
 8005ab0:	40010400 	.word	0x40010400

08005ab4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b087      	sub	sp, #28
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	f023 0210 	bic.w	r2, r3, #16
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	4b2e      	ldr	r3, [pc, #184]	; (8005b98 <TIM_OC2_SetConfig+0xe4>)
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	021b      	lsls	r3, r3, #8
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	f023 0320 	bic.w	r3, r3, #32
 8005afe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	011b      	lsls	r3, r3, #4
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a23      	ldr	r2, [pc, #140]	; (8005b9c <TIM_OC2_SetConfig+0xe8>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d003      	beq.n	8005b1c <TIM_OC2_SetConfig+0x68>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a22      	ldr	r2, [pc, #136]	; (8005ba0 <TIM_OC2_SetConfig+0xec>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d10d      	bne.n	8005b38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	011b      	lsls	r3, r3, #4
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a18      	ldr	r2, [pc, #96]	; (8005b9c <TIM_OC2_SetConfig+0xe8>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d003      	beq.n	8005b48 <TIM_OC2_SetConfig+0x94>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a17      	ldr	r2, [pc, #92]	; (8005ba0 <TIM_OC2_SetConfig+0xec>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d113      	bne.n	8005b70 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	695b      	ldr	r3, [r3, #20]
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	693a      	ldr	r2, [r7, #16]
 8005b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	685a      	ldr	r2, [r3, #4]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	621a      	str	r2, [r3, #32]
}
 8005b8a:	bf00      	nop
 8005b8c:	371c      	adds	r7, #28
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	feff8fff 	.word	0xfeff8fff
 8005b9c:	40010000 	.word	0x40010000
 8005ba0:	40010400 	.word	0x40010400

08005ba4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	69db      	ldr	r3, [r3, #28]
 8005bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	4b2d      	ldr	r3, [pc, #180]	; (8005c84 <TIM_OC3_SetConfig+0xe0>)
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f023 0303 	bic.w	r3, r3, #3
 8005bda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	021b      	lsls	r3, r3, #8
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a22      	ldr	r2, [pc, #136]	; (8005c88 <TIM_OC3_SetConfig+0xe4>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d003      	beq.n	8005c0a <TIM_OC3_SetConfig+0x66>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a21      	ldr	r2, [pc, #132]	; (8005c8c <TIM_OC3_SetConfig+0xe8>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d10d      	bne.n	8005c26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	021b      	lsls	r3, r3, #8
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a17      	ldr	r2, [pc, #92]	; (8005c88 <TIM_OC3_SetConfig+0xe4>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d003      	beq.n	8005c36 <TIM_OC3_SetConfig+0x92>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a16      	ldr	r2, [pc, #88]	; (8005c8c <TIM_OC3_SetConfig+0xe8>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d113      	bne.n	8005c5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	011b      	lsls	r3, r3, #4
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	011b      	lsls	r3, r3, #4
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	621a      	str	r2, [r3, #32]
}
 8005c78:	bf00      	nop
 8005c7a:	371c      	adds	r7, #28
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr
 8005c84:	fffeff8f 	.word	0xfffeff8f
 8005c88:	40010000 	.word	0x40010000
 8005c8c:	40010400 	.word	0x40010400

08005c90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b087      	sub	sp, #28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	4b1e      	ldr	r3, [pc, #120]	; (8005d34 <TIM_OC4_SetConfig+0xa4>)
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	021b      	lsls	r3, r3, #8
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	031b      	lsls	r3, r3, #12
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a13      	ldr	r2, [pc, #76]	; (8005d38 <TIM_OC4_SetConfig+0xa8>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d003      	beq.n	8005cf8 <TIM_OC4_SetConfig+0x68>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a12      	ldr	r2, [pc, #72]	; (8005d3c <TIM_OC4_SetConfig+0xac>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d109      	bne.n	8005d0c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	695b      	ldr	r3, [r3, #20]
 8005d04:	019b      	lsls	r3, r3, #6
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	693a      	ldr	r2, [r7, #16]
 8005d24:	621a      	str	r2, [r3, #32]
}
 8005d26:	bf00      	nop
 8005d28:	371c      	adds	r7, #28
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	feff8fff 	.word	0xfeff8fff
 8005d38:	40010000 	.word	0x40010000
 8005d3c:	40010400 	.word	0x40010400

08005d40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b087      	sub	sp, #28
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a1b      	ldr	r3, [r3, #32]
 8005d5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	4b1b      	ldr	r3, [pc, #108]	; (8005dd8 <TIM_OC5_SetConfig+0x98>)
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005d80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	041b      	lsls	r3, r3, #16
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a12      	ldr	r2, [pc, #72]	; (8005ddc <TIM_OC5_SetConfig+0x9c>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d003      	beq.n	8005d9e <TIM_OC5_SetConfig+0x5e>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a11      	ldr	r2, [pc, #68]	; (8005de0 <TIM_OC5_SetConfig+0xa0>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d109      	bne.n	8005db2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005da4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	021b      	lsls	r3, r3, #8
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	685a      	ldr	r2, [r3, #4]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	621a      	str	r2, [r3, #32]
}
 8005dcc:	bf00      	nop
 8005dce:	371c      	adds	r7, #28
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr
 8005dd8:	fffeff8f 	.word	0xfffeff8f
 8005ddc:	40010000 	.word	0x40010000
 8005de0:	40010400 	.word	0x40010400

08005de4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b087      	sub	sp, #28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	4b1c      	ldr	r3, [pc, #112]	; (8005e80 <TIM_OC6_SetConfig+0x9c>)
 8005e10:	4013      	ands	r3, r2
 8005e12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	021b      	lsls	r3, r3, #8
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	051b      	lsls	r3, r3, #20
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a13      	ldr	r2, [pc, #76]	; (8005e84 <TIM_OC6_SetConfig+0xa0>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d003      	beq.n	8005e44 <TIM_OC6_SetConfig+0x60>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a12      	ldr	r2, [pc, #72]	; (8005e88 <TIM_OC6_SetConfig+0xa4>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d109      	bne.n	8005e58 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	029b      	lsls	r3, r3, #10
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	685a      	ldr	r2, [r3, #4]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	621a      	str	r2, [r3, #32]
}
 8005e72:	bf00      	nop
 8005e74:	371c      	adds	r7, #28
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	feff8fff 	.word	0xfeff8fff
 8005e84:	40010000 	.word	0x40010000
 8005e88:	40010400 	.word	0x40010400

08005e8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b087      	sub	sp, #28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6a1b      	ldr	r3, [r3, #32]
 8005e9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	f023 0201 	bic.w	r2, r3, #1
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005eb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	011b      	lsls	r3, r3, #4
 8005ebc:	693a      	ldr	r2, [r7, #16]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f023 030a 	bic.w	r3, r3, #10
 8005ec8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	621a      	str	r2, [r3, #32]
}
 8005ede:	bf00      	nop
 8005ee0:	371c      	adds	r7, #28
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr

08005eea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005eea:	b480      	push	{r7}
 8005eec:	b087      	sub	sp, #28
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	60f8      	str	r0, [r7, #12]
 8005ef2:	60b9      	str	r1, [r7, #8]
 8005ef4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	f023 0210 	bic.w	r2, r3, #16
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	031b      	lsls	r3, r3, #12
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	011b      	lsls	r3, r3, #4
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	621a      	str	r2, [r3, #32]
}
 8005f3e:	bf00      	nop
 8005f40:	371c      	adds	r7, #28
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b085      	sub	sp, #20
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
 8005f52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f62:	683a      	ldr	r2, [r7, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	f043 0307 	orr.w	r3, r3, #7
 8005f6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	609a      	str	r2, [r3, #8]
}
 8005f74:	bf00      	nop
 8005f76:	3714      	adds	r7, #20
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b087      	sub	sp, #28
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
 8005f8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	021a      	lsls	r2, r3, #8
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	609a      	str	r2, [r3, #8]
}
 8005fb4:	bf00      	nop
 8005fb6:	371c      	adds	r7, #28
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	f003 031f 	and.w	r3, r3, #31
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6a1a      	ldr	r2, [r3, #32]
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	43db      	mvns	r3, r3
 8005fe2:	401a      	ands	r2, r3
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6a1a      	ldr	r2, [r3, #32]
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	f003 031f 	and.w	r3, r3, #31
 8005ff2:	6879      	ldr	r1, [r7, #4]
 8005ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ff8:	431a      	orrs	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	621a      	str	r2, [r3, #32]
}
 8005ffe:	bf00      	nop
 8006000:	371c      	adds	r7, #28
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
	...

0800600c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800601c:	2b01      	cmp	r3, #1
 800601e:	d101      	bne.n	8006024 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006020:	2302      	movs	r3, #2
 8006022:	e06d      	b.n	8006100 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2202      	movs	r2, #2
 8006030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a30      	ldr	r2, [pc, #192]	; (800610c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d004      	beq.n	8006058 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a2f      	ldr	r2, [pc, #188]	; (8006110 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d108      	bne.n	800606a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800605e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	4313      	orrs	r3, r2
 8006068:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006070:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	4313      	orrs	r3, r2
 800607a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a20      	ldr	r2, [pc, #128]	; (800610c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d022      	beq.n	80060d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006096:	d01d      	beq.n	80060d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a1d      	ldr	r2, [pc, #116]	; (8006114 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d018      	beq.n	80060d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a1c      	ldr	r2, [pc, #112]	; (8006118 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d013      	beq.n	80060d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a1a      	ldr	r2, [pc, #104]	; (800611c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d00e      	beq.n	80060d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a15      	ldr	r2, [pc, #84]	; (8006110 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d009      	beq.n	80060d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a16      	ldr	r2, [pc, #88]	; (8006120 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d004      	beq.n	80060d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a15      	ldr	r2, [pc, #84]	; (8006124 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d10c      	bne.n	80060ee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68ba      	ldr	r2, [r7, #8]
 80060ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3714      	adds	r7, #20
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr
 800610c:	40010000 	.word	0x40010000
 8006110:	40010400 	.word	0x40010400
 8006114:	40000400 	.word	0x40000400
 8006118:	40000800 	.word	0x40000800
 800611c:	40000c00 	.word	0x40000c00
 8006120:	40014000 	.word	0x40014000
 8006124:	40001800 	.word	0x40001800

08006128 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d101      	bne.n	8006176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e040      	b.n	80061f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800617a:	2b00      	cmp	r3, #0
 800617c:	d106      	bne.n	800618c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7fc f8d0 	bl	800232c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2224      	movs	r2, #36	; 0x24
 8006190:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f022 0201 	bic.w	r2, r2, #1
 80061a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f82c 	bl	8006200 <UART_SetConfig>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d101      	bne.n	80061b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e022      	b.n	80061f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d002      	beq.n	80061c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 fa84 	bl	80066c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	685a      	ldr	r2, [r3, #4]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	689a      	ldr	r2, [r3, #8]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f042 0201 	orr.w	r2, r2, #1
 80061ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 fb0b 	bl	800680c <UART_CheckIdleState>
 80061f6:	4603      	mov	r3, r0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3708      	adds	r7, #8
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b088      	sub	sp, #32
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006208:	2300      	movs	r3, #0
 800620a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	689a      	ldr	r2, [r3, #8]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	431a      	orrs	r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	431a      	orrs	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	69db      	ldr	r3, [r3, #28]
 8006220:	4313      	orrs	r3, r2
 8006222:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	4ba6      	ldr	r3, [pc, #664]	; (80064c4 <UART_SetConfig+0x2c4>)
 800622c:	4013      	ands	r3, r2
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	6812      	ldr	r2, [r2, #0]
 8006232:	6979      	ldr	r1, [r7, #20]
 8006234:	430b      	orrs	r3, r1
 8006236:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68da      	ldr	r2, [r3, #12]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	4313      	orrs	r3, r2
 800625c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	430a      	orrs	r2, r1
 8006270:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a94      	ldr	r2, [pc, #592]	; (80064c8 <UART_SetConfig+0x2c8>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d120      	bne.n	80062be <UART_SetConfig+0xbe>
 800627c:	4b93      	ldr	r3, [pc, #588]	; (80064cc <UART_SetConfig+0x2cc>)
 800627e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006282:	f003 0303 	and.w	r3, r3, #3
 8006286:	2b03      	cmp	r3, #3
 8006288:	d816      	bhi.n	80062b8 <UART_SetConfig+0xb8>
 800628a:	a201      	add	r2, pc, #4	; (adr r2, 8006290 <UART_SetConfig+0x90>)
 800628c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006290:	080062a1 	.word	0x080062a1
 8006294:	080062ad 	.word	0x080062ad
 8006298:	080062a7 	.word	0x080062a7
 800629c:	080062b3 	.word	0x080062b3
 80062a0:	2301      	movs	r3, #1
 80062a2:	77fb      	strb	r3, [r7, #31]
 80062a4:	e150      	b.n	8006548 <UART_SetConfig+0x348>
 80062a6:	2302      	movs	r3, #2
 80062a8:	77fb      	strb	r3, [r7, #31]
 80062aa:	e14d      	b.n	8006548 <UART_SetConfig+0x348>
 80062ac:	2304      	movs	r3, #4
 80062ae:	77fb      	strb	r3, [r7, #31]
 80062b0:	e14a      	b.n	8006548 <UART_SetConfig+0x348>
 80062b2:	2308      	movs	r3, #8
 80062b4:	77fb      	strb	r3, [r7, #31]
 80062b6:	e147      	b.n	8006548 <UART_SetConfig+0x348>
 80062b8:	2310      	movs	r3, #16
 80062ba:	77fb      	strb	r3, [r7, #31]
 80062bc:	e144      	b.n	8006548 <UART_SetConfig+0x348>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a83      	ldr	r2, [pc, #524]	; (80064d0 <UART_SetConfig+0x2d0>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d132      	bne.n	800632e <UART_SetConfig+0x12e>
 80062c8:	4b80      	ldr	r3, [pc, #512]	; (80064cc <UART_SetConfig+0x2cc>)
 80062ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ce:	f003 030c 	and.w	r3, r3, #12
 80062d2:	2b0c      	cmp	r3, #12
 80062d4:	d828      	bhi.n	8006328 <UART_SetConfig+0x128>
 80062d6:	a201      	add	r2, pc, #4	; (adr r2, 80062dc <UART_SetConfig+0xdc>)
 80062d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062dc:	08006311 	.word	0x08006311
 80062e0:	08006329 	.word	0x08006329
 80062e4:	08006329 	.word	0x08006329
 80062e8:	08006329 	.word	0x08006329
 80062ec:	0800631d 	.word	0x0800631d
 80062f0:	08006329 	.word	0x08006329
 80062f4:	08006329 	.word	0x08006329
 80062f8:	08006329 	.word	0x08006329
 80062fc:	08006317 	.word	0x08006317
 8006300:	08006329 	.word	0x08006329
 8006304:	08006329 	.word	0x08006329
 8006308:	08006329 	.word	0x08006329
 800630c:	08006323 	.word	0x08006323
 8006310:	2300      	movs	r3, #0
 8006312:	77fb      	strb	r3, [r7, #31]
 8006314:	e118      	b.n	8006548 <UART_SetConfig+0x348>
 8006316:	2302      	movs	r3, #2
 8006318:	77fb      	strb	r3, [r7, #31]
 800631a:	e115      	b.n	8006548 <UART_SetConfig+0x348>
 800631c:	2304      	movs	r3, #4
 800631e:	77fb      	strb	r3, [r7, #31]
 8006320:	e112      	b.n	8006548 <UART_SetConfig+0x348>
 8006322:	2308      	movs	r3, #8
 8006324:	77fb      	strb	r3, [r7, #31]
 8006326:	e10f      	b.n	8006548 <UART_SetConfig+0x348>
 8006328:	2310      	movs	r3, #16
 800632a:	77fb      	strb	r3, [r7, #31]
 800632c:	e10c      	b.n	8006548 <UART_SetConfig+0x348>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a68      	ldr	r2, [pc, #416]	; (80064d4 <UART_SetConfig+0x2d4>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d120      	bne.n	800637a <UART_SetConfig+0x17a>
 8006338:	4b64      	ldr	r3, [pc, #400]	; (80064cc <UART_SetConfig+0x2cc>)
 800633a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800633e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006342:	2b30      	cmp	r3, #48	; 0x30
 8006344:	d013      	beq.n	800636e <UART_SetConfig+0x16e>
 8006346:	2b30      	cmp	r3, #48	; 0x30
 8006348:	d814      	bhi.n	8006374 <UART_SetConfig+0x174>
 800634a:	2b20      	cmp	r3, #32
 800634c:	d009      	beq.n	8006362 <UART_SetConfig+0x162>
 800634e:	2b20      	cmp	r3, #32
 8006350:	d810      	bhi.n	8006374 <UART_SetConfig+0x174>
 8006352:	2b00      	cmp	r3, #0
 8006354:	d002      	beq.n	800635c <UART_SetConfig+0x15c>
 8006356:	2b10      	cmp	r3, #16
 8006358:	d006      	beq.n	8006368 <UART_SetConfig+0x168>
 800635a:	e00b      	b.n	8006374 <UART_SetConfig+0x174>
 800635c:	2300      	movs	r3, #0
 800635e:	77fb      	strb	r3, [r7, #31]
 8006360:	e0f2      	b.n	8006548 <UART_SetConfig+0x348>
 8006362:	2302      	movs	r3, #2
 8006364:	77fb      	strb	r3, [r7, #31]
 8006366:	e0ef      	b.n	8006548 <UART_SetConfig+0x348>
 8006368:	2304      	movs	r3, #4
 800636a:	77fb      	strb	r3, [r7, #31]
 800636c:	e0ec      	b.n	8006548 <UART_SetConfig+0x348>
 800636e:	2308      	movs	r3, #8
 8006370:	77fb      	strb	r3, [r7, #31]
 8006372:	e0e9      	b.n	8006548 <UART_SetConfig+0x348>
 8006374:	2310      	movs	r3, #16
 8006376:	77fb      	strb	r3, [r7, #31]
 8006378:	e0e6      	b.n	8006548 <UART_SetConfig+0x348>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a56      	ldr	r2, [pc, #344]	; (80064d8 <UART_SetConfig+0x2d8>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d120      	bne.n	80063c6 <UART_SetConfig+0x1c6>
 8006384:	4b51      	ldr	r3, [pc, #324]	; (80064cc <UART_SetConfig+0x2cc>)
 8006386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800638a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800638e:	2bc0      	cmp	r3, #192	; 0xc0
 8006390:	d013      	beq.n	80063ba <UART_SetConfig+0x1ba>
 8006392:	2bc0      	cmp	r3, #192	; 0xc0
 8006394:	d814      	bhi.n	80063c0 <UART_SetConfig+0x1c0>
 8006396:	2b80      	cmp	r3, #128	; 0x80
 8006398:	d009      	beq.n	80063ae <UART_SetConfig+0x1ae>
 800639a:	2b80      	cmp	r3, #128	; 0x80
 800639c:	d810      	bhi.n	80063c0 <UART_SetConfig+0x1c0>
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d002      	beq.n	80063a8 <UART_SetConfig+0x1a8>
 80063a2:	2b40      	cmp	r3, #64	; 0x40
 80063a4:	d006      	beq.n	80063b4 <UART_SetConfig+0x1b4>
 80063a6:	e00b      	b.n	80063c0 <UART_SetConfig+0x1c0>
 80063a8:	2300      	movs	r3, #0
 80063aa:	77fb      	strb	r3, [r7, #31]
 80063ac:	e0cc      	b.n	8006548 <UART_SetConfig+0x348>
 80063ae:	2302      	movs	r3, #2
 80063b0:	77fb      	strb	r3, [r7, #31]
 80063b2:	e0c9      	b.n	8006548 <UART_SetConfig+0x348>
 80063b4:	2304      	movs	r3, #4
 80063b6:	77fb      	strb	r3, [r7, #31]
 80063b8:	e0c6      	b.n	8006548 <UART_SetConfig+0x348>
 80063ba:	2308      	movs	r3, #8
 80063bc:	77fb      	strb	r3, [r7, #31]
 80063be:	e0c3      	b.n	8006548 <UART_SetConfig+0x348>
 80063c0:	2310      	movs	r3, #16
 80063c2:	77fb      	strb	r3, [r7, #31]
 80063c4:	e0c0      	b.n	8006548 <UART_SetConfig+0x348>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a44      	ldr	r2, [pc, #272]	; (80064dc <UART_SetConfig+0x2dc>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d125      	bne.n	800641c <UART_SetConfig+0x21c>
 80063d0:	4b3e      	ldr	r3, [pc, #248]	; (80064cc <UART_SetConfig+0x2cc>)
 80063d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063de:	d017      	beq.n	8006410 <UART_SetConfig+0x210>
 80063e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063e4:	d817      	bhi.n	8006416 <UART_SetConfig+0x216>
 80063e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063ea:	d00b      	beq.n	8006404 <UART_SetConfig+0x204>
 80063ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063f0:	d811      	bhi.n	8006416 <UART_SetConfig+0x216>
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d003      	beq.n	80063fe <UART_SetConfig+0x1fe>
 80063f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063fa:	d006      	beq.n	800640a <UART_SetConfig+0x20a>
 80063fc:	e00b      	b.n	8006416 <UART_SetConfig+0x216>
 80063fe:	2300      	movs	r3, #0
 8006400:	77fb      	strb	r3, [r7, #31]
 8006402:	e0a1      	b.n	8006548 <UART_SetConfig+0x348>
 8006404:	2302      	movs	r3, #2
 8006406:	77fb      	strb	r3, [r7, #31]
 8006408:	e09e      	b.n	8006548 <UART_SetConfig+0x348>
 800640a:	2304      	movs	r3, #4
 800640c:	77fb      	strb	r3, [r7, #31]
 800640e:	e09b      	b.n	8006548 <UART_SetConfig+0x348>
 8006410:	2308      	movs	r3, #8
 8006412:	77fb      	strb	r3, [r7, #31]
 8006414:	e098      	b.n	8006548 <UART_SetConfig+0x348>
 8006416:	2310      	movs	r3, #16
 8006418:	77fb      	strb	r3, [r7, #31]
 800641a:	e095      	b.n	8006548 <UART_SetConfig+0x348>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a2f      	ldr	r2, [pc, #188]	; (80064e0 <UART_SetConfig+0x2e0>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d125      	bne.n	8006472 <UART_SetConfig+0x272>
 8006426:	4b29      	ldr	r3, [pc, #164]	; (80064cc <UART_SetConfig+0x2cc>)
 8006428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800642c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006430:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006434:	d017      	beq.n	8006466 <UART_SetConfig+0x266>
 8006436:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800643a:	d817      	bhi.n	800646c <UART_SetConfig+0x26c>
 800643c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006440:	d00b      	beq.n	800645a <UART_SetConfig+0x25a>
 8006442:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006446:	d811      	bhi.n	800646c <UART_SetConfig+0x26c>
 8006448:	2b00      	cmp	r3, #0
 800644a:	d003      	beq.n	8006454 <UART_SetConfig+0x254>
 800644c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006450:	d006      	beq.n	8006460 <UART_SetConfig+0x260>
 8006452:	e00b      	b.n	800646c <UART_SetConfig+0x26c>
 8006454:	2301      	movs	r3, #1
 8006456:	77fb      	strb	r3, [r7, #31]
 8006458:	e076      	b.n	8006548 <UART_SetConfig+0x348>
 800645a:	2302      	movs	r3, #2
 800645c:	77fb      	strb	r3, [r7, #31]
 800645e:	e073      	b.n	8006548 <UART_SetConfig+0x348>
 8006460:	2304      	movs	r3, #4
 8006462:	77fb      	strb	r3, [r7, #31]
 8006464:	e070      	b.n	8006548 <UART_SetConfig+0x348>
 8006466:	2308      	movs	r3, #8
 8006468:	77fb      	strb	r3, [r7, #31]
 800646a:	e06d      	b.n	8006548 <UART_SetConfig+0x348>
 800646c:	2310      	movs	r3, #16
 800646e:	77fb      	strb	r3, [r7, #31]
 8006470:	e06a      	b.n	8006548 <UART_SetConfig+0x348>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a1b      	ldr	r2, [pc, #108]	; (80064e4 <UART_SetConfig+0x2e4>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d138      	bne.n	80064ee <UART_SetConfig+0x2ee>
 800647c:	4b13      	ldr	r3, [pc, #76]	; (80064cc <UART_SetConfig+0x2cc>)
 800647e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006482:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006486:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800648a:	d017      	beq.n	80064bc <UART_SetConfig+0x2bc>
 800648c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006490:	d82a      	bhi.n	80064e8 <UART_SetConfig+0x2e8>
 8006492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006496:	d00b      	beq.n	80064b0 <UART_SetConfig+0x2b0>
 8006498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800649c:	d824      	bhi.n	80064e8 <UART_SetConfig+0x2e8>
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d003      	beq.n	80064aa <UART_SetConfig+0x2aa>
 80064a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064a6:	d006      	beq.n	80064b6 <UART_SetConfig+0x2b6>
 80064a8:	e01e      	b.n	80064e8 <UART_SetConfig+0x2e8>
 80064aa:	2300      	movs	r3, #0
 80064ac:	77fb      	strb	r3, [r7, #31]
 80064ae:	e04b      	b.n	8006548 <UART_SetConfig+0x348>
 80064b0:	2302      	movs	r3, #2
 80064b2:	77fb      	strb	r3, [r7, #31]
 80064b4:	e048      	b.n	8006548 <UART_SetConfig+0x348>
 80064b6:	2304      	movs	r3, #4
 80064b8:	77fb      	strb	r3, [r7, #31]
 80064ba:	e045      	b.n	8006548 <UART_SetConfig+0x348>
 80064bc:	2308      	movs	r3, #8
 80064be:	77fb      	strb	r3, [r7, #31]
 80064c0:	e042      	b.n	8006548 <UART_SetConfig+0x348>
 80064c2:	bf00      	nop
 80064c4:	efff69f3 	.word	0xefff69f3
 80064c8:	40011000 	.word	0x40011000
 80064cc:	40023800 	.word	0x40023800
 80064d0:	40004400 	.word	0x40004400
 80064d4:	40004800 	.word	0x40004800
 80064d8:	40004c00 	.word	0x40004c00
 80064dc:	40005000 	.word	0x40005000
 80064e0:	40011400 	.word	0x40011400
 80064e4:	40007800 	.word	0x40007800
 80064e8:	2310      	movs	r3, #16
 80064ea:	77fb      	strb	r3, [r7, #31]
 80064ec:	e02c      	b.n	8006548 <UART_SetConfig+0x348>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a72      	ldr	r2, [pc, #456]	; (80066bc <UART_SetConfig+0x4bc>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d125      	bne.n	8006544 <UART_SetConfig+0x344>
 80064f8:	4b71      	ldr	r3, [pc, #452]	; (80066c0 <UART_SetConfig+0x4c0>)
 80064fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006502:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006506:	d017      	beq.n	8006538 <UART_SetConfig+0x338>
 8006508:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800650c:	d817      	bhi.n	800653e <UART_SetConfig+0x33e>
 800650e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006512:	d00b      	beq.n	800652c <UART_SetConfig+0x32c>
 8006514:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006518:	d811      	bhi.n	800653e <UART_SetConfig+0x33e>
 800651a:	2b00      	cmp	r3, #0
 800651c:	d003      	beq.n	8006526 <UART_SetConfig+0x326>
 800651e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006522:	d006      	beq.n	8006532 <UART_SetConfig+0x332>
 8006524:	e00b      	b.n	800653e <UART_SetConfig+0x33e>
 8006526:	2300      	movs	r3, #0
 8006528:	77fb      	strb	r3, [r7, #31]
 800652a:	e00d      	b.n	8006548 <UART_SetConfig+0x348>
 800652c:	2302      	movs	r3, #2
 800652e:	77fb      	strb	r3, [r7, #31]
 8006530:	e00a      	b.n	8006548 <UART_SetConfig+0x348>
 8006532:	2304      	movs	r3, #4
 8006534:	77fb      	strb	r3, [r7, #31]
 8006536:	e007      	b.n	8006548 <UART_SetConfig+0x348>
 8006538:	2308      	movs	r3, #8
 800653a:	77fb      	strb	r3, [r7, #31]
 800653c:	e004      	b.n	8006548 <UART_SetConfig+0x348>
 800653e:	2310      	movs	r3, #16
 8006540:	77fb      	strb	r3, [r7, #31]
 8006542:	e001      	b.n	8006548 <UART_SetConfig+0x348>
 8006544:	2310      	movs	r3, #16
 8006546:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	69db      	ldr	r3, [r3, #28]
 800654c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006550:	d15b      	bne.n	800660a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006552:	7ffb      	ldrb	r3, [r7, #31]
 8006554:	2b08      	cmp	r3, #8
 8006556:	d828      	bhi.n	80065aa <UART_SetConfig+0x3aa>
 8006558:	a201      	add	r2, pc, #4	; (adr r2, 8006560 <UART_SetConfig+0x360>)
 800655a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655e:	bf00      	nop
 8006560:	08006585 	.word	0x08006585
 8006564:	0800658d 	.word	0x0800658d
 8006568:	08006595 	.word	0x08006595
 800656c:	080065ab 	.word	0x080065ab
 8006570:	0800659b 	.word	0x0800659b
 8006574:	080065ab 	.word	0x080065ab
 8006578:	080065ab 	.word	0x080065ab
 800657c:	080065ab 	.word	0x080065ab
 8006580:	080065a3 	.word	0x080065a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006584:	f7fe f824 	bl	80045d0 <HAL_RCC_GetPCLK1Freq>
 8006588:	61b8      	str	r0, [r7, #24]
        break;
 800658a:	e013      	b.n	80065b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800658c:	f7fe f834 	bl	80045f8 <HAL_RCC_GetPCLK2Freq>
 8006590:	61b8      	str	r0, [r7, #24]
        break;
 8006592:	e00f      	b.n	80065b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006594:	4b4b      	ldr	r3, [pc, #300]	; (80066c4 <UART_SetConfig+0x4c4>)
 8006596:	61bb      	str	r3, [r7, #24]
        break;
 8006598:	e00c      	b.n	80065b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800659a:	f7fd ff07 	bl	80043ac <HAL_RCC_GetSysClockFreq>
 800659e:	61b8      	str	r0, [r7, #24]
        break;
 80065a0:	e008      	b.n	80065b4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065a6:	61bb      	str	r3, [r7, #24]
        break;
 80065a8:	e004      	b.n	80065b4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80065aa:	2300      	movs	r3, #0
 80065ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	77bb      	strb	r3, [r7, #30]
        break;
 80065b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d074      	beq.n	80066a4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	005a      	lsls	r2, r3, #1
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	085b      	lsrs	r3, r3, #1
 80065c4:	441a      	add	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	2b0f      	cmp	r3, #15
 80065d4:	d916      	bls.n	8006604 <UART_SetConfig+0x404>
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065dc:	d212      	bcs.n	8006604 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	f023 030f 	bic.w	r3, r3, #15
 80065e6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	085b      	lsrs	r3, r3, #1
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	f003 0307 	and.w	r3, r3, #7
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	89fb      	ldrh	r3, [r7, #14]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	89fa      	ldrh	r2, [r7, #14]
 8006600:	60da      	str	r2, [r3, #12]
 8006602:	e04f      	b.n	80066a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	77bb      	strb	r3, [r7, #30]
 8006608:	e04c      	b.n	80066a4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800660a:	7ffb      	ldrb	r3, [r7, #31]
 800660c:	2b08      	cmp	r3, #8
 800660e:	d828      	bhi.n	8006662 <UART_SetConfig+0x462>
 8006610:	a201      	add	r2, pc, #4	; (adr r2, 8006618 <UART_SetConfig+0x418>)
 8006612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006616:	bf00      	nop
 8006618:	0800663d 	.word	0x0800663d
 800661c:	08006645 	.word	0x08006645
 8006620:	0800664d 	.word	0x0800664d
 8006624:	08006663 	.word	0x08006663
 8006628:	08006653 	.word	0x08006653
 800662c:	08006663 	.word	0x08006663
 8006630:	08006663 	.word	0x08006663
 8006634:	08006663 	.word	0x08006663
 8006638:	0800665b 	.word	0x0800665b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800663c:	f7fd ffc8 	bl	80045d0 <HAL_RCC_GetPCLK1Freq>
 8006640:	61b8      	str	r0, [r7, #24]
        break;
 8006642:	e013      	b.n	800666c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006644:	f7fd ffd8 	bl	80045f8 <HAL_RCC_GetPCLK2Freq>
 8006648:	61b8      	str	r0, [r7, #24]
        break;
 800664a:	e00f      	b.n	800666c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800664c:	4b1d      	ldr	r3, [pc, #116]	; (80066c4 <UART_SetConfig+0x4c4>)
 800664e:	61bb      	str	r3, [r7, #24]
        break;
 8006650:	e00c      	b.n	800666c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006652:	f7fd feab 	bl	80043ac <HAL_RCC_GetSysClockFreq>
 8006656:	61b8      	str	r0, [r7, #24]
        break;
 8006658:	e008      	b.n	800666c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800665a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800665e:	61bb      	str	r3, [r7, #24]
        break;
 8006660:	e004      	b.n	800666c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006662:	2300      	movs	r3, #0
 8006664:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	77bb      	strb	r3, [r7, #30]
        break;
 800666a:	bf00      	nop
    }

    if (pclk != 0U)
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d018      	beq.n	80066a4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	085a      	lsrs	r2, r3, #1
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	441a      	add	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	fbb2 f3f3 	udiv	r3, r2, r3
 8006684:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	2b0f      	cmp	r3, #15
 800668a:	d909      	bls.n	80066a0 <UART_SetConfig+0x4a0>
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006692:	d205      	bcs.n	80066a0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	b29a      	uxth	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	60da      	str	r2, [r3, #12]
 800669e:	e001      	b.n	80066a4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80066b0:	7fbb      	ldrb	r3, [r7, #30]
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3720      	adds	r7, #32
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	40007c00 	.word	0x40007c00
 80066c0:	40023800 	.word	0x40023800
 80066c4:	00f42400 	.word	0x00f42400

080066c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d4:	f003 0301 	and.w	r3, r3, #1
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00a      	beq.n	80066f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	430a      	orrs	r2, r1
 80066f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f6:	f003 0302 	and.w	r3, r3, #2
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00a      	beq.n	8006714 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	430a      	orrs	r2, r1
 8006712:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006718:	f003 0304 	and.w	r3, r3, #4
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00a      	beq.n	8006736 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	430a      	orrs	r2, r1
 8006734:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673a:	f003 0308 	and.w	r3, r3, #8
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00a      	beq.n	8006758 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	430a      	orrs	r2, r1
 8006756:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675c:	f003 0310 	and.w	r3, r3, #16
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00a      	beq.n	800677a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	430a      	orrs	r2, r1
 8006778:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677e:	f003 0320 	and.w	r3, r3, #32
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00a      	beq.n	800679c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	430a      	orrs	r2, r1
 800679a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d01a      	beq.n	80067de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	430a      	orrs	r2, r1
 80067bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067c6:	d10a      	bne.n	80067de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	430a      	orrs	r2, r1
 80067dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00a      	beq.n	8006800 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	430a      	orrs	r2, r1
 80067fe:	605a      	str	r2, [r3, #4]
  }
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b086      	sub	sp, #24
 8006810:	af02      	add	r7, sp, #8
 8006812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800681c:	f7fb ffe6 	bl	80027ec <HAL_GetTick>
 8006820:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0308 	and.w	r3, r3, #8
 800682c:	2b08      	cmp	r3, #8
 800682e:	d10e      	bne.n	800684e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006830:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006834:	9300      	str	r3, [sp, #0]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 f81b 	bl	800687a <UART_WaitOnFlagUntilTimeout>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d001      	beq.n	800684e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e011      	b.n	8006872 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2220      	movs	r2, #32
 8006852:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2220      	movs	r2, #32
 8006858:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b09c      	sub	sp, #112	; 0x70
 800687e:	af00      	add	r7, sp, #0
 8006880:	60f8      	str	r0, [r7, #12]
 8006882:	60b9      	str	r1, [r7, #8]
 8006884:	603b      	str	r3, [r7, #0]
 8006886:	4613      	mov	r3, r2
 8006888:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800688a:	e0a7      	b.n	80069dc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800688c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800688e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006892:	f000 80a3 	beq.w	80069dc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006896:	f7fb ffa9 	bl	80027ec <HAL_GetTick>
 800689a:	4602      	mov	r2, r0
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d302      	bcc.n	80068ac <UART_WaitOnFlagUntilTimeout+0x32>
 80068a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d13f      	bne.n	800692c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068b4:	e853 3f00 	ldrex	r3, [r3]
 80068b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80068ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068c0:	667b      	str	r3, [r7, #100]	; 0x64
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	461a      	mov	r2, r3
 80068c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068cc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80068d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80068d2:	e841 2300 	strex	r3, r2, [r1]
 80068d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80068d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1e6      	bne.n	80068ac <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	3308      	adds	r3, #8
 80068e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068e8:	e853 3f00 	ldrex	r3, [r3]
 80068ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f0:	f023 0301 	bic.w	r3, r3, #1
 80068f4:	663b      	str	r3, [r7, #96]	; 0x60
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	3308      	adds	r3, #8
 80068fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80068fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8006900:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006902:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006904:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006906:	e841 2300 	strex	r3, r2, [r1]
 800690a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800690c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800690e:	2b00      	cmp	r3, #0
 8006910:	d1e5      	bne.n	80068de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2220      	movs	r2, #32
 8006916:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2220      	movs	r2, #32
 800691c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006928:	2303      	movs	r3, #3
 800692a:	e068      	b.n	80069fe <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0304 	and.w	r3, r3, #4
 8006936:	2b00      	cmp	r3, #0
 8006938:	d050      	beq.n	80069dc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	69db      	ldr	r3, [r3, #28]
 8006940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006948:	d148      	bne.n	80069dc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006952:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695c:	e853 3f00 	ldrex	r3, [r3]
 8006960:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006964:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006968:	66fb      	str	r3, [r7, #108]	; 0x6c
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	461a      	mov	r2, r3
 8006970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006972:	637b      	str	r3, [r7, #52]	; 0x34
 8006974:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006976:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006978:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800697a:	e841 2300 	strex	r3, r2, [r1]
 800697e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1e6      	bne.n	8006954 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	3308      	adds	r3, #8
 800698c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	e853 3f00 	ldrex	r3, [r3]
 8006994:	613b      	str	r3, [r7, #16]
   return(result);
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	f023 0301 	bic.w	r3, r3, #1
 800699c:	66bb      	str	r3, [r7, #104]	; 0x68
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	3308      	adds	r3, #8
 80069a4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80069a6:	623a      	str	r2, [r7, #32]
 80069a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069aa:	69f9      	ldr	r1, [r7, #28]
 80069ac:	6a3a      	ldr	r2, [r7, #32]
 80069ae:	e841 2300 	strex	r3, r2, [r1]
 80069b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1e5      	bne.n	8006986 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2220      	movs	r2, #32
 80069be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2220      	movs	r2, #32
 80069c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2220      	movs	r2, #32
 80069cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80069d8:	2303      	movs	r3, #3
 80069da:	e010      	b.n	80069fe <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	69da      	ldr	r2, [r3, #28]
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	4013      	ands	r3, r2
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	bf0c      	ite	eq
 80069ec:	2301      	moveq	r3, #1
 80069ee:	2300      	movne	r3, #0
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	461a      	mov	r2, r3
 80069f4:	79fb      	ldrb	r3, [r7, #7]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	f43f af48 	beq.w	800688c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3770      	adds	r7, #112	; 0x70
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
	...

08006a08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a08:	b084      	sub	sp, #16
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b084      	sub	sp, #16
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
 8006a12:	f107 001c 	add.w	r0, r7, #28
 8006a16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d120      	bne.n	8006a62 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	68da      	ldr	r2, [r3, #12]
 8006a30:	4b20      	ldr	r3, [pc, #128]	; (8006ab4 <USB_CoreInit+0xac>)
 8006a32:	4013      	ands	r3, r2
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d105      	bne.n	8006a56 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fa96 	bl	8006f88 <USB_CoreReset>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	73fb      	strb	r3, [r7, #15]
 8006a60:	e010      	b.n	8006a84 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 fa8a 	bl	8006f88 <USB_CoreReset>
 8006a74:	4603      	mov	r3, r0
 8006a76:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d10b      	bne.n	8006aa2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	f043 0206 	orr.w	r2, r3, #6
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f043 0220 	orr.w	r2, r3, #32
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3710      	adds	r7, #16
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006aae:	b004      	add	sp, #16
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	ffbdffbf 	.word	0xffbdffbf

08006ab8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	f023 0201 	bic.w	r2, r3, #1
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	370c      	adds	r7, #12
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b084      	sub	sp, #16
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006af6:	78fb      	ldrb	r3, [r7, #3]
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d115      	bne.n	8006b28 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006b08:	2001      	movs	r0, #1
 8006b0a:	f7fb fe7b 	bl	8002804 <HAL_Delay>
      ms++;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	3301      	adds	r3, #1
 8006b12:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 fa29 	bl	8006f6c <USB_GetMode>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d01e      	beq.n	8006b5e <USB_SetCurrentMode+0x84>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2b31      	cmp	r3, #49	; 0x31
 8006b24:	d9f0      	bls.n	8006b08 <USB_SetCurrentMode+0x2e>
 8006b26:	e01a      	b.n	8006b5e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b28:	78fb      	ldrb	r3, [r7, #3]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d115      	bne.n	8006b5a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006b3a:	2001      	movs	r0, #1
 8006b3c:	f7fb fe62 	bl	8002804 <HAL_Delay>
      ms++;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	3301      	adds	r3, #1
 8006b44:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fa10 	bl	8006f6c <USB_GetMode>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d005      	beq.n	8006b5e <USB_SetCurrentMode+0x84>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2b31      	cmp	r3, #49	; 0x31
 8006b56:	d9f0      	bls.n	8006b3a <USB_SetCurrentMode+0x60>
 8006b58:	e001      	b.n	8006b5e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e005      	b.n	8006b6a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2b32      	cmp	r3, #50	; 0x32
 8006b62:	d101      	bne.n	8006b68 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e000      	b.n	8006b6a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
	...

08006b74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b74:	b084      	sub	sp, #16
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b086      	sub	sp, #24
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
 8006b7e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006b82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006b86:	2300      	movs	r3, #0
 8006b88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006b8e:	2300      	movs	r3, #0
 8006b90:	613b      	str	r3, [r7, #16]
 8006b92:	e009      	b.n	8006ba8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	3340      	adds	r3, #64	; 0x40
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4413      	add	r3, r2
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	613b      	str	r3, [r7, #16]
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	2b0e      	cmp	r3, #14
 8006bac:	d9f2      	bls.n	8006b94 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d11c      	bne.n	8006bee <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bc2:	f043 0302 	orr.w	r3, r3, #2
 8006bc6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bcc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	601a      	str	r2, [r3, #0]
 8006bec:	e005      	b.n	8006bfa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c00:	461a      	mov	r2, r3
 8006c02:	2300      	movs	r3, #0
 8006c04:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c14:	461a      	mov	r2, r3
 8006c16:	680b      	ldr	r3, [r1, #0]
 8006c18:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d10c      	bne.n	8006c3a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d104      	bne.n	8006c30 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006c26:	2100      	movs	r1, #0
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f965 	bl	8006ef8 <USB_SetDevSpeed>
 8006c2e:	e008      	b.n	8006c42 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006c30:	2101      	movs	r1, #1
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f960 	bl	8006ef8 <USB_SetDevSpeed>
 8006c38:	e003      	b.n	8006c42 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006c3a:	2103      	movs	r1, #3
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 f95b 	bl	8006ef8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c42:	2110      	movs	r1, #16
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 f8f3 	bl	8006e30 <USB_FlushTxFifo>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d001      	beq.n	8006c54 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f91f 	bl	8006e98 <USB_FlushRxFifo>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d001      	beq.n	8006c64 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c76:	461a      	mov	r2, r3
 8006c78:	2300      	movs	r3, #0
 8006c7a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c82:	461a      	mov	r2, r3
 8006c84:	2300      	movs	r3, #0
 8006c86:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c88:	2300      	movs	r3, #0
 8006c8a:	613b      	str	r3, [r7, #16]
 8006c8c:	e043      	b.n	8006d16 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	015a      	lsls	r2, r3, #5
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	4413      	add	r3, r2
 8006c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ca0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ca4:	d118      	bne.n	8006cd8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10a      	bne.n	8006cc2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	015a      	lsls	r2, r3, #5
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cb8:	461a      	mov	r2, r3
 8006cba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006cbe:	6013      	str	r3, [r2, #0]
 8006cc0:	e013      	b.n	8006cea <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	015a      	lsls	r2, r3, #5
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	4413      	add	r3, r2
 8006cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cce:	461a      	mov	r2, r3
 8006cd0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006cd4:	6013      	str	r3, [r2, #0]
 8006cd6:	e008      	b.n	8006cea <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	015a      	lsls	r2, r3, #5
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	015a      	lsls	r2, r3, #5
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	4413      	add	r3, r2
 8006d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d08:	461a      	mov	r2, r3
 8006d0a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d0e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	3301      	adds	r3, #1
 8006d14:	613b      	str	r3, [r7, #16]
 8006d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d18:	693a      	ldr	r2, [r7, #16]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d3b7      	bcc.n	8006c8e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d1e:	2300      	movs	r3, #0
 8006d20:	613b      	str	r3, [r7, #16]
 8006d22:	e043      	b.n	8006dac <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	015a      	lsls	r2, r3, #5
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d3a:	d118      	bne.n	8006d6e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d10a      	bne.n	8006d58 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	015a      	lsls	r2, r3, #5
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	4413      	add	r3, r2
 8006d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d4e:	461a      	mov	r2, r3
 8006d50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d54:	6013      	str	r3, [r2, #0]
 8006d56:	e013      	b.n	8006d80 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	015a      	lsls	r2, r3, #5
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d64:	461a      	mov	r2, r3
 8006d66:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d6a:	6013      	str	r3, [r2, #0]
 8006d6c:	e008      	b.n	8006d80 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	015a      	lsls	r2, r3, #5
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	4413      	add	r3, r2
 8006d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	015a      	lsls	r2, r3, #5
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	4413      	add	r3, r2
 8006d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	2300      	movs	r3, #0
 8006d90:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	015a      	lsls	r2, r3, #5
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	4413      	add	r3, r2
 8006d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d9e:	461a      	mov	r2, r3
 8006da0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006da4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	3301      	adds	r3, #1
 8006daa:	613b      	str	r3, [r7, #16]
 8006dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d3b7      	bcc.n	8006d24 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006dc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dc6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006dd4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d105      	bne.n	8006de8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	f043 0210 	orr.w	r2, r3, #16
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	699a      	ldr	r2, [r3, #24]
 8006dec:	4b0e      	ldr	r3, [pc, #56]	; (8006e28 <USB_DevInit+0x2b4>)
 8006dee:	4313      	orrs	r3, r2
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d005      	beq.n	8006e06 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	f043 0208 	orr.w	r2, r3, #8
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006e06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d105      	bne.n	8006e18 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	699a      	ldr	r2, [r3, #24]
 8006e10:	4b06      	ldr	r3, [pc, #24]	; (8006e2c <USB_DevInit+0x2b8>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3718      	adds	r7, #24
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e24:	b004      	add	sp, #16
 8006e26:	4770      	bx	lr
 8006e28:	803c3800 	.word	0x803c3800
 8006e2c:	40000004 	.word	0x40000004

08006e30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	3301      	adds	r3, #1
 8006e42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	4a13      	ldr	r2, [pc, #76]	; (8006e94 <USB_FlushTxFifo+0x64>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d901      	bls.n	8006e50 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	e01b      	b.n	8006e88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	daf2      	bge.n	8006e3e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	019b      	lsls	r3, r3, #6
 8006e60:	f043 0220 	orr.w	r2, r3, #32
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	4a08      	ldr	r2, [pc, #32]	; (8006e94 <USB_FlushTxFifo+0x64>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d901      	bls.n	8006e7a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e006      	b.n	8006e88 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	f003 0320 	and.w	r3, r3, #32
 8006e82:	2b20      	cmp	r3, #32
 8006e84:	d0f0      	beq.n	8006e68 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr
 8006e94:	00030d40 	.word	0x00030d40

08006e98 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	4a11      	ldr	r2, [pc, #68]	; (8006ef4 <USB_FlushRxFifo+0x5c>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d901      	bls.n	8006eb6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e018      	b.n	8006ee8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	daf2      	bge.n	8006ea4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2210      	movs	r2, #16
 8006ec6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	4a08      	ldr	r2, [pc, #32]	; (8006ef4 <USB_FlushRxFifo+0x5c>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d901      	bls.n	8006eda <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e006      	b.n	8006ee8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	f003 0310 	and.w	r3, r3, #16
 8006ee2:	2b10      	cmp	r3, #16
 8006ee4:	d0f0      	beq.n	8006ec8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006ee6:	2300      	movs	r3, #0
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3714      	adds	r7, #20
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr
 8006ef4:	00030d40 	.word	0x00030d40

08006ef8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	460b      	mov	r3, r1
 8006f02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	78fb      	ldrb	r3, [r7, #3]
 8006f12:	68f9      	ldr	r1, [r7, #12]
 8006f14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3714      	adds	r7, #20
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr

08006f2a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b085      	sub	sp, #20
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006f44:	f023 0303 	bic.w	r3, r3, #3
 8006f48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f58:	f043 0302 	orr.w	r3, r3, #2
 8006f5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3714      	adds	r7, #20
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	695b      	ldr	r3, [r3, #20]
 8006f78:	f003 0301 	and.w	r3, r3, #1
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f90:	2300      	movs	r3, #0
 8006f92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	3301      	adds	r3, #1
 8006f98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	4a13      	ldr	r2, [pc, #76]	; (8006fec <USB_CoreReset+0x64>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d901      	bls.n	8006fa6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e01b      	b.n	8006fde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	daf2      	bge.n	8006f94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	f043 0201 	orr.w	r2, r3, #1
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	4a09      	ldr	r2, [pc, #36]	; (8006fec <USB_CoreReset+0x64>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d901      	bls.n	8006fd0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	e006      	b.n	8006fde <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	f003 0301 	and.w	r3, r3, #1
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d0f0      	beq.n	8006fbe <USB_CoreReset+0x36>

  return HAL_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3714      	adds	r7, #20
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	00030d40 	.word	0x00030d40

08006ff0 <__errno>:
 8006ff0:	4b01      	ldr	r3, [pc, #4]	; (8006ff8 <__errno+0x8>)
 8006ff2:	6818      	ldr	r0, [r3, #0]
 8006ff4:	4770      	bx	lr
 8006ff6:	bf00      	nop
 8006ff8:	20000018 	.word	0x20000018

08006ffc <__libc_init_array>:
 8006ffc:	b570      	push	{r4, r5, r6, lr}
 8006ffe:	4d0d      	ldr	r5, [pc, #52]	; (8007034 <__libc_init_array+0x38>)
 8007000:	4c0d      	ldr	r4, [pc, #52]	; (8007038 <__libc_init_array+0x3c>)
 8007002:	1b64      	subs	r4, r4, r5
 8007004:	10a4      	asrs	r4, r4, #2
 8007006:	2600      	movs	r6, #0
 8007008:	42a6      	cmp	r6, r4
 800700a:	d109      	bne.n	8007020 <__libc_init_array+0x24>
 800700c:	4d0b      	ldr	r5, [pc, #44]	; (800703c <__libc_init_array+0x40>)
 800700e:	4c0c      	ldr	r4, [pc, #48]	; (8007040 <__libc_init_array+0x44>)
 8007010:	f002 fd36 	bl	8009a80 <_init>
 8007014:	1b64      	subs	r4, r4, r5
 8007016:	10a4      	asrs	r4, r4, #2
 8007018:	2600      	movs	r6, #0
 800701a:	42a6      	cmp	r6, r4
 800701c:	d105      	bne.n	800702a <__libc_init_array+0x2e>
 800701e:	bd70      	pop	{r4, r5, r6, pc}
 8007020:	f855 3b04 	ldr.w	r3, [r5], #4
 8007024:	4798      	blx	r3
 8007026:	3601      	adds	r6, #1
 8007028:	e7ee      	b.n	8007008 <__libc_init_array+0xc>
 800702a:	f855 3b04 	ldr.w	r3, [r5], #4
 800702e:	4798      	blx	r3
 8007030:	3601      	adds	r6, #1
 8007032:	e7f2      	b.n	800701a <__libc_init_array+0x1e>
 8007034:	08009e94 	.word	0x08009e94
 8007038:	08009e94 	.word	0x08009e94
 800703c:	08009e94 	.word	0x08009e94
 8007040:	08009e98 	.word	0x08009e98

08007044 <memset>:
 8007044:	4402      	add	r2, r0
 8007046:	4603      	mov	r3, r0
 8007048:	4293      	cmp	r3, r2
 800704a:	d100      	bne.n	800704e <memset+0xa>
 800704c:	4770      	bx	lr
 800704e:	f803 1b01 	strb.w	r1, [r3], #1
 8007052:	e7f9      	b.n	8007048 <memset+0x4>

08007054 <__cvt>:
 8007054:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007058:	ec55 4b10 	vmov	r4, r5, d0
 800705c:	2d00      	cmp	r5, #0
 800705e:	460e      	mov	r6, r1
 8007060:	4619      	mov	r1, r3
 8007062:	462b      	mov	r3, r5
 8007064:	bfbb      	ittet	lt
 8007066:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800706a:	461d      	movlt	r5, r3
 800706c:	2300      	movge	r3, #0
 800706e:	232d      	movlt	r3, #45	; 0x2d
 8007070:	700b      	strb	r3, [r1, #0]
 8007072:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007074:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007078:	4691      	mov	r9, r2
 800707a:	f023 0820 	bic.w	r8, r3, #32
 800707e:	bfbc      	itt	lt
 8007080:	4622      	movlt	r2, r4
 8007082:	4614      	movlt	r4, r2
 8007084:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007088:	d005      	beq.n	8007096 <__cvt+0x42>
 800708a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800708e:	d100      	bne.n	8007092 <__cvt+0x3e>
 8007090:	3601      	adds	r6, #1
 8007092:	2102      	movs	r1, #2
 8007094:	e000      	b.n	8007098 <__cvt+0x44>
 8007096:	2103      	movs	r1, #3
 8007098:	ab03      	add	r3, sp, #12
 800709a:	9301      	str	r3, [sp, #4]
 800709c:	ab02      	add	r3, sp, #8
 800709e:	9300      	str	r3, [sp, #0]
 80070a0:	ec45 4b10 	vmov	d0, r4, r5
 80070a4:	4653      	mov	r3, sl
 80070a6:	4632      	mov	r2, r6
 80070a8:	f000 fcca 	bl	8007a40 <_dtoa_r>
 80070ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80070b0:	4607      	mov	r7, r0
 80070b2:	d102      	bne.n	80070ba <__cvt+0x66>
 80070b4:	f019 0f01 	tst.w	r9, #1
 80070b8:	d022      	beq.n	8007100 <__cvt+0xac>
 80070ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80070be:	eb07 0906 	add.w	r9, r7, r6
 80070c2:	d110      	bne.n	80070e6 <__cvt+0x92>
 80070c4:	783b      	ldrb	r3, [r7, #0]
 80070c6:	2b30      	cmp	r3, #48	; 0x30
 80070c8:	d10a      	bne.n	80070e0 <__cvt+0x8c>
 80070ca:	2200      	movs	r2, #0
 80070cc:	2300      	movs	r3, #0
 80070ce:	4620      	mov	r0, r4
 80070d0:	4629      	mov	r1, r5
 80070d2:	f7f9 fd19 	bl	8000b08 <__aeabi_dcmpeq>
 80070d6:	b918      	cbnz	r0, 80070e0 <__cvt+0x8c>
 80070d8:	f1c6 0601 	rsb	r6, r6, #1
 80070dc:	f8ca 6000 	str.w	r6, [sl]
 80070e0:	f8da 3000 	ldr.w	r3, [sl]
 80070e4:	4499      	add	r9, r3
 80070e6:	2200      	movs	r2, #0
 80070e8:	2300      	movs	r3, #0
 80070ea:	4620      	mov	r0, r4
 80070ec:	4629      	mov	r1, r5
 80070ee:	f7f9 fd0b 	bl	8000b08 <__aeabi_dcmpeq>
 80070f2:	b108      	cbz	r0, 80070f8 <__cvt+0xa4>
 80070f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80070f8:	2230      	movs	r2, #48	; 0x30
 80070fa:	9b03      	ldr	r3, [sp, #12]
 80070fc:	454b      	cmp	r3, r9
 80070fe:	d307      	bcc.n	8007110 <__cvt+0xbc>
 8007100:	9b03      	ldr	r3, [sp, #12]
 8007102:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007104:	1bdb      	subs	r3, r3, r7
 8007106:	4638      	mov	r0, r7
 8007108:	6013      	str	r3, [r2, #0]
 800710a:	b004      	add	sp, #16
 800710c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007110:	1c59      	adds	r1, r3, #1
 8007112:	9103      	str	r1, [sp, #12]
 8007114:	701a      	strb	r2, [r3, #0]
 8007116:	e7f0      	b.n	80070fa <__cvt+0xa6>

08007118 <__exponent>:
 8007118:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800711a:	4603      	mov	r3, r0
 800711c:	2900      	cmp	r1, #0
 800711e:	bfb8      	it	lt
 8007120:	4249      	neglt	r1, r1
 8007122:	f803 2b02 	strb.w	r2, [r3], #2
 8007126:	bfb4      	ite	lt
 8007128:	222d      	movlt	r2, #45	; 0x2d
 800712a:	222b      	movge	r2, #43	; 0x2b
 800712c:	2909      	cmp	r1, #9
 800712e:	7042      	strb	r2, [r0, #1]
 8007130:	dd2a      	ble.n	8007188 <__exponent+0x70>
 8007132:	f10d 0407 	add.w	r4, sp, #7
 8007136:	46a4      	mov	ip, r4
 8007138:	270a      	movs	r7, #10
 800713a:	46a6      	mov	lr, r4
 800713c:	460a      	mov	r2, r1
 800713e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007142:	fb07 1516 	mls	r5, r7, r6, r1
 8007146:	3530      	adds	r5, #48	; 0x30
 8007148:	2a63      	cmp	r2, #99	; 0x63
 800714a:	f104 34ff 	add.w	r4, r4, #4294967295
 800714e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007152:	4631      	mov	r1, r6
 8007154:	dcf1      	bgt.n	800713a <__exponent+0x22>
 8007156:	3130      	adds	r1, #48	; 0x30
 8007158:	f1ae 0502 	sub.w	r5, lr, #2
 800715c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007160:	1c44      	adds	r4, r0, #1
 8007162:	4629      	mov	r1, r5
 8007164:	4561      	cmp	r1, ip
 8007166:	d30a      	bcc.n	800717e <__exponent+0x66>
 8007168:	f10d 0209 	add.w	r2, sp, #9
 800716c:	eba2 020e 	sub.w	r2, r2, lr
 8007170:	4565      	cmp	r5, ip
 8007172:	bf88      	it	hi
 8007174:	2200      	movhi	r2, #0
 8007176:	4413      	add	r3, r2
 8007178:	1a18      	subs	r0, r3, r0
 800717a:	b003      	add	sp, #12
 800717c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800717e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007182:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007186:	e7ed      	b.n	8007164 <__exponent+0x4c>
 8007188:	2330      	movs	r3, #48	; 0x30
 800718a:	3130      	adds	r1, #48	; 0x30
 800718c:	7083      	strb	r3, [r0, #2]
 800718e:	70c1      	strb	r1, [r0, #3]
 8007190:	1d03      	adds	r3, r0, #4
 8007192:	e7f1      	b.n	8007178 <__exponent+0x60>

08007194 <_printf_float>:
 8007194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007198:	ed2d 8b02 	vpush	{d8}
 800719c:	b08d      	sub	sp, #52	; 0x34
 800719e:	460c      	mov	r4, r1
 80071a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80071a4:	4616      	mov	r6, r2
 80071a6:	461f      	mov	r7, r3
 80071a8:	4605      	mov	r5, r0
 80071aa:	f001 fa37 	bl	800861c <_localeconv_r>
 80071ae:	f8d0 a000 	ldr.w	sl, [r0]
 80071b2:	4650      	mov	r0, sl
 80071b4:	f7f9 f82c 	bl	8000210 <strlen>
 80071b8:	2300      	movs	r3, #0
 80071ba:	930a      	str	r3, [sp, #40]	; 0x28
 80071bc:	6823      	ldr	r3, [r4, #0]
 80071be:	9305      	str	r3, [sp, #20]
 80071c0:	f8d8 3000 	ldr.w	r3, [r8]
 80071c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80071c8:	3307      	adds	r3, #7
 80071ca:	f023 0307 	bic.w	r3, r3, #7
 80071ce:	f103 0208 	add.w	r2, r3, #8
 80071d2:	f8c8 2000 	str.w	r2, [r8]
 80071d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071da:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80071de:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80071e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80071e6:	9307      	str	r3, [sp, #28]
 80071e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80071ec:	ee08 0a10 	vmov	s16, r0
 80071f0:	4b9f      	ldr	r3, [pc, #636]	; (8007470 <_printf_float+0x2dc>)
 80071f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071f6:	f04f 32ff 	mov.w	r2, #4294967295
 80071fa:	f7f9 fcb7 	bl	8000b6c <__aeabi_dcmpun>
 80071fe:	bb88      	cbnz	r0, 8007264 <_printf_float+0xd0>
 8007200:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007204:	4b9a      	ldr	r3, [pc, #616]	; (8007470 <_printf_float+0x2dc>)
 8007206:	f04f 32ff 	mov.w	r2, #4294967295
 800720a:	f7f9 fc91 	bl	8000b30 <__aeabi_dcmple>
 800720e:	bb48      	cbnz	r0, 8007264 <_printf_float+0xd0>
 8007210:	2200      	movs	r2, #0
 8007212:	2300      	movs	r3, #0
 8007214:	4640      	mov	r0, r8
 8007216:	4649      	mov	r1, r9
 8007218:	f7f9 fc80 	bl	8000b1c <__aeabi_dcmplt>
 800721c:	b110      	cbz	r0, 8007224 <_printf_float+0x90>
 800721e:	232d      	movs	r3, #45	; 0x2d
 8007220:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007224:	4b93      	ldr	r3, [pc, #588]	; (8007474 <_printf_float+0x2e0>)
 8007226:	4894      	ldr	r0, [pc, #592]	; (8007478 <_printf_float+0x2e4>)
 8007228:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800722c:	bf94      	ite	ls
 800722e:	4698      	movls	r8, r3
 8007230:	4680      	movhi	r8, r0
 8007232:	2303      	movs	r3, #3
 8007234:	6123      	str	r3, [r4, #16]
 8007236:	9b05      	ldr	r3, [sp, #20]
 8007238:	f023 0204 	bic.w	r2, r3, #4
 800723c:	6022      	str	r2, [r4, #0]
 800723e:	f04f 0900 	mov.w	r9, #0
 8007242:	9700      	str	r7, [sp, #0]
 8007244:	4633      	mov	r3, r6
 8007246:	aa0b      	add	r2, sp, #44	; 0x2c
 8007248:	4621      	mov	r1, r4
 800724a:	4628      	mov	r0, r5
 800724c:	f000 f9d8 	bl	8007600 <_printf_common>
 8007250:	3001      	adds	r0, #1
 8007252:	f040 8090 	bne.w	8007376 <_printf_float+0x1e2>
 8007256:	f04f 30ff 	mov.w	r0, #4294967295
 800725a:	b00d      	add	sp, #52	; 0x34
 800725c:	ecbd 8b02 	vpop	{d8}
 8007260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007264:	4642      	mov	r2, r8
 8007266:	464b      	mov	r3, r9
 8007268:	4640      	mov	r0, r8
 800726a:	4649      	mov	r1, r9
 800726c:	f7f9 fc7e 	bl	8000b6c <__aeabi_dcmpun>
 8007270:	b140      	cbz	r0, 8007284 <_printf_float+0xf0>
 8007272:	464b      	mov	r3, r9
 8007274:	2b00      	cmp	r3, #0
 8007276:	bfbc      	itt	lt
 8007278:	232d      	movlt	r3, #45	; 0x2d
 800727a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800727e:	487f      	ldr	r0, [pc, #508]	; (800747c <_printf_float+0x2e8>)
 8007280:	4b7f      	ldr	r3, [pc, #508]	; (8007480 <_printf_float+0x2ec>)
 8007282:	e7d1      	b.n	8007228 <_printf_float+0x94>
 8007284:	6863      	ldr	r3, [r4, #4]
 8007286:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800728a:	9206      	str	r2, [sp, #24]
 800728c:	1c5a      	adds	r2, r3, #1
 800728e:	d13f      	bne.n	8007310 <_printf_float+0x17c>
 8007290:	2306      	movs	r3, #6
 8007292:	6063      	str	r3, [r4, #4]
 8007294:	9b05      	ldr	r3, [sp, #20]
 8007296:	6861      	ldr	r1, [r4, #4]
 8007298:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800729c:	2300      	movs	r3, #0
 800729e:	9303      	str	r3, [sp, #12]
 80072a0:	ab0a      	add	r3, sp, #40	; 0x28
 80072a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80072a6:	ab09      	add	r3, sp, #36	; 0x24
 80072a8:	ec49 8b10 	vmov	d0, r8, r9
 80072ac:	9300      	str	r3, [sp, #0]
 80072ae:	6022      	str	r2, [r4, #0]
 80072b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80072b4:	4628      	mov	r0, r5
 80072b6:	f7ff fecd 	bl	8007054 <__cvt>
 80072ba:	9b06      	ldr	r3, [sp, #24]
 80072bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072be:	2b47      	cmp	r3, #71	; 0x47
 80072c0:	4680      	mov	r8, r0
 80072c2:	d108      	bne.n	80072d6 <_printf_float+0x142>
 80072c4:	1cc8      	adds	r0, r1, #3
 80072c6:	db02      	blt.n	80072ce <_printf_float+0x13a>
 80072c8:	6863      	ldr	r3, [r4, #4]
 80072ca:	4299      	cmp	r1, r3
 80072cc:	dd41      	ble.n	8007352 <_printf_float+0x1be>
 80072ce:	f1ab 0b02 	sub.w	fp, fp, #2
 80072d2:	fa5f fb8b 	uxtb.w	fp, fp
 80072d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80072da:	d820      	bhi.n	800731e <_printf_float+0x18a>
 80072dc:	3901      	subs	r1, #1
 80072de:	465a      	mov	r2, fp
 80072e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80072e4:	9109      	str	r1, [sp, #36]	; 0x24
 80072e6:	f7ff ff17 	bl	8007118 <__exponent>
 80072ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072ec:	1813      	adds	r3, r2, r0
 80072ee:	2a01      	cmp	r2, #1
 80072f0:	4681      	mov	r9, r0
 80072f2:	6123      	str	r3, [r4, #16]
 80072f4:	dc02      	bgt.n	80072fc <_printf_float+0x168>
 80072f6:	6822      	ldr	r2, [r4, #0]
 80072f8:	07d2      	lsls	r2, r2, #31
 80072fa:	d501      	bpl.n	8007300 <_printf_float+0x16c>
 80072fc:	3301      	adds	r3, #1
 80072fe:	6123      	str	r3, [r4, #16]
 8007300:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007304:	2b00      	cmp	r3, #0
 8007306:	d09c      	beq.n	8007242 <_printf_float+0xae>
 8007308:	232d      	movs	r3, #45	; 0x2d
 800730a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800730e:	e798      	b.n	8007242 <_printf_float+0xae>
 8007310:	9a06      	ldr	r2, [sp, #24]
 8007312:	2a47      	cmp	r2, #71	; 0x47
 8007314:	d1be      	bne.n	8007294 <_printf_float+0x100>
 8007316:	2b00      	cmp	r3, #0
 8007318:	d1bc      	bne.n	8007294 <_printf_float+0x100>
 800731a:	2301      	movs	r3, #1
 800731c:	e7b9      	b.n	8007292 <_printf_float+0xfe>
 800731e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007322:	d118      	bne.n	8007356 <_printf_float+0x1c2>
 8007324:	2900      	cmp	r1, #0
 8007326:	6863      	ldr	r3, [r4, #4]
 8007328:	dd0b      	ble.n	8007342 <_printf_float+0x1ae>
 800732a:	6121      	str	r1, [r4, #16]
 800732c:	b913      	cbnz	r3, 8007334 <_printf_float+0x1a0>
 800732e:	6822      	ldr	r2, [r4, #0]
 8007330:	07d0      	lsls	r0, r2, #31
 8007332:	d502      	bpl.n	800733a <_printf_float+0x1a6>
 8007334:	3301      	adds	r3, #1
 8007336:	440b      	add	r3, r1
 8007338:	6123      	str	r3, [r4, #16]
 800733a:	65a1      	str	r1, [r4, #88]	; 0x58
 800733c:	f04f 0900 	mov.w	r9, #0
 8007340:	e7de      	b.n	8007300 <_printf_float+0x16c>
 8007342:	b913      	cbnz	r3, 800734a <_printf_float+0x1b6>
 8007344:	6822      	ldr	r2, [r4, #0]
 8007346:	07d2      	lsls	r2, r2, #31
 8007348:	d501      	bpl.n	800734e <_printf_float+0x1ba>
 800734a:	3302      	adds	r3, #2
 800734c:	e7f4      	b.n	8007338 <_printf_float+0x1a4>
 800734e:	2301      	movs	r3, #1
 8007350:	e7f2      	b.n	8007338 <_printf_float+0x1a4>
 8007352:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007358:	4299      	cmp	r1, r3
 800735a:	db05      	blt.n	8007368 <_printf_float+0x1d4>
 800735c:	6823      	ldr	r3, [r4, #0]
 800735e:	6121      	str	r1, [r4, #16]
 8007360:	07d8      	lsls	r0, r3, #31
 8007362:	d5ea      	bpl.n	800733a <_printf_float+0x1a6>
 8007364:	1c4b      	adds	r3, r1, #1
 8007366:	e7e7      	b.n	8007338 <_printf_float+0x1a4>
 8007368:	2900      	cmp	r1, #0
 800736a:	bfd4      	ite	le
 800736c:	f1c1 0202 	rsble	r2, r1, #2
 8007370:	2201      	movgt	r2, #1
 8007372:	4413      	add	r3, r2
 8007374:	e7e0      	b.n	8007338 <_printf_float+0x1a4>
 8007376:	6823      	ldr	r3, [r4, #0]
 8007378:	055a      	lsls	r2, r3, #21
 800737a:	d407      	bmi.n	800738c <_printf_float+0x1f8>
 800737c:	6923      	ldr	r3, [r4, #16]
 800737e:	4642      	mov	r2, r8
 8007380:	4631      	mov	r1, r6
 8007382:	4628      	mov	r0, r5
 8007384:	47b8      	blx	r7
 8007386:	3001      	adds	r0, #1
 8007388:	d12c      	bne.n	80073e4 <_printf_float+0x250>
 800738a:	e764      	b.n	8007256 <_printf_float+0xc2>
 800738c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007390:	f240 80e0 	bls.w	8007554 <_printf_float+0x3c0>
 8007394:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007398:	2200      	movs	r2, #0
 800739a:	2300      	movs	r3, #0
 800739c:	f7f9 fbb4 	bl	8000b08 <__aeabi_dcmpeq>
 80073a0:	2800      	cmp	r0, #0
 80073a2:	d034      	beq.n	800740e <_printf_float+0x27a>
 80073a4:	4a37      	ldr	r2, [pc, #220]	; (8007484 <_printf_float+0x2f0>)
 80073a6:	2301      	movs	r3, #1
 80073a8:	4631      	mov	r1, r6
 80073aa:	4628      	mov	r0, r5
 80073ac:	47b8      	blx	r7
 80073ae:	3001      	adds	r0, #1
 80073b0:	f43f af51 	beq.w	8007256 <_printf_float+0xc2>
 80073b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073b8:	429a      	cmp	r2, r3
 80073ba:	db02      	blt.n	80073c2 <_printf_float+0x22e>
 80073bc:	6823      	ldr	r3, [r4, #0]
 80073be:	07d8      	lsls	r0, r3, #31
 80073c0:	d510      	bpl.n	80073e4 <_printf_float+0x250>
 80073c2:	ee18 3a10 	vmov	r3, s16
 80073c6:	4652      	mov	r2, sl
 80073c8:	4631      	mov	r1, r6
 80073ca:	4628      	mov	r0, r5
 80073cc:	47b8      	blx	r7
 80073ce:	3001      	adds	r0, #1
 80073d0:	f43f af41 	beq.w	8007256 <_printf_float+0xc2>
 80073d4:	f04f 0800 	mov.w	r8, #0
 80073d8:	f104 091a 	add.w	r9, r4, #26
 80073dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073de:	3b01      	subs	r3, #1
 80073e0:	4543      	cmp	r3, r8
 80073e2:	dc09      	bgt.n	80073f8 <_printf_float+0x264>
 80073e4:	6823      	ldr	r3, [r4, #0]
 80073e6:	079b      	lsls	r3, r3, #30
 80073e8:	f100 8105 	bmi.w	80075f6 <_printf_float+0x462>
 80073ec:	68e0      	ldr	r0, [r4, #12]
 80073ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073f0:	4298      	cmp	r0, r3
 80073f2:	bfb8      	it	lt
 80073f4:	4618      	movlt	r0, r3
 80073f6:	e730      	b.n	800725a <_printf_float+0xc6>
 80073f8:	2301      	movs	r3, #1
 80073fa:	464a      	mov	r2, r9
 80073fc:	4631      	mov	r1, r6
 80073fe:	4628      	mov	r0, r5
 8007400:	47b8      	blx	r7
 8007402:	3001      	adds	r0, #1
 8007404:	f43f af27 	beq.w	8007256 <_printf_float+0xc2>
 8007408:	f108 0801 	add.w	r8, r8, #1
 800740c:	e7e6      	b.n	80073dc <_printf_float+0x248>
 800740e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007410:	2b00      	cmp	r3, #0
 8007412:	dc39      	bgt.n	8007488 <_printf_float+0x2f4>
 8007414:	4a1b      	ldr	r2, [pc, #108]	; (8007484 <_printf_float+0x2f0>)
 8007416:	2301      	movs	r3, #1
 8007418:	4631      	mov	r1, r6
 800741a:	4628      	mov	r0, r5
 800741c:	47b8      	blx	r7
 800741e:	3001      	adds	r0, #1
 8007420:	f43f af19 	beq.w	8007256 <_printf_float+0xc2>
 8007424:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007428:	4313      	orrs	r3, r2
 800742a:	d102      	bne.n	8007432 <_printf_float+0x29e>
 800742c:	6823      	ldr	r3, [r4, #0]
 800742e:	07d9      	lsls	r1, r3, #31
 8007430:	d5d8      	bpl.n	80073e4 <_printf_float+0x250>
 8007432:	ee18 3a10 	vmov	r3, s16
 8007436:	4652      	mov	r2, sl
 8007438:	4631      	mov	r1, r6
 800743a:	4628      	mov	r0, r5
 800743c:	47b8      	blx	r7
 800743e:	3001      	adds	r0, #1
 8007440:	f43f af09 	beq.w	8007256 <_printf_float+0xc2>
 8007444:	f04f 0900 	mov.w	r9, #0
 8007448:	f104 0a1a 	add.w	sl, r4, #26
 800744c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800744e:	425b      	negs	r3, r3
 8007450:	454b      	cmp	r3, r9
 8007452:	dc01      	bgt.n	8007458 <_printf_float+0x2c4>
 8007454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007456:	e792      	b.n	800737e <_printf_float+0x1ea>
 8007458:	2301      	movs	r3, #1
 800745a:	4652      	mov	r2, sl
 800745c:	4631      	mov	r1, r6
 800745e:	4628      	mov	r0, r5
 8007460:	47b8      	blx	r7
 8007462:	3001      	adds	r0, #1
 8007464:	f43f aef7 	beq.w	8007256 <_printf_float+0xc2>
 8007468:	f109 0901 	add.w	r9, r9, #1
 800746c:	e7ee      	b.n	800744c <_printf_float+0x2b8>
 800746e:	bf00      	nop
 8007470:	7fefffff 	.word	0x7fefffff
 8007474:	08009ab4 	.word	0x08009ab4
 8007478:	08009ab8 	.word	0x08009ab8
 800747c:	08009ac0 	.word	0x08009ac0
 8007480:	08009abc 	.word	0x08009abc
 8007484:	08009ac4 	.word	0x08009ac4
 8007488:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800748a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800748c:	429a      	cmp	r2, r3
 800748e:	bfa8      	it	ge
 8007490:	461a      	movge	r2, r3
 8007492:	2a00      	cmp	r2, #0
 8007494:	4691      	mov	r9, r2
 8007496:	dc37      	bgt.n	8007508 <_printf_float+0x374>
 8007498:	f04f 0b00 	mov.w	fp, #0
 800749c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074a0:	f104 021a 	add.w	r2, r4, #26
 80074a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80074a6:	9305      	str	r3, [sp, #20]
 80074a8:	eba3 0309 	sub.w	r3, r3, r9
 80074ac:	455b      	cmp	r3, fp
 80074ae:	dc33      	bgt.n	8007518 <_printf_float+0x384>
 80074b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074b4:	429a      	cmp	r2, r3
 80074b6:	db3b      	blt.n	8007530 <_printf_float+0x39c>
 80074b8:	6823      	ldr	r3, [r4, #0]
 80074ba:	07da      	lsls	r2, r3, #31
 80074bc:	d438      	bmi.n	8007530 <_printf_float+0x39c>
 80074be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074c0:	9a05      	ldr	r2, [sp, #20]
 80074c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074c4:	1a9a      	subs	r2, r3, r2
 80074c6:	eba3 0901 	sub.w	r9, r3, r1
 80074ca:	4591      	cmp	r9, r2
 80074cc:	bfa8      	it	ge
 80074ce:	4691      	movge	r9, r2
 80074d0:	f1b9 0f00 	cmp.w	r9, #0
 80074d4:	dc35      	bgt.n	8007542 <_printf_float+0x3ae>
 80074d6:	f04f 0800 	mov.w	r8, #0
 80074da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074de:	f104 0a1a 	add.w	sl, r4, #26
 80074e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074e6:	1a9b      	subs	r3, r3, r2
 80074e8:	eba3 0309 	sub.w	r3, r3, r9
 80074ec:	4543      	cmp	r3, r8
 80074ee:	f77f af79 	ble.w	80073e4 <_printf_float+0x250>
 80074f2:	2301      	movs	r3, #1
 80074f4:	4652      	mov	r2, sl
 80074f6:	4631      	mov	r1, r6
 80074f8:	4628      	mov	r0, r5
 80074fa:	47b8      	blx	r7
 80074fc:	3001      	adds	r0, #1
 80074fe:	f43f aeaa 	beq.w	8007256 <_printf_float+0xc2>
 8007502:	f108 0801 	add.w	r8, r8, #1
 8007506:	e7ec      	b.n	80074e2 <_printf_float+0x34e>
 8007508:	4613      	mov	r3, r2
 800750a:	4631      	mov	r1, r6
 800750c:	4642      	mov	r2, r8
 800750e:	4628      	mov	r0, r5
 8007510:	47b8      	blx	r7
 8007512:	3001      	adds	r0, #1
 8007514:	d1c0      	bne.n	8007498 <_printf_float+0x304>
 8007516:	e69e      	b.n	8007256 <_printf_float+0xc2>
 8007518:	2301      	movs	r3, #1
 800751a:	4631      	mov	r1, r6
 800751c:	4628      	mov	r0, r5
 800751e:	9205      	str	r2, [sp, #20]
 8007520:	47b8      	blx	r7
 8007522:	3001      	adds	r0, #1
 8007524:	f43f ae97 	beq.w	8007256 <_printf_float+0xc2>
 8007528:	9a05      	ldr	r2, [sp, #20]
 800752a:	f10b 0b01 	add.w	fp, fp, #1
 800752e:	e7b9      	b.n	80074a4 <_printf_float+0x310>
 8007530:	ee18 3a10 	vmov	r3, s16
 8007534:	4652      	mov	r2, sl
 8007536:	4631      	mov	r1, r6
 8007538:	4628      	mov	r0, r5
 800753a:	47b8      	blx	r7
 800753c:	3001      	adds	r0, #1
 800753e:	d1be      	bne.n	80074be <_printf_float+0x32a>
 8007540:	e689      	b.n	8007256 <_printf_float+0xc2>
 8007542:	9a05      	ldr	r2, [sp, #20]
 8007544:	464b      	mov	r3, r9
 8007546:	4442      	add	r2, r8
 8007548:	4631      	mov	r1, r6
 800754a:	4628      	mov	r0, r5
 800754c:	47b8      	blx	r7
 800754e:	3001      	adds	r0, #1
 8007550:	d1c1      	bne.n	80074d6 <_printf_float+0x342>
 8007552:	e680      	b.n	8007256 <_printf_float+0xc2>
 8007554:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007556:	2a01      	cmp	r2, #1
 8007558:	dc01      	bgt.n	800755e <_printf_float+0x3ca>
 800755a:	07db      	lsls	r3, r3, #31
 800755c:	d538      	bpl.n	80075d0 <_printf_float+0x43c>
 800755e:	2301      	movs	r3, #1
 8007560:	4642      	mov	r2, r8
 8007562:	4631      	mov	r1, r6
 8007564:	4628      	mov	r0, r5
 8007566:	47b8      	blx	r7
 8007568:	3001      	adds	r0, #1
 800756a:	f43f ae74 	beq.w	8007256 <_printf_float+0xc2>
 800756e:	ee18 3a10 	vmov	r3, s16
 8007572:	4652      	mov	r2, sl
 8007574:	4631      	mov	r1, r6
 8007576:	4628      	mov	r0, r5
 8007578:	47b8      	blx	r7
 800757a:	3001      	adds	r0, #1
 800757c:	f43f ae6b 	beq.w	8007256 <_printf_float+0xc2>
 8007580:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007584:	2200      	movs	r2, #0
 8007586:	2300      	movs	r3, #0
 8007588:	f7f9 fabe 	bl	8000b08 <__aeabi_dcmpeq>
 800758c:	b9d8      	cbnz	r0, 80075c6 <_printf_float+0x432>
 800758e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007590:	f108 0201 	add.w	r2, r8, #1
 8007594:	3b01      	subs	r3, #1
 8007596:	4631      	mov	r1, r6
 8007598:	4628      	mov	r0, r5
 800759a:	47b8      	blx	r7
 800759c:	3001      	adds	r0, #1
 800759e:	d10e      	bne.n	80075be <_printf_float+0x42a>
 80075a0:	e659      	b.n	8007256 <_printf_float+0xc2>
 80075a2:	2301      	movs	r3, #1
 80075a4:	4652      	mov	r2, sl
 80075a6:	4631      	mov	r1, r6
 80075a8:	4628      	mov	r0, r5
 80075aa:	47b8      	blx	r7
 80075ac:	3001      	adds	r0, #1
 80075ae:	f43f ae52 	beq.w	8007256 <_printf_float+0xc2>
 80075b2:	f108 0801 	add.w	r8, r8, #1
 80075b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075b8:	3b01      	subs	r3, #1
 80075ba:	4543      	cmp	r3, r8
 80075bc:	dcf1      	bgt.n	80075a2 <_printf_float+0x40e>
 80075be:	464b      	mov	r3, r9
 80075c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80075c4:	e6dc      	b.n	8007380 <_printf_float+0x1ec>
 80075c6:	f04f 0800 	mov.w	r8, #0
 80075ca:	f104 0a1a 	add.w	sl, r4, #26
 80075ce:	e7f2      	b.n	80075b6 <_printf_float+0x422>
 80075d0:	2301      	movs	r3, #1
 80075d2:	4642      	mov	r2, r8
 80075d4:	e7df      	b.n	8007596 <_printf_float+0x402>
 80075d6:	2301      	movs	r3, #1
 80075d8:	464a      	mov	r2, r9
 80075da:	4631      	mov	r1, r6
 80075dc:	4628      	mov	r0, r5
 80075de:	47b8      	blx	r7
 80075e0:	3001      	adds	r0, #1
 80075e2:	f43f ae38 	beq.w	8007256 <_printf_float+0xc2>
 80075e6:	f108 0801 	add.w	r8, r8, #1
 80075ea:	68e3      	ldr	r3, [r4, #12]
 80075ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80075ee:	1a5b      	subs	r3, r3, r1
 80075f0:	4543      	cmp	r3, r8
 80075f2:	dcf0      	bgt.n	80075d6 <_printf_float+0x442>
 80075f4:	e6fa      	b.n	80073ec <_printf_float+0x258>
 80075f6:	f04f 0800 	mov.w	r8, #0
 80075fa:	f104 0919 	add.w	r9, r4, #25
 80075fe:	e7f4      	b.n	80075ea <_printf_float+0x456>

08007600 <_printf_common>:
 8007600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007604:	4616      	mov	r6, r2
 8007606:	4699      	mov	r9, r3
 8007608:	688a      	ldr	r2, [r1, #8]
 800760a:	690b      	ldr	r3, [r1, #16]
 800760c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007610:	4293      	cmp	r3, r2
 8007612:	bfb8      	it	lt
 8007614:	4613      	movlt	r3, r2
 8007616:	6033      	str	r3, [r6, #0]
 8007618:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800761c:	4607      	mov	r7, r0
 800761e:	460c      	mov	r4, r1
 8007620:	b10a      	cbz	r2, 8007626 <_printf_common+0x26>
 8007622:	3301      	adds	r3, #1
 8007624:	6033      	str	r3, [r6, #0]
 8007626:	6823      	ldr	r3, [r4, #0]
 8007628:	0699      	lsls	r1, r3, #26
 800762a:	bf42      	ittt	mi
 800762c:	6833      	ldrmi	r3, [r6, #0]
 800762e:	3302      	addmi	r3, #2
 8007630:	6033      	strmi	r3, [r6, #0]
 8007632:	6825      	ldr	r5, [r4, #0]
 8007634:	f015 0506 	ands.w	r5, r5, #6
 8007638:	d106      	bne.n	8007648 <_printf_common+0x48>
 800763a:	f104 0a19 	add.w	sl, r4, #25
 800763e:	68e3      	ldr	r3, [r4, #12]
 8007640:	6832      	ldr	r2, [r6, #0]
 8007642:	1a9b      	subs	r3, r3, r2
 8007644:	42ab      	cmp	r3, r5
 8007646:	dc26      	bgt.n	8007696 <_printf_common+0x96>
 8007648:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800764c:	1e13      	subs	r3, r2, #0
 800764e:	6822      	ldr	r2, [r4, #0]
 8007650:	bf18      	it	ne
 8007652:	2301      	movne	r3, #1
 8007654:	0692      	lsls	r2, r2, #26
 8007656:	d42b      	bmi.n	80076b0 <_printf_common+0xb0>
 8007658:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800765c:	4649      	mov	r1, r9
 800765e:	4638      	mov	r0, r7
 8007660:	47c0      	blx	r8
 8007662:	3001      	adds	r0, #1
 8007664:	d01e      	beq.n	80076a4 <_printf_common+0xa4>
 8007666:	6823      	ldr	r3, [r4, #0]
 8007668:	68e5      	ldr	r5, [r4, #12]
 800766a:	6832      	ldr	r2, [r6, #0]
 800766c:	f003 0306 	and.w	r3, r3, #6
 8007670:	2b04      	cmp	r3, #4
 8007672:	bf08      	it	eq
 8007674:	1aad      	subeq	r5, r5, r2
 8007676:	68a3      	ldr	r3, [r4, #8]
 8007678:	6922      	ldr	r2, [r4, #16]
 800767a:	bf0c      	ite	eq
 800767c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007680:	2500      	movne	r5, #0
 8007682:	4293      	cmp	r3, r2
 8007684:	bfc4      	itt	gt
 8007686:	1a9b      	subgt	r3, r3, r2
 8007688:	18ed      	addgt	r5, r5, r3
 800768a:	2600      	movs	r6, #0
 800768c:	341a      	adds	r4, #26
 800768e:	42b5      	cmp	r5, r6
 8007690:	d11a      	bne.n	80076c8 <_printf_common+0xc8>
 8007692:	2000      	movs	r0, #0
 8007694:	e008      	b.n	80076a8 <_printf_common+0xa8>
 8007696:	2301      	movs	r3, #1
 8007698:	4652      	mov	r2, sl
 800769a:	4649      	mov	r1, r9
 800769c:	4638      	mov	r0, r7
 800769e:	47c0      	blx	r8
 80076a0:	3001      	adds	r0, #1
 80076a2:	d103      	bne.n	80076ac <_printf_common+0xac>
 80076a4:	f04f 30ff 	mov.w	r0, #4294967295
 80076a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ac:	3501      	adds	r5, #1
 80076ae:	e7c6      	b.n	800763e <_printf_common+0x3e>
 80076b0:	18e1      	adds	r1, r4, r3
 80076b2:	1c5a      	adds	r2, r3, #1
 80076b4:	2030      	movs	r0, #48	; 0x30
 80076b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076ba:	4422      	add	r2, r4
 80076bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076c4:	3302      	adds	r3, #2
 80076c6:	e7c7      	b.n	8007658 <_printf_common+0x58>
 80076c8:	2301      	movs	r3, #1
 80076ca:	4622      	mov	r2, r4
 80076cc:	4649      	mov	r1, r9
 80076ce:	4638      	mov	r0, r7
 80076d0:	47c0      	blx	r8
 80076d2:	3001      	adds	r0, #1
 80076d4:	d0e6      	beq.n	80076a4 <_printf_common+0xa4>
 80076d6:	3601      	adds	r6, #1
 80076d8:	e7d9      	b.n	800768e <_printf_common+0x8e>
	...

080076dc <_printf_i>:
 80076dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076e0:	7e0f      	ldrb	r7, [r1, #24]
 80076e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80076e4:	2f78      	cmp	r7, #120	; 0x78
 80076e6:	4691      	mov	r9, r2
 80076e8:	4680      	mov	r8, r0
 80076ea:	460c      	mov	r4, r1
 80076ec:	469a      	mov	sl, r3
 80076ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80076f2:	d807      	bhi.n	8007704 <_printf_i+0x28>
 80076f4:	2f62      	cmp	r7, #98	; 0x62
 80076f6:	d80a      	bhi.n	800770e <_printf_i+0x32>
 80076f8:	2f00      	cmp	r7, #0
 80076fa:	f000 80d8 	beq.w	80078ae <_printf_i+0x1d2>
 80076fe:	2f58      	cmp	r7, #88	; 0x58
 8007700:	f000 80a3 	beq.w	800784a <_printf_i+0x16e>
 8007704:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007708:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800770c:	e03a      	b.n	8007784 <_printf_i+0xa8>
 800770e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007712:	2b15      	cmp	r3, #21
 8007714:	d8f6      	bhi.n	8007704 <_printf_i+0x28>
 8007716:	a101      	add	r1, pc, #4	; (adr r1, 800771c <_printf_i+0x40>)
 8007718:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800771c:	08007775 	.word	0x08007775
 8007720:	08007789 	.word	0x08007789
 8007724:	08007705 	.word	0x08007705
 8007728:	08007705 	.word	0x08007705
 800772c:	08007705 	.word	0x08007705
 8007730:	08007705 	.word	0x08007705
 8007734:	08007789 	.word	0x08007789
 8007738:	08007705 	.word	0x08007705
 800773c:	08007705 	.word	0x08007705
 8007740:	08007705 	.word	0x08007705
 8007744:	08007705 	.word	0x08007705
 8007748:	08007895 	.word	0x08007895
 800774c:	080077b9 	.word	0x080077b9
 8007750:	08007877 	.word	0x08007877
 8007754:	08007705 	.word	0x08007705
 8007758:	08007705 	.word	0x08007705
 800775c:	080078b7 	.word	0x080078b7
 8007760:	08007705 	.word	0x08007705
 8007764:	080077b9 	.word	0x080077b9
 8007768:	08007705 	.word	0x08007705
 800776c:	08007705 	.word	0x08007705
 8007770:	0800787f 	.word	0x0800787f
 8007774:	682b      	ldr	r3, [r5, #0]
 8007776:	1d1a      	adds	r2, r3, #4
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	602a      	str	r2, [r5, #0]
 800777c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007780:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007784:	2301      	movs	r3, #1
 8007786:	e0a3      	b.n	80078d0 <_printf_i+0x1f4>
 8007788:	6820      	ldr	r0, [r4, #0]
 800778a:	6829      	ldr	r1, [r5, #0]
 800778c:	0606      	lsls	r6, r0, #24
 800778e:	f101 0304 	add.w	r3, r1, #4
 8007792:	d50a      	bpl.n	80077aa <_printf_i+0xce>
 8007794:	680e      	ldr	r6, [r1, #0]
 8007796:	602b      	str	r3, [r5, #0]
 8007798:	2e00      	cmp	r6, #0
 800779a:	da03      	bge.n	80077a4 <_printf_i+0xc8>
 800779c:	232d      	movs	r3, #45	; 0x2d
 800779e:	4276      	negs	r6, r6
 80077a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077a4:	485e      	ldr	r0, [pc, #376]	; (8007920 <_printf_i+0x244>)
 80077a6:	230a      	movs	r3, #10
 80077a8:	e019      	b.n	80077de <_printf_i+0x102>
 80077aa:	680e      	ldr	r6, [r1, #0]
 80077ac:	602b      	str	r3, [r5, #0]
 80077ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80077b2:	bf18      	it	ne
 80077b4:	b236      	sxthne	r6, r6
 80077b6:	e7ef      	b.n	8007798 <_printf_i+0xbc>
 80077b8:	682b      	ldr	r3, [r5, #0]
 80077ba:	6820      	ldr	r0, [r4, #0]
 80077bc:	1d19      	adds	r1, r3, #4
 80077be:	6029      	str	r1, [r5, #0]
 80077c0:	0601      	lsls	r1, r0, #24
 80077c2:	d501      	bpl.n	80077c8 <_printf_i+0xec>
 80077c4:	681e      	ldr	r6, [r3, #0]
 80077c6:	e002      	b.n	80077ce <_printf_i+0xf2>
 80077c8:	0646      	lsls	r6, r0, #25
 80077ca:	d5fb      	bpl.n	80077c4 <_printf_i+0xe8>
 80077cc:	881e      	ldrh	r6, [r3, #0]
 80077ce:	4854      	ldr	r0, [pc, #336]	; (8007920 <_printf_i+0x244>)
 80077d0:	2f6f      	cmp	r7, #111	; 0x6f
 80077d2:	bf0c      	ite	eq
 80077d4:	2308      	moveq	r3, #8
 80077d6:	230a      	movne	r3, #10
 80077d8:	2100      	movs	r1, #0
 80077da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80077de:	6865      	ldr	r5, [r4, #4]
 80077e0:	60a5      	str	r5, [r4, #8]
 80077e2:	2d00      	cmp	r5, #0
 80077e4:	bfa2      	ittt	ge
 80077e6:	6821      	ldrge	r1, [r4, #0]
 80077e8:	f021 0104 	bicge.w	r1, r1, #4
 80077ec:	6021      	strge	r1, [r4, #0]
 80077ee:	b90e      	cbnz	r6, 80077f4 <_printf_i+0x118>
 80077f0:	2d00      	cmp	r5, #0
 80077f2:	d04d      	beq.n	8007890 <_printf_i+0x1b4>
 80077f4:	4615      	mov	r5, r2
 80077f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80077fa:	fb03 6711 	mls	r7, r3, r1, r6
 80077fe:	5dc7      	ldrb	r7, [r0, r7]
 8007800:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007804:	4637      	mov	r7, r6
 8007806:	42bb      	cmp	r3, r7
 8007808:	460e      	mov	r6, r1
 800780a:	d9f4      	bls.n	80077f6 <_printf_i+0x11a>
 800780c:	2b08      	cmp	r3, #8
 800780e:	d10b      	bne.n	8007828 <_printf_i+0x14c>
 8007810:	6823      	ldr	r3, [r4, #0]
 8007812:	07de      	lsls	r6, r3, #31
 8007814:	d508      	bpl.n	8007828 <_printf_i+0x14c>
 8007816:	6923      	ldr	r3, [r4, #16]
 8007818:	6861      	ldr	r1, [r4, #4]
 800781a:	4299      	cmp	r1, r3
 800781c:	bfde      	ittt	le
 800781e:	2330      	movle	r3, #48	; 0x30
 8007820:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007824:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007828:	1b52      	subs	r2, r2, r5
 800782a:	6122      	str	r2, [r4, #16]
 800782c:	f8cd a000 	str.w	sl, [sp]
 8007830:	464b      	mov	r3, r9
 8007832:	aa03      	add	r2, sp, #12
 8007834:	4621      	mov	r1, r4
 8007836:	4640      	mov	r0, r8
 8007838:	f7ff fee2 	bl	8007600 <_printf_common>
 800783c:	3001      	adds	r0, #1
 800783e:	d14c      	bne.n	80078da <_printf_i+0x1fe>
 8007840:	f04f 30ff 	mov.w	r0, #4294967295
 8007844:	b004      	add	sp, #16
 8007846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800784a:	4835      	ldr	r0, [pc, #212]	; (8007920 <_printf_i+0x244>)
 800784c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007850:	6829      	ldr	r1, [r5, #0]
 8007852:	6823      	ldr	r3, [r4, #0]
 8007854:	f851 6b04 	ldr.w	r6, [r1], #4
 8007858:	6029      	str	r1, [r5, #0]
 800785a:	061d      	lsls	r5, r3, #24
 800785c:	d514      	bpl.n	8007888 <_printf_i+0x1ac>
 800785e:	07df      	lsls	r7, r3, #31
 8007860:	bf44      	itt	mi
 8007862:	f043 0320 	orrmi.w	r3, r3, #32
 8007866:	6023      	strmi	r3, [r4, #0]
 8007868:	b91e      	cbnz	r6, 8007872 <_printf_i+0x196>
 800786a:	6823      	ldr	r3, [r4, #0]
 800786c:	f023 0320 	bic.w	r3, r3, #32
 8007870:	6023      	str	r3, [r4, #0]
 8007872:	2310      	movs	r3, #16
 8007874:	e7b0      	b.n	80077d8 <_printf_i+0xfc>
 8007876:	6823      	ldr	r3, [r4, #0]
 8007878:	f043 0320 	orr.w	r3, r3, #32
 800787c:	6023      	str	r3, [r4, #0]
 800787e:	2378      	movs	r3, #120	; 0x78
 8007880:	4828      	ldr	r0, [pc, #160]	; (8007924 <_printf_i+0x248>)
 8007882:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007886:	e7e3      	b.n	8007850 <_printf_i+0x174>
 8007888:	0659      	lsls	r1, r3, #25
 800788a:	bf48      	it	mi
 800788c:	b2b6      	uxthmi	r6, r6
 800788e:	e7e6      	b.n	800785e <_printf_i+0x182>
 8007890:	4615      	mov	r5, r2
 8007892:	e7bb      	b.n	800780c <_printf_i+0x130>
 8007894:	682b      	ldr	r3, [r5, #0]
 8007896:	6826      	ldr	r6, [r4, #0]
 8007898:	6961      	ldr	r1, [r4, #20]
 800789a:	1d18      	adds	r0, r3, #4
 800789c:	6028      	str	r0, [r5, #0]
 800789e:	0635      	lsls	r5, r6, #24
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	d501      	bpl.n	80078a8 <_printf_i+0x1cc>
 80078a4:	6019      	str	r1, [r3, #0]
 80078a6:	e002      	b.n	80078ae <_printf_i+0x1d2>
 80078a8:	0670      	lsls	r0, r6, #25
 80078aa:	d5fb      	bpl.n	80078a4 <_printf_i+0x1c8>
 80078ac:	8019      	strh	r1, [r3, #0]
 80078ae:	2300      	movs	r3, #0
 80078b0:	6123      	str	r3, [r4, #16]
 80078b2:	4615      	mov	r5, r2
 80078b4:	e7ba      	b.n	800782c <_printf_i+0x150>
 80078b6:	682b      	ldr	r3, [r5, #0]
 80078b8:	1d1a      	adds	r2, r3, #4
 80078ba:	602a      	str	r2, [r5, #0]
 80078bc:	681d      	ldr	r5, [r3, #0]
 80078be:	6862      	ldr	r2, [r4, #4]
 80078c0:	2100      	movs	r1, #0
 80078c2:	4628      	mov	r0, r5
 80078c4:	f7f8 fcac 	bl	8000220 <memchr>
 80078c8:	b108      	cbz	r0, 80078ce <_printf_i+0x1f2>
 80078ca:	1b40      	subs	r0, r0, r5
 80078cc:	6060      	str	r0, [r4, #4]
 80078ce:	6863      	ldr	r3, [r4, #4]
 80078d0:	6123      	str	r3, [r4, #16]
 80078d2:	2300      	movs	r3, #0
 80078d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078d8:	e7a8      	b.n	800782c <_printf_i+0x150>
 80078da:	6923      	ldr	r3, [r4, #16]
 80078dc:	462a      	mov	r2, r5
 80078de:	4649      	mov	r1, r9
 80078e0:	4640      	mov	r0, r8
 80078e2:	47d0      	blx	sl
 80078e4:	3001      	adds	r0, #1
 80078e6:	d0ab      	beq.n	8007840 <_printf_i+0x164>
 80078e8:	6823      	ldr	r3, [r4, #0]
 80078ea:	079b      	lsls	r3, r3, #30
 80078ec:	d413      	bmi.n	8007916 <_printf_i+0x23a>
 80078ee:	68e0      	ldr	r0, [r4, #12]
 80078f0:	9b03      	ldr	r3, [sp, #12]
 80078f2:	4298      	cmp	r0, r3
 80078f4:	bfb8      	it	lt
 80078f6:	4618      	movlt	r0, r3
 80078f8:	e7a4      	b.n	8007844 <_printf_i+0x168>
 80078fa:	2301      	movs	r3, #1
 80078fc:	4632      	mov	r2, r6
 80078fe:	4649      	mov	r1, r9
 8007900:	4640      	mov	r0, r8
 8007902:	47d0      	blx	sl
 8007904:	3001      	adds	r0, #1
 8007906:	d09b      	beq.n	8007840 <_printf_i+0x164>
 8007908:	3501      	adds	r5, #1
 800790a:	68e3      	ldr	r3, [r4, #12]
 800790c:	9903      	ldr	r1, [sp, #12]
 800790e:	1a5b      	subs	r3, r3, r1
 8007910:	42ab      	cmp	r3, r5
 8007912:	dcf2      	bgt.n	80078fa <_printf_i+0x21e>
 8007914:	e7eb      	b.n	80078ee <_printf_i+0x212>
 8007916:	2500      	movs	r5, #0
 8007918:	f104 0619 	add.w	r6, r4, #25
 800791c:	e7f5      	b.n	800790a <_printf_i+0x22e>
 800791e:	bf00      	nop
 8007920:	08009ac6 	.word	0x08009ac6
 8007924:	08009ad7 	.word	0x08009ad7

08007928 <quorem>:
 8007928:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800792c:	6903      	ldr	r3, [r0, #16]
 800792e:	690c      	ldr	r4, [r1, #16]
 8007930:	42a3      	cmp	r3, r4
 8007932:	4607      	mov	r7, r0
 8007934:	f2c0 8081 	blt.w	8007a3a <quorem+0x112>
 8007938:	3c01      	subs	r4, #1
 800793a:	f101 0814 	add.w	r8, r1, #20
 800793e:	f100 0514 	add.w	r5, r0, #20
 8007942:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007946:	9301      	str	r3, [sp, #4]
 8007948:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800794c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007950:	3301      	adds	r3, #1
 8007952:	429a      	cmp	r2, r3
 8007954:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007958:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800795c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007960:	d331      	bcc.n	80079c6 <quorem+0x9e>
 8007962:	f04f 0e00 	mov.w	lr, #0
 8007966:	4640      	mov	r0, r8
 8007968:	46ac      	mov	ip, r5
 800796a:	46f2      	mov	sl, lr
 800796c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007970:	b293      	uxth	r3, r2
 8007972:	fb06 e303 	mla	r3, r6, r3, lr
 8007976:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800797a:	b29b      	uxth	r3, r3
 800797c:	ebaa 0303 	sub.w	r3, sl, r3
 8007980:	f8dc a000 	ldr.w	sl, [ip]
 8007984:	0c12      	lsrs	r2, r2, #16
 8007986:	fa13 f38a 	uxtah	r3, r3, sl
 800798a:	fb06 e202 	mla	r2, r6, r2, lr
 800798e:	9300      	str	r3, [sp, #0]
 8007990:	9b00      	ldr	r3, [sp, #0]
 8007992:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007996:	b292      	uxth	r2, r2
 8007998:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800799c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079a0:	f8bd 3000 	ldrh.w	r3, [sp]
 80079a4:	4581      	cmp	r9, r0
 80079a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079aa:	f84c 3b04 	str.w	r3, [ip], #4
 80079ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80079b2:	d2db      	bcs.n	800796c <quorem+0x44>
 80079b4:	f855 300b 	ldr.w	r3, [r5, fp]
 80079b8:	b92b      	cbnz	r3, 80079c6 <quorem+0x9e>
 80079ba:	9b01      	ldr	r3, [sp, #4]
 80079bc:	3b04      	subs	r3, #4
 80079be:	429d      	cmp	r5, r3
 80079c0:	461a      	mov	r2, r3
 80079c2:	d32e      	bcc.n	8007a22 <quorem+0xfa>
 80079c4:	613c      	str	r4, [r7, #16]
 80079c6:	4638      	mov	r0, r7
 80079c8:	f001 f8c4 	bl	8008b54 <__mcmp>
 80079cc:	2800      	cmp	r0, #0
 80079ce:	db24      	blt.n	8007a1a <quorem+0xf2>
 80079d0:	3601      	adds	r6, #1
 80079d2:	4628      	mov	r0, r5
 80079d4:	f04f 0c00 	mov.w	ip, #0
 80079d8:	f858 2b04 	ldr.w	r2, [r8], #4
 80079dc:	f8d0 e000 	ldr.w	lr, [r0]
 80079e0:	b293      	uxth	r3, r2
 80079e2:	ebac 0303 	sub.w	r3, ip, r3
 80079e6:	0c12      	lsrs	r2, r2, #16
 80079e8:	fa13 f38e 	uxtah	r3, r3, lr
 80079ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80079f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079fa:	45c1      	cmp	r9, r8
 80079fc:	f840 3b04 	str.w	r3, [r0], #4
 8007a00:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007a04:	d2e8      	bcs.n	80079d8 <quorem+0xb0>
 8007a06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a0e:	b922      	cbnz	r2, 8007a1a <quorem+0xf2>
 8007a10:	3b04      	subs	r3, #4
 8007a12:	429d      	cmp	r5, r3
 8007a14:	461a      	mov	r2, r3
 8007a16:	d30a      	bcc.n	8007a2e <quorem+0x106>
 8007a18:	613c      	str	r4, [r7, #16]
 8007a1a:	4630      	mov	r0, r6
 8007a1c:	b003      	add	sp, #12
 8007a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a22:	6812      	ldr	r2, [r2, #0]
 8007a24:	3b04      	subs	r3, #4
 8007a26:	2a00      	cmp	r2, #0
 8007a28:	d1cc      	bne.n	80079c4 <quorem+0x9c>
 8007a2a:	3c01      	subs	r4, #1
 8007a2c:	e7c7      	b.n	80079be <quorem+0x96>
 8007a2e:	6812      	ldr	r2, [r2, #0]
 8007a30:	3b04      	subs	r3, #4
 8007a32:	2a00      	cmp	r2, #0
 8007a34:	d1f0      	bne.n	8007a18 <quorem+0xf0>
 8007a36:	3c01      	subs	r4, #1
 8007a38:	e7eb      	b.n	8007a12 <quorem+0xea>
 8007a3a:	2000      	movs	r0, #0
 8007a3c:	e7ee      	b.n	8007a1c <quorem+0xf4>
	...

08007a40 <_dtoa_r>:
 8007a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a44:	ed2d 8b04 	vpush	{d8-d9}
 8007a48:	ec57 6b10 	vmov	r6, r7, d0
 8007a4c:	b093      	sub	sp, #76	; 0x4c
 8007a4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007a50:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007a54:	9106      	str	r1, [sp, #24]
 8007a56:	ee10 aa10 	vmov	sl, s0
 8007a5a:	4604      	mov	r4, r0
 8007a5c:	9209      	str	r2, [sp, #36]	; 0x24
 8007a5e:	930c      	str	r3, [sp, #48]	; 0x30
 8007a60:	46bb      	mov	fp, r7
 8007a62:	b975      	cbnz	r5, 8007a82 <_dtoa_r+0x42>
 8007a64:	2010      	movs	r0, #16
 8007a66:	f000 fddd 	bl	8008624 <malloc>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	6260      	str	r0, [r4, #36]	; 0x24
 8007a6e:	b920      	cbnz	r0, 8007a7a <_dtoa_r+0x3a>
 8007a70:	4ba7      	ldr	r3, [pc, #668]	; (8007d10 <_dtoa_r+0x2d0>)
 8007a72:	21ea      	movs	r1, #234	; 0xea
 8007a74:	48a7      	ldr	r0, [pc, #668]	; (8007d14 <_dtoa_r+0x2d4>)
 8007a76:	f001 fa75 	bl	8008f64 <__assert_func>
 8007a7a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007a7e:	6005      	str	r5, [r0, #0]
 8007a80:	60c5      	str	r5, [r0, #12]
 8007a82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a84:	6819      	ldr	r1, [r3, #0]
 8007a86:	b151      	cbz	r1, 8007a9e <_dtoa_r+0x5e>
 8007a88:	685a      	ldr	r2, [r3, #4]
 8007a8a:	604a      	str	r2, [r1, #4]
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	4093      	lsls	r3, r2
 8007a90:	608b      	str	r3, [r1, #8]
 8007a92:	4620      	mov	r0, r4
 8007a94:	f000 fe1c 	bl	80086d0 <_Bfree>
 8007a98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	601a      	str	r2, [r3, #0]
 8007a9e:	1e3b      	subs	r3, r7, #0
 8007aa0:	bfaa      	itet	ge
 8007aa2:	2300      	movge	r3, #0
 8007aa4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007aa8:	f8c8 3000 	strge.w	r3, [r8]
 8007aac:	4b9a      	ldr	r3, [pc, #616]	; (8007d18 <_dtoa_r+0x2d8>)
 8007aae:	bfbc      	itt	lt
 8007ab0:	2201      	movlt	r2, #1
 8007ab2:	f8c8 2000 	strlt.w	r2, [r8]
 8007ab6:	ea33 030b 	bics.w	r3, r3, fp
 8007aba:	d11b      	bne.n	8007af4 <_dtoa_r+0xb4>
 8007abc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007abe:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ac2:	6013      	str	r3, [r2, #0]
 8007ac4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ac8:	4333      	orrs	r3, r6
 8007aca:	f000 8592 	beq.w	80085f2 <_dtoa_r+0xbb2>
 8007ace:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ad0:	b963      	cbnz	r3, 8007aec <_dtoa_r+0xac>
 8007ad2:	4b92      	ldr	r3, [pc, #584]	; (8007d1c <_dtoa_r+0x2dc>)
 8007ad4:	e022      	b.n	8007b1c <_dtoa_r+0xdc>
 8007ad6:	4b92      	ldr	r3, [pc, #584]	; (8007d20 <_dtoa_r+0x2e0>)
 8007ad8:	9301      	str	r3, [sp, #4]
 8007ada:	3308      	adds	r3, #8
 8007adc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007ade:	6013      	str	r3, [r2, #0]
 8007ae0:	9801      	ldr	r0, [sp, #4]
 8007ae2:	b013      	add	sp, #76	; 0x4c
 8007ae4:	ecbd 8b04 	vpop	{d8-d9}
 8007ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aec:	4b8b      	ldr	r3, [pc, #556]	; (8007d1c <_dtoa_r+0x2dc>)
 8007aee:	9301      	str	r3, [sp, #4]
 8007af0:	3303      	adds	r3, #3
 8007af2:	e7f3      	b.n	8007adc <_dtoa_r+0x9c>
 8007af4:	2200      	movs	r2, #0
 8007af6:	2300      	movs	r3, #0
 8007af8:	4650      	mov	r0, sl
 8007afa:	4659      	mov	r1, fp
 8007afc:	f7f9 f804 	bl	8000b08 <__aeabi_dcmpeq>
 8007b00:	ec4b ab19 	vmov	d9, sl, fp
 8007b04:	4680      	mov	r8, r0
 8007b06:	b158      	cbz	r0, 8007b20 <_dtoa_r+0xe0>
 8007b08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	6013      	str	r3, [r2, #0]
 8007b0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f000 856b 	beq.w	80085ec <_dtoa_r+0xbac>
 8007b16:	4883      	ldr	r0, [pc, #524]	; (8007d24 <_dtoa_r+0x2e4>)
 8007b18:	6018      	str	r0, [r3, #0]
 8007b1a:	1e43      	subs	r3, r0, #1
 8007b1c:	9301      	str	r3, [sp, #4]
 8007b1e:	e7df      	b.n	8007ae0 <_dtoa_r+0xa0>
 8007b20:	ec4b ab10 	vmov	d0, sl, fp
 8007b24:	aa10      	add	r2, sp, #64	; 0x40
 8007b26:	a911      	add	r1, sp, #68	; 0x44
 8007b28:	4620      	mov	r0, r4
 8007b2a:	f001 f8b9 	bl	8008ca0 <__d2b>
 8007b2e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007b32:	ee08 0a10 	vmov	s16, r0
 8007b36:	2d00      	cmp	r5, #0
 8007b38:	f000 8084 	beq.w	8007c44 <_dtoa_r+0x204>
 8007b3c:	ee19 3a90 	vmov	r3, s19
 8007b40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b44:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007b48:	4656      	mov	r6, sl
 8007b4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007b4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007b52:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007b56:	4b74      	ldr	r3, [pc, #464]	; (8007d28 <_dtoa_r+0x2e8>)
 8007b58:	2200      	movs	r2, #0
 8007b5a:	4630      	mov	r0, r6
 8007b5c:	4639      	mov	r1, r7
 8007b5e:	f7f8 fbb3 	bl	80002c8 <__aeabi_dsub>
 8007b62:	a365      	add	r3, pc, #404	; (adr r3, 8007cf8 <_dtoa_r+0x2b8>)
 8007b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b68:	f7f8 fd66 	bl	8000638 <__aeabi_dmul>
 8007b6c:	a364      	add	r3, pc, #400	; (adr r3, 8007d00 <_dtoa_r+0x2c0>)
 8007b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b72:	f7f8 fbab 	bl	80002cc <__adddf3>
 8007b76:	4606      	mov	r6, r0
 8007b78:	4628      	mov	r0, r5
 8007b7a:	460f      	mov	r7, r1
 8007b7c:	f7f8 fcf2 	bl	8000564 <__aeabi_i2d>
 8007b80:	a361      	add	r3, pc, #388	; (adr r3, 8007d08 <_dtoa_r+0x2c8>)
 8007b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b86:	f7f8 fd57 	bl	8000638 <__aeabi_dmul>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	4630      	mov	r0, r6
 8007b90:	4639      	mov	r1, r7
 8007b92:	f7f8 fb9b 	bl	80002cc <__adddf3>
 8007b96:	4606      	mov	r6, r0
 8007b98:	460f      	mov	r7, r1
 8007b9a:	f7f8 fffd 	bl	8000b98 <__aeabi_d2iz>
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	9000      	str	r0, [sp, #0]
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	4630      	mov	r0, r6
 8007ba6:	4639      	mov	r1, r7
 8007ba8:	f7f8 ffb8 	bl	8000b1c <__aeabi_dcmplt>
 8007bac:	b150      	cbz	r0, 8007bc4 <_dtoa_r+0x184>
 8007bae:	9800      	ldr	r0, [sp, #0]
 8007bb0:	f7f8 fcd8 	bl	8000564 <__aeabi_i2d>
 8007bb4:	4632      	mov	r2, r6
 8007bb6:	463b      	mov	r3, r7
 8007bb8:	f7f8 ffa6 	bl	8000b08 <__aeabi_dcmpeq>
 8007bbc:	b910      	cbnz	r0, 8007bc4 <_dtoa_r+0x184>
 8007bbe:	9b00      	ldr	r3, [sp, #0]
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	9300      	str	r3, [sp, #0]
 8007bc4:	9b00      	ldr	r3, [sp, #0]
 8007bc6:	2b16      	cmp	r3, #22
 8007bc8:	d85a      	bhi.n	8007c80 <_dtoa_r+0x240>
 8007bca:	9a00      	ldr	r2, [sp, #0]
 8007bcc:	4b57      	ldr	r3, [pc, #348]	; (8007d2c <_dtoa_r+0x2ec>)
 8007bce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd6:	ec51 0b19 	vmov	r0, r1, d9
 8007bda:	f7f8 ff9f 	bl	8000b1c <__aeabi_dcmplt>
 8007bde:	2800      	cmp	r0, #0
 8007be0:	d050      	beq.n	8007c84 <_dtoa_r+0x244>
 8007be2:	9b00      	ldr	r3, [sp, #0]
 8007be4:	3b01      	subs	r3, #1
 8007be6:	9300      	str	r3, [sp, #0]
 8007be8:	2300      	movs	r3, #0
 8007bea:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007bee:	1b5d      	subs	r5, r3, r5
 8007bf0:	1e6b      	subs	r3, r5, #1
 8007bf2:	9305      	str	r3, [sp, #20]
 8007bf4:	bf45      	ittet	mi
 8007bf6:	f1c5 0301 	rsbmi	r3, r5, #1
 8007bfa:	9304      	strmi	r3, [sp, #16]
 8007bfc:	2300      	movpl	r3, #0
 8007bfe:	2300      	movmi	r3, #0
 8007c00:	bf4c      	ite	mi
 8007c02:	9305      	strmi	r3, [sp, #20]
 8007c04:	9304      	strpl	r3, [sp, #16]
 8007c06:	9b00      	ldr	r3, [sp, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	db3d      	blt.n	8007c88 <_dtoa_r+0x248>
 8007c0c:	9b05      	ldr	r3, [sp, #20]
 8007c0e:	9a00      	ldr	r2, [sp, #0]
 8007c10:	920a      	str	r2, [sp, #40]	; 0x28
 8007c12:	4413      	add	r3, r2
 8007c14:	9305      	str	r3, [sp, #20]
 8007c16:	2300      	movs	r3, #0
 8007c18:	9307      	str	r3, [sp, #28]
 8007c1a:	9b06      	ldr	r3, [sp, #24]
 8007c1c:	2b09      	cmp	r3, #9
 8007c1e:	f200 8089 	bhi.w	8007d34 <_dtoa_r+0x2f4>
 8007c22:	2b05      	cmp	r3, #5
 8007c24:	bfc4      	itt	gt
 8007c26:	3b04      	subgt	r3, #4
 8007c28:	9306      	strgt	r3, [sp, #24]
 8007c2a:	9b06      	ldr	r3, [sp, #24]
 8007c2c:	f1a3 0302 	sub.w	r3, r3, #2
 8007c30:	bfcc      	ite	gt
 8007c32:	2500      	movgt	r5, #0
 8007c34:	2501      	movle	r5, #1
 8007c36:	2b03      	cmp	r3, #3
 8007c38:	f200 8087 	bhi.w	8007d4a <_dtoa_r+0x30a>
 8007c3c:	e8df f003 	tbb	[pc, r3]
 8007c40:	59383a2d 	.word	0x59383a2d
 8007c44:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007c48:	441d      	add	r5, r3
 8007c4a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007c4e:	2b20      	cmp	r3, #32
 8007c50:	bfc1      	itttt	gt
 8007c52:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007c56:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007c5a:	fa0b f303 	lslgt.w	r3, fp, r3
 8007c5e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007c62:	bfda      	itte	le
 8007c64:	f1c3 0320 	rsble	r3, r3, #32
 8007c68:	fa06 f003 	lslle.w	r0, r6, r3
 8007c6c:	4318      	orrgt	r0, r3
 8007c6e:	f7f8 fc69 	bl	8000544 <__aeabi_ui2d>
 8007c72:	2301      	movs	r3, #1
 8007c74:	4606      	mov	r6, r0
 8007c76:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007c7a:	3d01      	subs	r5, #1
 8007c7c:	930e      	str	r3, [sp, #56]	; 0x38
 8007c7e:	e76a      	b.n	8007b56 <_dtoa_r+0x116>
 8007c80:	2301      	movs	r3, #1
 8007c82:	e7b2      	b.n	8007bea <_dtoa_r+0x1aa>
 8007c84:	900b      	str	r0, [sp, #44]	; 0x2c
 8007c86:	e7b1      	b.n	8007bec <_dtoa_r+0x1ac>
 8007c88:	9b04      	ldr	r3, [sp, #16]
 8007c8a:	9a00      	ldr	r2, [sp, #0]
 8007c8c:	1a9b      	subs	r3, r3, r2
 8007c8e:	9304      	str	r3, [sp, #16]
 8007c90:	4253      	negs	r3, r2
 8007c92:	9307      	str	r3, [sp, #28]
 8007c94:	2300      	movs	r3, #0
 8007c96:	930a      	str	r3, [sp, #40]	; 0x28
 8007c98:	e7bf      	b.n	8007c1a <_dtoa_r+0x1da>
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	9308      	str	r3, [sp, #32]
 8007c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	dc55      	bgt.n	8007d50 <_dtoa_r+0x310>
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007caa:	461a      	mov	r2, r3
 8007cac:	9209      	str	r2, [sp, #36]	; 0x24
 8007cae:	e00c      	b.n	8007cca <_dtoa_r+0x28a>
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e7f3      	b.n	8007c9c <_dtoa_r+0x25c>
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cb8:	9308      	str	r3, [sp, #32]
 8007cba:	9b00      	ldr	r3, [sp, #0]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	9302      	str	r3, [sp, #8]
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	9303      	str	r3, [sp, #12]
 8007cc6:	bfb8      	it	lt
 8007cc8:	2301      	movlt	r3, #1
 8007cca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007ccc:	2200      	movs	r2, #0
 8007cce:	6042      	str	r2, [r0, #4]
 8007cd0:	2204      	movs	r2, #4
 8007cd2:	f102 0614 	add.w	r6, r2, #20
 8007cd6:	429e      	cmp	r6, r3
 8007cd8:	6841      	ldr	r1, [r0, #4]
 8007cda:	d93d      	bls.n	8007d58 <_dtoa_r+0x318>
 8007cdc:	4620      	mov	r0, r4
 8007cde:	f000 fcb7 	bl	8008650 <_Balloc>
 8007ce2:	9001      	str	r0, [sp, #4]
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	d13b      	bne.n	8007d60 <_dtoa_r+0x320>
 8007ce8:	4b11      	ldr	r3, [pc, #68]	; (8007d30 <_dtoa_r+0x2f0>)
 8007cea:	4602      	mov	r2, r0
 8007cec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007cf0:	e6c0      	b.n	8007a74 <_dtoa_r+0x34>
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e7df      	b.n	8007cb6 <_dtoa_r+0x276>
 8007cf6:	bf00      	nop
 8007cf8:	636f4361 	.word	0x636f4361
 8007cfc:	3fd287a7 	.word	0x3fd287a7
 8007d00:	8b60c8b3 	.word	0x8b60c8b3
 8007d04:	3fc68a28 	.word	0x3fc68a28
 8007d08:	509f79fb 	.word	0x509f79fb
 8007d0c:	3fd34413 	.word	0x3fd34413
 8007d10:	08009af5 	.word	0x08009af5
 8007d14:	08009b0c 	.word	0x08009b0c
 8007d18:	7ff00000 	.word	0x7ff00000
 8007d1c:	08009af1 	.word	0x08009af1
 8007d20:	08009ae8 	.word	0x08009ae8
 8007d24:	08009ac5 	.word	0x08009ac5
 8007d28:	3ff80000 	.word	0x3ff80000
 8007d2c:	08009c00 	.word	0x08009c00
 8007d30:	08009b67 	.word	0x08009b67
 8007d34:	2501      	movs	r5, #1
 8007d36:	2300      	movs	r3, #0
 8007d38:	9306      	str	r3, [sp, #24]
 8007d3a:	9508      	str	r5, [sp, #32]
 8007d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8007d40:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d44:	2200      	movs	r2, #0
 8007d46:	2312      	movs	r3, #18
 8007d48:	e7b0      	b.n	8007cac <_dtoa_r+0x26c>
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	9308      	str	r3, [sp, #32]
 8007d4e:	e7f5      	b.n	8007d3c <_dtoa_r+0x2fc>
 8007d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d52:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007d56:	e7b8      	b.n	8007cca <_dtoa_r+0x28a>
 8007d58:	3101      	adds	r1, #1
 8007d5a:	6041      	str	r1, [r0, #4]
 8007d5c:	0052      	lsls	r2, r2, #1
 8007d5e:	e7b8      	b.n	8007cd2 <_dtoa_r+0x292>
 8007d60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d62:	9a01      	ldr	r2, [sp, #4]
 8007d64:	601a      	str	r2, [r3, #0]
 8007d66:	9b03      	ldr	r3, [sp, #12]
 8007d68:	2b0e      	cmp	r3, #14
 8007d6a:	f200 809d 	bhi.w	8007ea8 <_dtoa_r+0x468>
 8007d6e:	2d00      	cmp	r5, #0
 8007d70:	f000 809a 	beq.w	8007ea8 <_dtoa_r+0x468>
 8007d74:	9b00      	ldr	r3, [sp, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	dd32      	ble.n	8007de0 <_dtoa_r+0x3a0>
 8007d7a:	4ab7      	ldr	r2, [pc, #732]	; (8008058 <_dtoa_r+0x618>)
 8007d7c:	f003 030f 	and.w	r3, r3, #15
 8007d80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007d84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d88:	9b00      	ldr	r3, [sp, #0]
 8007d8a:	05d8      	lsls	r0, r3, #23
 8007d8c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007d90:	d516      	bpl.n	8007dc0 <_dtoa_r+0x380>
 8007d92:	4bb2      	ldr	r3, [pc, #712]	; (800805c <_dtoa_r+0x61c>)
 8007d94:	ec51 0b19 	vmov	r0, r1, d9
 8007d98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d9c:	f7f8 fd76 	bl	800088c <__aeabi_ddiv>
 8007da0:	f007 070f 	and.w	r7, r7, #15
 8007da4:	4682      	mov	sl, r0
 8007da6:	468b      	mov	fp, r1
 8007da8:	2503      	movs	r5, #3
 8007daa:	4eac      	ldr	r6, [pc, #688]	; (800805c <_dtoa_r+0x61c>)
 8007dac:	b957      	cbnz	r7, 8007dc4 <_dtoa_r+0x384>
 8007dae:	4642      	mov	r2, r8
 8007db0:	464b      	mov	r3, r9
 8007db2:	4650      	mov	r0, sl
 8007db4:	4659      	mov	r1, fp
 8007db6:	f7f8 fd69 	bl	800088c <__aeabi_ddiv>
 8007dba:	4682      	mov	sl, r0
 8007dbc:	468b      	mov	fp, r1
 8007dbe:	e028      	b.n	8007e12 <_dtoa_r+0x3d2>
 8007dc0:	2502      	movs	r5, #2
 8007dc2:	e7f2      	b.n	8007daa <_dtoa_r+0x36a>
 8007dc4:	07f9      	lsls	r1, r7, #31
 8007dc6:	d508      	bpl.n	8007dda <_dtoa_r+0x39a>
 8007dc8:	4640      	mov	r0, r8
 8007dca:	4649      	mov	r1, r9
 8007dcc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007dd0:	f7f8 fc32 	bl	8000638 <__aeabi_dmul>
 8007dd4:	3501      	adds	r5, #1
 8007dd6:	4680      	mov	r8, r0
 8007dd8:	4689      	mov	r9, r1
 8007dda:	107f      	asrs	r7, r7, #1
 8007ddc:	3608      	adds	r6, #8
 8007dde:	e7e5      	b.n	8007dac <_dtoa_r+0x36c>
 8007de0:	f000 809b 	beq.w	8007f1a <_dtoa_r+0x4da>
 8007de4:	9b00      	ldr	r3, [sp, #0]
 8007de6:	4f9d      	ldr	r7, [pc, #628]	; (800805c <_dtoa_r+0x61c>)
 8007de8:	425e      	negs	r6, r3
 8007dea:	4b9b      	ldr	r3, [pc, #620]	; (8008058 <_dtoa_r+0x618>)
 8007dec:	f006 020f 	and.w	r2, r6, #15
 8007df0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df8:	ec51 0b19 	vmov	r0, r1, d9
 8007dfc:	f7f8 fc1c 	bl	8000638 <__aeabi_dmul>
 8007e00:	1136      	asrs	r6, r6, #4
 8007e02:	4682      	mov	sl, r0
 8007e04:	468b      	mov	fp, r1
 8007e06:	2300      	movs	r3, #0
 8007e08:	2502      	movs	r5, #2
 8007e0a:	2e00      	cmp	r6, #0
 8007e0c:	d17a      	bne.n	8007f04 <_dtoa_r+0x4c4>
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1d3      	bne.n	8007dba <_dtoa_r+0x37a>
 8007e12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	f000 8082 	beq.w	8007f1e <_dtoa_r+0x4de>
 8007e1a:	4b91      	ldr	r3, [pc, #580]	; (8008060 <_dtoa_r+0x620>)
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	4650      	mov	r0, sl
 8007e20:	4659      	mov	r1, fp
 8007e22:	f7f8 fe7b 	bl	8000b1c <__aeabi_dcmplt>
 8007e26:	2800      	cmp	r0, #0
 8007e28:	d079      	beq.n	8007f1e <_dtoa_r+0x4de>
 8007e2a:	9b03      	ldr	r3, [sp, #12]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d076      	beq.n	8007f1e <_dtoa_r+0x4de>
 8007e30:	9b02      	ldr	r3, [sp, #8]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	dd36      	ble.n	8007ea4 <_dtoa_r+0x464>
 8007e36:	9b00      	ldr	r3, [sp, #0]
 8007e38:	4650      	mov	r0, sl
 8007e3a:	4659      	mov	r1, fp
 8007e3c:	1e5f      	subs	r7, r3, #1
 8007e3e:	2200      	movs	r2, #0
 8007e40:	4b88      	ldr	r3, [pc, #544]	; (8008064 <_dtoa_r+0x624>)
 8007e42:	f7f8 fbf9 	bl	8000638 <__aeabi_dmul>
 8007e46:	9e02      	ldr	r6, [sp, #8]
 8007e48:	4682      	mov	sl, r0
 8007e4a:	468b      	mov	fp, r1
 8007e4c:	3501      	adds	r5, #1
 8007e4e:	4628      	mov	r0, r5
 8007e50:	f7f8 fb88 	bl	8000564 <__aeabi_i2d>
 8007e54:	4652      	mov	r2, sl
 8007e56:	465b      	mov	r3, fp
 8007e58:	f7f8 fbee 	bl	8000638 <__aeabi_dmul>
 8007e5c:	4b82      	ldr	r3, [pc, #520]	; (8008068 <_dtoa_r+0x628>)
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f7f8 fa34 	bl	80002cc <__adddf3>
 8007e64:	46d0      	mov	r8, sl
 8007e66:	46d9      	mov	r9, fp
 8007e68:	4682      	mov	sl, r0
 8007e6a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007e6e:	2e00      	cmp	r6, #0
 8007e70:	d158      	bne.n	8007f24 <_dtoa_r+0x4e4>
 8007e72:	4b7e      	ldr	r3, [pc, #504]	; (800806c <_dtoa_r+0x62c>)
 8007e74:	2200      	movs	r2, #0
 8007e76:	4640      	mov	r0, r8
 8007e78:	4649      	mov	r1, r9
 8007e7a:	f7f8 fa25 	bl	80002c8 <__aeabi_dsub>
 8007e7e:	4652      	mov	r2, sl
 8007e80:	465b      	mov	r3, fp
 8007e82:	4680      	mov	r8, r0
 8007e84:	4689      	mov	r9, r1
 8007e86:	f7f8 fe67 	bl	8000b58 <__aeabi_dcmpgt>
 8007e8a:	2800      	cmp	r0, #0
 8007e8c:	f040 8295 	bne.w	80083ba <_dtoa_r+0x97a>
 8007e90:	4652      	mov	r2, sl
 8007e92:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007e96:	4640      	mov	r0, r8
 8007e98:	4649      	mov	r1, r9
 8007e9a:	f7f8 fe3f 	bl	8000b1c <__aeabi_dcmplt>
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	f040 8289 	bne.w	80083b6 <_dtoa_r+0x976>
 8007ea4:	ec5b ab19 	vmov	sl, fp, d9
 8007ea8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	f2c0 8148 	blt.w	8008140 <_dtoa_r+0x700>
 8007eb0:	9a00      	ldr	r2, [sp, #0]
 8007eb2:	2a0e      	cmp	r2, #14
 8007eb4:	f300 8144 	bgt.w	8008140 <_dtoa_r+0x700>
 8007eb8:	4b67      	ldr	r3, [pc, #412]	; (8008058 <_dtoa_r+0x618>)
 8007eba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ebe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	f280 80d5 	bge.w	8008074 <_dtoa_r+0x634>
 8007eca:	9b03      	ldr	r3, [sp, #12]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f300 80d1 	bgt.w	8008074 <_dtoa_r+0x634>
 8007ed2:	f040 826f 	bne.w	80083b4 <_dtoa_r+0x974>
 8007ed6:	4b65      	ldr	r3, [pc, #404]	; (800806c <_dtoa_r+0x62c>)
 8007ed8:	2200      	movs	r2, #0
 8007eda:	4640      	mov	r0, r8
 8007edc:	4649      	mov	r1, r9
 8007ede:	f7f8 fbab 	bl	8000638 <__aeabi_dmul>
 8007ee2:	4652      	mov	r2, sl
 8007ee4:	465b      	mov	r3, fp
 8007ee6:	f7f8 fe2d 	bl	8000b44 <__aeabi_dcmpge>
 8007eea:	9e03      	ldr	r6, [sp, #12]
 8007eec:	4637      	mov	r7, r6
 8007eee:	2800      	cmp	r0, #0
 8007ef0:	f040 8245 	bne.w	800837e <_dtoa_r+0x93e>
 8007ef4:	9d01      	ldr	r5, [sp, #4]
 8007ef6:	2331      	movs	r3, #49	; 0x31
 8007ef8:	f805 3b01 	strb.w	r3, [r5], #1
 8007efc:	9b00      	ldr	r3, [sp, #0]
 8007efe:	3301      	adds	r3, #1
 8007f00:	9300      	str	r3, [sp, #0]
 8007f02:	e240      	b.n	8008386 <_dtoa_r+0x946>
 8007f04:	07f2      	lsls	r2, r6, #31
 8007f06:	d505      	bpl.n	8007f14 <_dtoa_r+0x4d4>
 8007f08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f0c:	f7f8 fb94 	bl	8000638 <__aeabi_dmul>
 8007f10:	3501      	adds	r5, #1
 8007f12:	2301      	movs	r3, #1
 8007f14:	1076      	asrs	r6, r6, #1
 8007f16:	3708      	adds	r7, #8
 8007f18:	e777      	b.n	8007e0a <_dtoa_r+0x3ca>
 8007f1a:	2502      	movs	r5, #2
 8007f1c:	e779      	b.n	8007e12 <_dtoa_r+0x3d2>
 8007f1e:	9f00      	ldr	r7, [sp, #0]
 8007f20:	9e03      	ldr	r6, [sp, #12]
 8007f22:	e794      	b.n	8007e4e <_dtoa_r+0x40e>
 8007f24:	9901      	ldr	r1, [sp, #4]
 8007f26:	4b4c      	ldr	r3, [pc, #304]	; (8008058 <_dtoa_r+0x618>)
 8007f28:	4431      	add	r1, r6
 8007f2a:	910d      	str	r1, [sp, #52]	; 0x34
 8007f2c:	9908      	ldr	r1, [sp, #32]
 8007f2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007f32:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f36:	2900      	cmp	r1, #0
 8007f38:	d043      	beq.n	8007fc2 <_dtoa_r+0x582>
 8007f3a:	494d      	ldr	r1, [pc, #308]	; (8008070 <_dtoa_r+0x630>)
 8007f3c:	2000      	movs	r0, #0
 8007f3e:	f7f8 fca5 	bl	800088c <__aeabi_ddiv>
 8007f42:	4652      	mov	r2, sl
 8007f44:	465b      	mov	r3, fp
 8007f46:	f7f8 f9bf 	bl	80002c8 <__aeabi_dsub>
 8007f4a:	9d01      	ldr	r5, [sp, #4]
 8007f4c:	4682      	mov	sl, r0
 8007f4e:	468b      	mov	fp, r1
 8007f50:	4649      	mov	r1, r9
 8007f52:	4640      	mov	r0, r8
 8007f54:	f7f8 fe20 	bl	8000b98 <__aeabi_d2iz>
 8007f58:	4606      	mov	r6, r0
 8007f5a:	f7f8 fb03 	bl	8000564 <__aeabi_i2d>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	460b      	mov	r3, r1
 8007f62:	4640      	mov	r0, r8
 8007f64:	4649      	mov	r1, r9
 8007f66:	f7f8 f9af 	bl	80002c8 <__aeabi_dsub>
 8007f6a:	3630      	adds	r6, #48	; 0x30
 8007f6c:	f805 6b01 	strb.w	r6, [r5], #1
 8007f70:	4652      	mov	r2, sl
 8007f72:	465b      	mov	r3, fp
 8007f74:	4680      	mov	r8, r0
 8007f76:	4689      	mov	r9, r1
 8007f78:	f7f8 fdd0 	bl	8000b1c <__aeabi_dcmplt>
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	d163      	bne.n	8008048 <_dtoa_r+0x608>
 8007f80:	4642      	mov	r2, r8
 8007f82:	464b      	mov	r3, r9
 8007f84:	4936      	ldr	r1, [pc, #216]	; (8008060 <_dtoa_r+0x620>)
 8007f86:	2000      	movs	r0, #0
 8007f88:	f7f8 f99e 	bl	80002c8 <__aeabi_dsub>
 8007f8c:	4652      	mov	r2, sl
 8007f8e:	465b      	mov	r3, fp
 8007f90:	f7f8 fdc4 	bl	8000b1c <__aeabi_dcmplt>
 8007f94:	2800      	cmp	r0, #0
 8007f96:	f040 80b5 	bne.w	8008104 <_dtoa_r+0x6c4>
 8007f9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f9c:	429d      	cmp	r5, r3
 8007f9e:	d081      	beq.n	8007ea4 <_dtoa_r+0x464>
 8007fa0:	4b30      	ldr	r3, [pc, #192]	; (8008064 <_dtoa_r+0x624>)
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	4650      	mov	r0, sl
 8007fa6:	4659      	mov	r1, fp
 8007fa8:	f7f8 fb46 	bl	8000638 <__aeabi_dmul>
 8007fac:	4b2d      	ldr	r3, [pc, #180]	; (8008064 <_dtoa_r+0x624>)
 8007fae:	4682      	mov	sl, r0
 8007fb0:	468b      	mov	fp, r1
 8007fb2:	4640      	mov	r0, r8
 8007fb4:	4649      	mov	r1, r9
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f7f8 fb3e 	bl	8000638 <__aeabi_dmul>
 8007fbc:	4680      	mov	r8, r0
 8007fbe:	4689      	mov	r9, r1
 8007fc0:	e7c6      	b.n	8007f50 <_dtoa_r+0x510>
 8007fc2:	4650      	mov	r0, sl
 8007fc4:	4659      	mov	r1, fp
 8007fc6:	f7f8 fb37 	bl	8000638 <__aeabi_dmul>
 8007fca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fcc:	9d01      	ldr	r5, [sp, #4]
 8007fce:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fd0:	4682      	mov	sl, r0
 8007fd2:	468b      	mov	fp, r1
 8007fd4:	4649      	mov	r1, r9
 8007fd6:	4640      	mov	r0, r8
 8007fd8:	f7f8 fdde 	bl	8000b98 <__aeabi_d2iz>
 8007fdc:	4606      	mov	r6, r0
 8007fde:	f7f8 fac1 	bl	8000564 <__aeabi_i2d>
 8007fe2:	3630      	adds	r6, #48	; 0x30
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	4640      	mov	r0, r8
 8007fea:	4649      	mov	r1, r9
 8007fec:	f7f8 f96c 	bl	80002c8 <__aeabi_dsub>
 8007ff0:	f805 6b01 	strb.w	r6, [r5], #1
 8007ff4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ff6:	429d      	cmp	r5, r3
 8007ff8:	4680      	mov	r8, r0
 8007ffa:	4689      	mov	r9, r1
 8007ffc:	f04f 0200 	mov.w	r2, #0
 8008000:	d124      	bne.n	800804c <_dtoa_r+0x60c>
 8008002:	4b1b      	ldr	r3, [pc, #108]	; (8008070 <_dtoa_r+0x630>)
 8008004:	4650      	mov	r0, sl
 8008006:	4659      	mov	r1, fp
 8008008:	f7f8 f960 	bl	80002cc <__adddf3>
 800800c:	4602      	mov	r2, r0
 800800e:	460b      	mov	r3, r1
 8008010:	4640      	mov	r0, r8
 8008012:	4649      	mov	r1, r9
 8008014:	f7f8 fda0 	bl	8000b58 <__aeabi_dcmpgt>
 8008018:	2800      	cmp	r0, #0
 800801a:	d173      	bne.n	8008104 <_dtoa_r+0x6c4>
 800801c:	4652      	mov	r2, sl
 800801e:	465b      	mov	r3, fp
 8008020:	4913      	ldr	r1, [pc, #76]	; (8008070 <_dtoa_r+0x630>)
 8008022:	2000      	movs	r0, #0
 8008024:	f7f8 f950 	bl	80002c8 <__aeabi_dsub>
 8008028:	4602      	mov	r2, r0
 800802a:	460b      	mov	r3, r1
 800802c:	4640      	mov	r0, r8
 800802e:	4649      	mov	r1, r9
 8008030:	f7f8 fd74 	bl	8000b1c <__aeabi_dcmplt>
 8008034:	2800      	cmp	r0, #0
 8008036:	f43f af35 	beq.w	8007ea4 <_dtoa_r+0x464>
 800803a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800803c:	1e6b      	subs	r3, r5, #1
 800803e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008040:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008044:	2b30      	cmp	r3, #48	; 0x30
 8008046:	d0f8      	beq.n	800803a <_dtoa_r+0x5fa>
 8008048:	9700      	str	r7, [sp, #0]
 800804a:	e049      	b.n	80080e0 <_dtoa_r+0x6a0>
 800804c:	4b05      	ldr	r3, [pc, #20]	; (8008064 <_dtoa_r+0x624>)
 800804e:	f7f8 faf3 	bl	8000638 <__aeabi_dmul>
 8008052:	4680      	mov	r8, r0
 8008054:	4689      	mov	r9, r1
 8008056:	e7bd      	b.n	8007fd4 <_dtoa_r+0x594>
 8008058:	08009c00 	.word	0x08009c00
 800805c:	08009bd8 	.word	0x08009bd8
 8008060:	3ff00000 	.word	0x3ff00000
 8008064:	40240000 	.word	0x40240000
 8008068:	401c0000 	.word	0x401c0000
 800806c:	40140000 	.word	0x40140000
 8008070:	3fe00000 	.word	0x3fe00000
 8008074:	9d01      	ldr	r5, [sp, #4]
 8008076:	4656      	mov	r6, sl
 8008078:	465f      	mov	r7, fp
 800807a:	4642      	mov	r2, r8
 800807c:	464b      	mov	r3, r9
 800807e:	4630      	mov	r0, r6
 8008080:	4639      	mov	r1, r7
 8008082:	f7f8 fc03 	bl	800088c <__aeabi_ddiv>
 8008086:	f7f8 fd87 	bl	8000b98 <__aeabi_d2iz>
 800808a:	4682      	mov	sl, r0
 800808c:	f7f8 fa6a 	bl	8000564 <__aeabi_i2d>
 8008090:	4642      	mov	r2, r8
 8008092:	464b      	mov	r3, r9
 8008094:	f7f8 fad0 	bl	8000638 <__aeabi_dmul>
 8008098:	4602      	mov	r2, r0
 800809a:	460b      	mov	r3, r1
 800809c:	4630      	mov	r0, r6
 800809e:	4639      	mov	r1, r7
 80080a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80080a4:	f7f8 f910 	bl	80002c8 <__aeabi_dsub>
 80080a8:	f805 6b01 	strb.w	r6, [r5], #1
 80080ac:	9e01      	ldr	r6, [sp, #4]
 80080ae:	9f03      	ldr	r7, [sp, #12]
 80080b0:	1bae      	subs	r6, r5, r6
 80080b2:	42b7      	cmp	r7, r6
 80080b4:	4602      	mov	r2, r0
 80080b6:	460b      	mov	r3, r1
 80080b8:	d135      	bne.n	8008126 <_dtoa_r+0x6e6>
 80080ba:	f7f8 f907 	bl	80002cc <__adddf3>
 80080be:	4642      	mov	r2, r8
 80080c0:	464b      	mov	r3, r9
 80080c2:	4606      	mov	r6, r0
 80080c4:	460f      	mov	r7, r1
 80080c6:	f7f8 fd47 	bl	8000b58 <__aeabi_dcmpgt>
 80080ca:	b9d0      	cbnz	r0, 8008102 <_dtoa_r+0x6c2>
 80080cc:	4642      	mov	r2, r8
 80080ce:	464b      	mov	r3, r9
 80080d0:	4630      	mov	r0, r6
 80080d2:	4639      	mov	r1, r7
 80080d4:	f7f8 fd18 	bl	8000b08 <__aeabi_dcmpeq>
 80080d8:	b110      	cbz	r0, 80080e0 <_dtoa_r+0x6a0>
 80080da:	f01a 0f01 	tst.w	sl, #1
 80080de:	d110      	bne.n	8008102 <_dtoa_r+0x6c2>
 80080e0:	4620      	mov	r0, r4
 80080e2:	ee18 1a10 	vmov	r1, s16
 80080e6:	f000 faf3 	bl	80086d0 <_Bfree>
 80080ea:	2300      	movs	r3, #0
 80080ec:	9800      	ldr	r0, [sp, #0]
 80080ee:	702b      	strb	r3, [r5, #0]
 80080f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080f2:	3001      	adds	r0, #1
 80080f4:	6018      	str	r0, [r3, #0]
 80080f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f43f acf1 	beq.w	8007ae0 <_dtoa_r+0xa0>
 80080fe:	601d      	str	r5, [r3, #0]
 8008100:	e4ee      	b.n	8007ae0 <_dtoa_r+0xa0>
 8008102:	9f00      	ldr	r7, [sp, #0]
 8008104:	462b      	mov	r3, r5
 8008106:	461d      	mov	r5, r3
 8008108:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800810c:	2a39      	cmp	r2, #57	; 0x39
 800810e:	d106      	bne.n	800811e <_dtoa_r+0x6de>
 8008110:	9a01      	ldr	r2, [sp, #4]
 8008112:	429a      	cmp	r2, r3
 8008114:	d1f7      	bne.n	8008106 <_dtoa_r+0x6c6>
 8008116:	9901      	ldr	r1, [sp, #4]
 8008118:	2230      	movs	r2, #48	; 0x30
 800811a:	3701      	adds	r7, #1
 800811c:	700a      	strb	r2, [r1, #0]
 800811e:	781a      	ldrb	r2, [r3, #0]
 8008120:	3201      	adds	r2, #1
 8008122:	701a      	strb	r2, [r3, #0]
 8008124:	e790      	b.n	8008048 <_dtoa_r+0x608>
 8008126:	4ba6      	ldr	r3, [pc, #664]	; (80083c0 <_dtoa_r+0x980>)
 8008128:	2200      	movs	r2, #0
 800812a:	f7f8 fa85 	bl	8000638 <__aeabi_dmul>
 800812e:	2200      	movs	r2, #0
 8008130:	2300      	movs	r3, #0
 8008132:	4606      	mov	r6, r0
 8008134:	460f      	mov	r7, r1
 8008136:	f7f8 fce7 	bl	8000b08 <__aeabi_dcmpeq>
 800813a:	2800      	cmp	r0, #0
 800813c:	d09d      	beq.n	800807a <_dtoa_r+0x63a>
 800813e:	e7cf      	b.n	80080e0 <_dtoa_r+0x6a0>
 8008140:	9a08      	ldr	r2, [sp, #32]
 8008142:	2a00      	cmp	r2, #0
 8008144:	f000 80d7 	beq.w	80082f6 <_dtoa_r+0x8b6>
 8008148:	9a06      	ldr	r2, [sp, #24]
 800814a:	2a01      	cmp	r2, #1
 800814c:	f300 80ba 	bgt.w	80082c4 <_dtoa_r+0x884>
 8008150:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008152:	2a00      	cmp	r2, #0
 8008154:	f000 80b2 	beq.w	80082bc <_dtoa_r+0x87c>
 8008158:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800815c:	9e07      	ldr	r6, [sp, #28]
 800815e:	9d04      	ldr	r5, [sp, #16]
 8008160:	9a04      	ldr	r2, [sp, #16]
 8008162:	441a      	add	r2, r3
 8008164:	9204      	str	r2, [sp, #16]
 8008166:	9a05      	ldr	r2, [sp, #20]
 8008168:	2101      	movs	r1, #1
 800816a:	441a      	add	r2, r3
 800816c:	4620      	mov	r0, r4
 800816e:	9205      	str	r2, [sp, #20]
 8008170:	f000 fb66 	bl	8008840 <__i2b>
 8008174:	4607      	mov	r7, r0
 8008176:	2d00      	cmp	r5, #0
 8008178:	dd0c      	ble.n	8008194 <_dtoa_r+0x754>
 800817a:	9b05      	ldr	r3, [sp, #20]
 800817c:	2b00      	cmp	r3, #0
 800817e:	dd09      	ble.n	8008194 <_dtoa_r+0x754>
 8008180:	42ab      	cmp	r3, r5
 8008182:	9a04      	ldr	r2, [sp, #16]
 8008184:	bfa8      	it	ge
 8008186:	462b      	movge	r3, r5
 8008188:	1ad2      	subs	r2, r2, r3
 800818a:	9204      	str	r2, [sp, #16]
 800818c:	9a05      	ldr	r2, [sp, #20]
 800818e:	1aed      	subs	r5, r5, r3
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	9305      	str	r3, [sp, #20]
 8008194:	9b07      	ldr	r3, [sp, #28]
 8008196:	b31b      	cbz	r3, 80081e0 <_dtoa_r+0x7a0>
 8008198:	9b08      	ldr	r3, [sp, #32]
 800819a:	2b00      	cmp	r3, #0
 800819c:	f000 80af 	beq.w	80082fe <_dtoa_r+0x8be>
 80081a0:	2e00      	cmp	r6, #0
 80081a2:	dd13      	ble.n	80081cc <_dtoa_r+0x78c>
 80081a4:	4639      	mov	r1, r7
 80081a6:	4632      	mov	r2, r6
 80081a8:	4620      	mov	r0, r4
 80081aa:	f000 fc09 	bl	80089c0 <__pow5mult>
 80081ae:	ee18 2a10 	vmov	r2, s16
 80081b2:	4601      	mov	r1, r0
 80081b4:	4607      	mov	r7, r0
 80081b6:	4620      	mov	r0, r4
 80081b8:	f000 fb58 	bl	800886c <__multiply>
 80081bc:	ee18 1a10 	vmov	r1, s16
 80081c0:	4680      	mov	r8, r0
 80081c2:	4620      	mov	r0, r4
 80081c4:	f000 fa84 	bl	80086d0 <_Bfree>
 80081c8:	ee08 8a10 	vmov	s16, r8
 80081cc:	9b07      	ldr	r3, [sp, #28]
 80081ce:	1b9a      	subs	r2, r3, r6
 80081d0:	d006      	beq.n	80081e0 <_dtoa_r+0x7a0>
 80081d2:	ee18 1a10 	vmov	r1, s16
 80081d6:	4620      	mov	r0, r4
 80081d8:	f000 fbf2 	bl	80089c0 <__pow5mult>
 80081dc:	ee08 0a10 	vmov	s16, r0
 80081e0:	2101      	movs	r1, #1
 80081e2:	4620      	mov	r0, r4
 80081e4:	f000 fb2c 	bl	8008840 <__i2b>
 80081e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	4606      	mov	r6, r0
 80081ee:	f340 8088 	ble.w	8008302 <_dtoa_r+0x8c2>
 80081f2:	461a      	mov	r2, r3
 80081f4:	4601      	mov	r1, r0
 80081f6:	4620      	mov	r0, r4
 80081f8:	f000 fbe2 	bl	80089c0 <__pow5mult>
 80081fc:	9b06      	ldr	r3, [sp, #24]
 80081fe:	2b01      	cmp	r3, #1
 8008200:	4606      	mov	r6, r0
 8008202:	f340 8081 	ble.w	8008308 <_dtoa_r+0x8c8>
 8008206:	f04f 0800 	mov.w	r8, #0
 800820a:	6933      	ldr	r3, [r6, #16]
 800820c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008210:	6918      	ldr	r0, [r3, #16]
 8008212:	f000 fac5 	bl	80087a0 <__hi0bits>
 8008216:	f1c0 0020 	rsb	r0, r0, #32
 800821a:	9b05      	ldr	r3, [sp, #20]
 800821c:	4418      	add	r0, r3
 800821e:	f010 001f 	ands.w	r0, r0, #31
 8008222:	f000 8092 	beq.w	800834a <_dtoa_r+0x90a>
 8008226:	f1c0 0320 	rsb	r3, r0, #32
 800822a:	2b04      	cmp	r3, #4
 800822c:	f340 808a 	ble.w	8008344 <_dtoa_r+0x904>
 8008230:	f1c0 001c 	rsb	r0, r0, #28
 8008234:	9b04      	ldr	r3, [sp, #16]
 8008236:	4403      	add	r3, r0
 8008238:	9304      	str	r3, [sp, #16]
 800823a:	9b05      	ldr	r3, [sp, #20]
 800823c:	4403      	add	r3, r0
 800823e:	4405      	add	r5, r0
 8008240:	9305      	str	r3, [sp, #20]
 8008242:	9b04      	ldr	r3, [sp, #16]
 8008244:	2b00      	cmp	r3, #0
 8008246:	dd07      	ble.n	8008258 <_dtoa_r+0x818>
 8008248:	ee18 1a10 	vmov	r1, s16
 800824c:	461a      	mov	r2, r3
 800824e:	4620      	mov	r0, r4
 8008250:	f000 fc10 	bl	8008a74 <__lshift>
 8008254:	ee08 0a10 	vmov	s16, r0
 8008258:	9b05      	ldr	r3, [sp, #20]
 800825a:	2b00      	cmp	r3, #0
 800825c:	dd05      	ble.n	800826a <_dtoa_r+0x82a>
 800825e:	4631      	mov	r1, r6
 8008260:	461a      	mov	r2, r3
 8008262:	4620      	mov	r0, r4
 8008264:	f000 fc06 	bl	8008a74 <__lshift>
 8008268:	4606      	mov	r6, r0
 800826a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800826c:	2b00      	cmp	r3, #0
 800826e:	d06e      	beq.n	800834e <_dtoa_r+0x90e>
 8008270:	ee18 0a10 	vmov	r0, s16
 8008274:	4631      	mov	r1, r6
 8008276:	f000 fc6d 	bl	8008b54 <__mcmp>
 800827a:	2800      	cmp	r0, #0
 800827c:	da67      	bge.n	800834e <_dtoa_r+0x90e>
 800827e:	9b00      	ldr	r3, [sp, #0]
 8008280:	3b01      	subs	r3, #1
 8008282:	ee18 1a10 	vmov	r1, s16
 8008286:	9300      	str	r3, [sp, #0]
 8008288:	220a      	movs	r2, #10
 800828a:	2300      	movs	r3, #0
 800828c:	4620      	mov	r0, r4
 800828e:	f000 fa41 	bl	8008714 <__multadd>
 8008292:	9b08      	ldr	r3, [sp, #32]
 8008294:	ee08 0a10 	vmov	s16, r0
 8008298:	2b00      	cmp	r3, #0
 800829a:	f000 81b1 	beq.w	8008600 <_dtoa_r+0xbc0>
 800829e:	2300      	movs	r3, #0
 80082a0:	4639      	mov	r1, r7
 80082a2:	220a      	movs	r2, #10
 80082a4:	4620      	mov	r0, r4
 80082a6:	f000 fa35 	bl	8008714 <__multadd>
 80082aa:	9b02      	ldr	r3, [sp, #8]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	4607      	mov	r7, r0
 80082b0:	f300 808e 	bgt.w	80083d0 <_dtoa_r+0x990>
 80082b4:	9b06      	ldr	r3, [sp, #24]
 80082b6:	2b02      	cmp	r3, #2
 80082b8:	dc51      	bgt.n	800835e <_dtoa_r+0x91e>
 80082ba:	e089      	b.n	80083d0 <_dtoa_r+0x990>
 80082bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80082c2:	e74b      	b.n	800815c <_dtoa_r+0x71c>
 80082c4:	9b03      	ldr	r3, [sp, #12]
 80082c6:	1e5e      	subs	r6, r3, #1
 80082c8:	9b07      	ldr	r3, [sp, #28]
 80082ca:	42b3      	cmp	r3, r6
 80082cc:	bfbf      	itttt	lt
 80082ce:	9b07      	ldrlt	r3, [sp, #28]
 80082d0:	9607      	strlt	r6, [sp, #28]
 80082d2:	1af2      	sublt	r2, r6, r3
 80082d4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80082d6:	bfb6      	itet	lt
 80082d8:	189b      	addlt	r3, r3, r2
 80082da:	1b9e      	subge	r6, r3, r6
 80082dc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80082de:	9b03      	ldr	r3, [sp, #12]
 80082e0:	bfb8      	it	lt
 80082e2:	2600      	movlt	r6, #0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	bfb7      	itett	lt
 80082e8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80082ec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80082f0:	1a9d      	sublt	r5, r3, r2
 80082f2:	2300      	movlt	r3, #0
 80082f4:	e734      	b.n	8008160 <_dtoa_r+0x720>
 80082f6:	9e07      	ldr	r6, [sp, #28]
 80082f8:	9d04      	ldr	r5, [sp, #16]
 80082fa:	9f08      	ldr	r7, [sp, #32]
 80082fc:	e73b      	b.n	8008176 <_dtoa_r+0x736>
 80082fe:	9a07      	ldr	r2, [sp, #28]
 8008300:	e767      	b.n	80081d2 <_dtoa_r+0x792>
 8008302:	9b06      	ldr	r3, [sp, #24]
 8008304:	2b01      	cmp	r3, #1
 8008306:	dc18      	bgt.n	800833a <_dtoa_r+0x8fa>
 8008308:	f1ba 0f00 	cmp.w	sl, #0
 800830c:	d115      	bne.n	800833a <_dtoa_r+0x8fa>
 800830e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008312:	b993      	cbnz	r3, 800833a <_dtoa_r+0x8fa>
 8008314:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008318:	0d1b      	lsrs	r3, r3, #20
 800831a:	051b      	lsls	r3, r3, #20
 800831c:	b183      	cbz	r3, 8008340 <_dtoa_r+0x900>
 800831e:	9b04      	ldr	r3, [sp, #16]
 8008320:	3301      	adds	r3, #1
 8008322:	9304      	str	r3, [sp, #16]
 8008324:	9b05      	ldr	r3, [sp, #20]
 8008326:	3301      	adds	r3, #1
 8008328:	9305      	str	r3, [sp, #20]
 800832a:	f04f 0801 	mov.w	r8, #1
 800832e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008330:	2b00      	cmp	r3, #0
 8008332:	f47f af6a 	bne.w	800820a <_dtoa_r+0x7ca>
 8008336:	2001      	movs	r0, #1
 8008338:	e76f      	b.n	800821a <_dtoa_r+0x7da>
 800833a:	f04f 0800 	mov.w	r8, #0
 800833e:	e7f6      	b.n	800832e <_dtoa_r+0x8ee>
 8008340:	4698      	mov	r8, r3
 8008342:	e7f4      	b.n	800832e <_dtoa_r+0x8ee>
 8008344:	f43f af7d 	beq.w	8008242 <_dtoa_r+0x802>
 8008348:	4618      	mov	r0, r3
 800834a:	301c      	adds	r0, #28
 800834c:	e772      	b.n	8008234 <_dtoa_r+0x7f4>
 800834e:	9b03      	ldr	r3, [sp, #12]
 8008350:	2b00      	cmp	r3, #0
 8008352:	dc37      	bgt.n	80083c4 <_dtoa_r+0x984>
 8008354:	9b06      	ldr	r3, [sp, #24]
 8008356:	2b02      	cmp	r3, #2
 8008358:	dd34      	ble.n	80083c4 <_dtoa_r+0x984>
 800835a:	9b03      	ldr	r3, [sp, #12]
 800835c:	9302      	str	r3, [sp, #8]
 800835e:	9b02      	ldr	r3, [sp, #8]
 8008360:	b96b      	cbnz	r3, 800837e <_dtoa_r+0x93e>
 8008362:	4631      	mov	r1, r6
 8008364:	2205      	movs	r2, #5
 8008366:	4620      	mov	r0, r4
 8008368:	f000 f9d4 	bl	8008714 <__multadd>
 800836c:	4601      	mov	r1, r0
 800836e:	4606      	mov	r6, r0
 8008370:	ee18 0a10 	vmov	r0, s16
 8008374:	f000 fbee 	bl	8008b54 <__mcmp>
 8008378:	2800      	cmp	r0, #0
 800837a:	f73f adbb 	bgt.w	8007ef4 <_dtoa_r+0x4b4>
 800837e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008380:	9d01      	ldr	r5, [sp, #4]
 8008382:	43db      	mvns	r3, r3
 8008384:	9300      	str	r3, [sp, #0]
 8008386:	f04f 0800 	mov.w	r8, #0
 800838a:	4631      	mov	r1, r6
 800838c:	4620      	mov	r0, r4
 800838e:	f000 f99f 	bl	80086d0 <_Bfree>
 8008392:	2f00      	cmp	r7, #0
 8008394:	f43f aea4 	beq.w	80080e0 <_dtoa_r+0x6a0>
 8008398:	f1b8 0f00 	cmp.w	r8, #0
 800839c:	d005      	beq.n	80083aa <_dtoa_r+0x96a>
 800839e:	45b8      	cmp	r8, r7
 80083a0:	d003      	beq.n	80083aa <_dtoa_r+0x96a>
 80083a2:	4641      	mov	r1, r8
 80083a4:	4620      	mov	r0, r4
 80083a6:	f000 f993 	bl	80086d0 <_Bfree>
 80083aa:	4639      	mov	r1, r7
 80083ac:	4620      	mov	r0, r4
 80083ae:	f000 f98f 	bl	80086d0 <_Bfree>
 80083b2:	e695      	b.n	80080e0 <_dtoa_r+0x6a0>
 80083b4:	2600      	movs	r6, #0
 80083b6:	4637      	mov	r7, r6
 80083b8:	e7e1      	b.n	800837e <_dtoa_r+0x93e>
 80083ba:	9700      	str	r7, [sp, #0]
 80083bc:	4637      	mov	r7, r6
 80083be:	e599      	b.n	8007ef4 <_dtoa_r+0x4b4>
 80083c0:	40240000 	.word	0x40240000
 80083c4:	9b08      	ldr	r3, [sp, #32]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	f000 80ca 	beq.w	8008560 <_dtoa_r+0xb20>
 80083cc:	9b03      	ldr	r3, [sp, #12]
 80083ce:	9302      	str	r3, [sp, #8]
 80083d0:	2d00      	cmp	r5, #0
 80083d2:	dd05      	ble.n	80083e0 <_dtoa_r+0x9a0>
 80083d4:	4639      	mov	r1, r7
 80083d6:	462a      	mov	r2, r5
 80083d8:	4620      	mov	r0, r4
 80083da:	f000 fb4b 	bl	8008a74 <__lshift>
 80083de:	4607      	mov	r7, r0
 80083e0:	f1b8 0f00 	cmp.w	r8, #0
 80083e4:	d05b      	beq.n	800849e <_dtoa_r+0xa5e>
 80083e6:	6879      	ldr	r1, [r7, #4]
 80083e8:	4620      	mov	r0, r4
 80083ea:	f000 f931 	bl	8008650 <_Balloc>
 80083ee:	4605      	mov	r5, r0
 80083f0:	b928      	cbnz	r0, 80083fe <_dtoa_r+0x9be>
 80083f2:	4b87      	ldr	r3, [pc, #540]	; (8008610 <_dtoa_r+0xbd0>)
 80083f4:	4602      	mov	r2, r0
 80083f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80083fa:	f7ff bb3b 	b.w	8007a74 <_dtoa_r+0x34>
 80083fe:	693a      	ldr	r2, [r7, #16]
 8008400:	3202      	adds	r2, #2
 8008402:	0092      	lsls	r2, r2, #2
 8008404:	f107 010c 	add.w	r1, r7, #12
 8008408:	300c      	adds	r0, #12
 800840a:	f000 f913 	bl	8008634 <memcpy>
 800840e:	2201      	movs	r2, #1
 8008410:	4629      	mov	r1, r5
 8008412:	4620      	mov	r0, r4
 8008414:	f000 fb2e 	bl	8008a74 <__lshift>
 8008418:	9b01      	ldr	r3, [sp, #4]
 800841a:	f103 0901 	add.w	r9, r3, #1
 800841e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008422:	4413      	add	r3, r2
 8008424:	9305      	str	r3, [sp, #20]
 8008426:	f00a 0301 	and.w	r3, sl, #1
 800842a:	46b8      	mov	r8, r7
 800842c:	9304      	str	r3, [sp, #16]
 800842e:	4607      	mov	r7, r0
 8008430:	4631      	mov	r1, r6
 8008432:	ee18 0a10 	vmov	r0, s16
 8008436:	f7ff fa77 	bl	8007928 <quorem>
 800843a:	4641      	mov	r1, r8
 800843c:	9002      	str	r0, [sp, #8]
 800843e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008442:	ee18 0a10 	vmov	r0, s16
 8008446:	f000 fb85 	bl	8008b54 <__mcmp>
 800844a:	463a      	mov	r2, r7
 800844c:	9003      	str	r0, [sp, #12]
 800844e:	4631      	mov	r1, r6
 8008450:	4620      	mov	r0, r4
 8008452:	f000 fb9b 	bl	8008b8c <__mdiff>
 8008456:	68c2      	ldr	r2, [r0, #12]
 8008458:	f109 3bff 	add.w	fp, r9, #4294967295
 800845c:	4605      	mov	r5, r0
 800845e:	bb02      	cbnz	r2, 80084a2 <_dtoa_r+0xa62>
 8008460:	4601      	mov	r1, r0
 8008462:	ee18 0a10 	vmov	r0, s16
 8008466:	f000 fb75 	bl	8008b54 <__mcmp>
 800846a:	4602      	mov	r2, r0
 800846c:	4629      	mov	r1, r5
 800846e:	4620      	mov	r0, r4
 8008470:	9207      	str	r2, [sp, #28]
 8008472:	f000 f92d 	bl	80086d0 <_Bfree>
 8008476:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800847a:	ea43 0102 	orr.w	r1, r3, r2
 800847e:	9b04      	ldr	r3, [sp, #16]
 8008480:	430b      	orrs	r3, r1
 8008482:	464d      	mov	r5, r9
 8008484:	d10f      	bne.n	80084a6 <_dtoa_r+0xa66>
 8008486:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800848a:	d02a      	beq.n	80084e2 <_dtoa_r+0xaa2>
 800848c:	9b03      	ldr	r3, [sp, #12]
 800848e:	2b00      	cmp	r3, #0
 8008490:	dd02      	ble.n	8008498 <_dtoa_r+0xa58>
 8008492:	9b02      	ldr	r3, [sp, #8]
 8008494:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008498:	f88b a000 	strb.w	sl, [fp]
 800849c:	e775      	b.n	800838a <_dtoa_r+0x94a>
 800849e:	4638      	mov	r0, r7
 80084a0:	e7ba      	b.n	8008418 <_dtoa_r+0x9d8>
 80084a2:	2201      	movs	r2, #1
 80084a4:	e7e2      	b.n	800846c <_dtoa_r+0xa2c>
 80084a6:	9b03      	ldr	r3, [sp, #12]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	db04      	blt.n	80084b6 <_dtoa_r+0xa76>
 80084ac:	9906      	ldr	r1, [sp, #24]
 80084ae:	430b      	orrs	r3, r1
 80084b0:	9904      	ldr	r1, [sp, #16]
 80084b2:	430b      	orrs	r3, r1
 80084b4:	d122      	bne.n	80084fc <_dtoa_r+0xabc>
 80084b6:	2a00      	cmp	r2, #0
 80084b8:	ddee      	ble.n	8008498 <_dtoa_r+0xa58>
 80084ba:	ee18 1a10 	vmov	r1, s16
 80084be:	2201      	movs	r2, #1
 80084c0:	4620      	mov	r0, r4
 80084c2:	f000 fad7 	bl	8008a74 <__lshift>
 80084c6:	4631      	mov	r1, r6
 80084c8:	ee08 0a10 	vmov	s16, r0
 80084cc:	f000 fb42 	bl	8008b54 <__mcmp>
 80084d0:	2800      	cmp	r0, #0
 80084d2:	dc03      	bgt.n	80084dc <_dtoa_r+0xa9c>
 80084d4:	d1e0      	bne.n	8008498 <_dtoa_r+0xa58>
 80084d6:	f01a 0f01 	tst.w	sl, #1
 80084da:	d0dd      	beq.n	8008498 <_dtoa_r+0xa58>
 80084dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80084e0:	d1d7      	bne.n	8008492 <_dtoa_r+0xa52>
 80084e2:	2339      	movs	r3, #57	; 0x39
 80084e4:	f88b 3000 	strb.w	r3, [fp]
 80084e8:	462b      	mov	r3, r5
 80084ea:	461d      	mov	r5, r3
 80084ec:	3b01      	subs	r3, #1
 80084ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80084f2:	2a39      	cmp	r2, #57	; 0x39
 80084f4:	d071      	beq.n	80085da <_dtoa_r+0xb9a>
 80084f6:	3201      	adds	r2, #1
 80084f8:	701a      	strb	r2, [r3, #0]
 80084fa:	e746      	b.n	800838a <_dtoa_r+0x94a>
 80084fc:	2a00      	cmp	r2, #0
 80084fe:	dd07      	ble.n	8008510 <_dtoa_r+0xad0>
 8008500:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008504:	d0ed      	beq.n	80084e2 <_dtoa_r+0xaa2>
 8008506:	f10a 0301 	add.w	r3, sl, #1
 800850a:	f88b 3000 	strb.w	r3, [fp]
 800850e:	e73c      	b.n	800838a <_dtoa_r+0x94a>
 8008510:	9b05      	ldr	r3, [sp, #20]
 8008512:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008516:	4599      	cmp	r9, r3
 8008518:	d047      	beq.n	80085aa <_dtoa_r+0xb6a>
 800851a:	ee18 1a10 	vmov	r1, s16
 800851e:	2300      	movs	r3, #0
 8008520:	220a      	movs	r2, #10
 8008522:	4620      	mov	r0, r4
 8008524:	f000 f8f6 	bl	8008714 <__multadd>
 8008528:	45b8      	cmp	r8, r7
 800852a:	ee08 0a10 	vmov	s16, r0
 800852e:	f04f 0300 	mov.w	r3, #0
 8008532:	f04f 020a 	mov.w	r2, #10
 8008536:	4641      	mov	r1, r8
 8008538:	4620      	mov	r0, r4
 800853a:	d106      	bne.n	800854a <_dtoa_r+0xb0a>
 800853c:	f000 f8ea 	bl	8008714 <__multadd>
 8008540:	4680      	mov	r8, r0
 8008542:	4607      	mov	r7, r0
 8008544:	f109 0901 	add.w	r9, r9, #1
 8008548:	e772      	b.n	8008430 <_dtoa_r+0x9f0>
 800854a:	f000 f8e3 	bl	8008714 <__multadd>
 800854e:	4639      	mov	r1, r7
 8008550:	4680      	mov	r8, r0
 8008552:	2300      	movs	r3, #0
 8008554:	220a      	movs	r2, #10
 8008556:	4620      	mov	r0, r4
 8008558:	f000 f8dc 	bl	8008714 <__multadd>
 800855c:	4607      	mov	r7, r0
 800855e:	e7f1      	b.n	8008544 <_dtoa_r+0xb04>
 8008560:	9b03      	ldr	r3, [sp, #12]
 8008562:	9302      	str	r3, [sp, #8]
 8008564:	9d01      	ldr	r5, [sp, #4]
 8008566:	ee18 0a10 	vmov	r0, s16
 800856a:	4631      	mov	r1, r6
 800856c:	f7ff f9dc 	bl	8007928 <quorem>
 8008570:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008574:	9b01      	ldr	r3, [sp, #4]
 8008576:	f805 ab01 	strb.w	sl, [r5], #1
 800857a:	1aea      	subs	r2, r5, r3
 800857c:	9b02      	ldr	r3, [sp, #8]
 800857e:	4293      	cmp	r3, r2
 8008580:	dd09      	ble.n	8008596 <_dtoa_r+0xb56>
 8008582:	ee18 1a10 	vmov	r1, s16
 8008586:	2300      	movs	r3, #0
 8008588:	220a      	movs	r2, #10
 800858a:	4620      	mov	r0, r4
 800858c:	f000 f8c2 	bl	8008714 <__multadd>
 8008590:	ee08 0a10 	vmov	s16, r0
 8008594:	e7e7      	b.n	8008566 <_dtoa_r+0xb26>
 8008596:	9b02      	ldr	r3, [sp, #8]
 8008598:	2b00      	cmp	r3, #0
 800859a:	bfc8      	it	gt
 800859c:	461d      	movgt	r5, r3
 800859e:	9b01      	ldr	r3, [sp, #4]
 80085a0:	bfd8      	it	le
 80085a2:	2501      	movle	r5, #1
 80085a4:	441d      	add	r5, r3
 80085a6:	f04f 0800 	mov.w	r8, #0
 80085aa:	ee18 1a10 	vmov	r1, s16
 80085ae:	2201      	movs	r2, #1
 80085b0:	4620      	mov	r0, r4
 80085b2:	f000 fa5f 	bl	8008a74 <__lshift>
 80085b6:	4631      	mov	r1, r6
 80085b8:	ee08 0a10 	vmov	s16, r0
 80085bc:	f000 faca 	bl	8008b54 <__mcmp>
 80085c0:	2800      	cmp	r0, #0
 80085c2:	dc91      	bgt.n	80084e8 <_dtoa_r+0xaa8>
 80085c4:	d102      	bne.n	80085cc <_dtoa_r+0xb8c>
 80085c6:	f01a 0f01 	tst.w	sl, #1
 80085ca:	d18d      	bne.n	80084e8 <_dtoa_r+0xaa8>
 80085cc:	462b      	mov	r3, r5
 80085ce:	461d      	mov	r5, r3
 80085d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085d4:	2a30      	cmp	r2, #48	; 0x30
 80085d6:	d0fa      	beq.n	80085ce <_dtoa_r+0xb8e>
 80085d8:	e6d7      	b.n	800838a <_dtoa_r+0x94a>
 80085da:	9a01      	ldr	r2, [sp, #4]
 80085dc:	429a      	cmp	r2, r3
 80085de:	d184      	bne.n	80084ea <_dtoa_r+0xaaa>
 80085e0:	9b00      	ldr	r3, [sp, #0]
 80085e2:	3301      	adds	r3, #1
 80085e4:	9300      	str	r3, [sp, #0]
 80085e6:	2331      	movs	r3, #49	; 0x31
 80085e8:	7013      	strb	r3, [r2, #0]
 80085ea:	e6ce      	b.n	800838a <_dtoa_r+0x94a>
 80085ec:	4b09      	ldr	r3, [pc, #36]	; (8008614 <_dtoa_r+0xbd4>)
 80085ee:	f7ff ba95 	b.w	8007b1c <_dtoa_r+0xdc>
 80085f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	f47f aa6e 	bne.w	8007ad6 <_dtoa_r+0x96>
 80085fa:	4b07      	ldr	r3, [pc, #28]	; (8008618 <_dtoa_r+0xbd8>)
 80085fc:	f7ff ba8e 	b.w	8007b1c <_dtoa_r+0xdc>
 8008600:	9b02      	ldr	r3, [sp, #8]
 8008602:	2b00      	cmp	r3, #0
 8008604:	dcae      	bgt.n	8008564 <_dtoa_r+0xb24>
 8008606:	9b06      	ldr	r3, [sp, #24]
 8008608:	2b02      	cmp	r3, #2
 800860a:	f73f aea8 	bgt.w	800835e <_dtoa_r+0x91e>
 800860e:	e7a9      	b.n	8008564 <_dtoa_r+0xb24>
 8008610:	08009b67 	.word	0x08009b67
 8008614:	08009ac4 	.word	0x08009ac4
 8008618:	08009ae8 	.word	0x08009ae8

0800861c <_localeconv_r>:
 800861c:	4800      	ldr	r0, [pc, #0]	; (8008620 <_localeconv_r+0x4>)
 800861e:	4770      	bx	lr
 8008620:	2000016c 	.word	0x2000016c

08008624 <malloc>:
 8008624:	4b02      	ldr	r3, [pc, #8]	; (8008630 <malloc+0xc>)
 8008626:	4601      	mov	r1, r0
 8008628:	6818      	ldr	r0, [r3, #0]
 800862a:	f000 bc17 	b.w	8008e5c <_malloc_r>
 800862e:	bf00      	nop
 8008630:	20000018 	.word	0x20000018

08008634 <memcpy>:
 8008634:	440a      	add	r2, r1
 8008636:	4291      	cmp	r1, r2
 8008638:	f100 33ff 	add.w	r3, r0, #4294967295
 800863c:	d100      	bne.n	8008640 <memcpy+0xc>
 800863e:	4770      	bx	lr
 8008640:	b510      	push	{r4, lr}
 8008642:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008646:	f803 4f01 	strb.w	r4, [r3, #1]!
 800864a:	4291      	cmp	r1, r2
 800864c:	d1f9      	bne.n	8008642 <memcpy+0xe>
 800864e:	bd10      	pop	{r4, pc}

08008650 <_Balloc>:
 8008650:	b570      	push	{r4, r5, r6, lr}
 8008652:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008654:	4604      	mov	r4, r0
 8008656:	460d      	mov	r5, r1
 8008658:	b976      	cbnz	r6, 8008678 <_Balloc+0x28>
 800865a:	2010      	movs	r0, #16
 800865c:	f7ff ffe2 	bl	8008624 <malloc>
 8008660:	4602      	mov	r2, r0
 8008662:	6260      	str	r0, [r4, #36]	; 0x24
 8008664:	b920      	cbnz	r0, 8008670 <_Balloc+0x20>
 8008666:	4b18      	ldr	r3, [pc, #96]	; (80086c8 <_Balloc+0x78>)
 8008668:	4818      	ldr	r0, [pc, #96]	; (80086cc <_Balloc+0x7c>)
 800866a:	2166      	movs	r1, #102	; 0x66
 800866c:	f000 fc7a 	bl	8008f64 <__assert_func>
 8008670:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008674:	6006      	str	r6, [r0, #0]
 8008676:	60c6      	str	r6, [r0, #12]
 8008678:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800867a:	68f3      	ldr	r3, [r6, #12]
 800867c:	b183      	cbz	r3, 80086a0 <_Balloc+0x50>
 800867e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008686:	b9b8      	cbnz	r0, 80086b8 <_Balloc+0x68>
 8008688:	2101      	movs	r1, #1
 800868a:	fa01 f605 	lsl.w	r6, r1, r5
 800868e:	1d72      	adds	r2, r6, #5
 8008690:	0092      	lsls	r2, r2, #2
 8008692:	4620      	mov	r0, r4
 8008694:	f000 fb60 	bl	8008d58 <_calloc_r>
 8008698:	b160      	cbz	r0, 80086b4 <_Balloc+0x64>
 800869a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800869e:	e00e      	b.n	80086be <_Balloc+0x6e>
 80086a0:	2221      	movs	r2, #33	; 0x21
 80086a2:	2104      	movs	r1, #4
 80086a4:	4620      	mov	r0, r4
 80086a6:	f000 fb57 	bl	8008d58 <_calloc_r>
 80086aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086ac:	60f0      	str	r0, [r6, #12]
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d1e4      	bne.n	800867e <_Balloc+0x2e>
 80086b4:	2000      	movs	r0, #0
 80086b6:	bd70      	pop	{r4, r5, r6, pc}
 80086b8:	6802      	ldr	r2, [r0, #0]
 80086ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80086be:	2300      	movs	r3, #0
 80086c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80086c4:	e7f7      	b.n	80086b6 <_Balloc+0x66>
 80086c6:	bf00      	nop
 80086c8:	08009af5 	.word	0x08009af5
 80086cc:	08009b78 	.word	0x08009b78

080086d0 <_Bfree>:
 80086d0:	b570      	push	{r4, r5, r6, lr}
 80086d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80086d4:	4605      	mov	r5, r0
 80086d6:	460c      	mov	r4, r1
 80086d8:	b976      	cbnz	r6, 80086f8 <_Bfree+0x28>
 80086da:	2010      	movs	r0, #16
 80086dc:	f7ff ffa2 	bl	8008624 <malloc>
 80086e0:	4602      	mov	r2, r0
 80086e2:	6268      	str	r0, [r5, #36]	; 0x24
 80086e4:	b920      	cbnz	r0, 80086f0 <_Bfree+0x20>
 80086e6:	4b09      	ldr	r3, [pc, #36]	; (800870c <_Bfree+0x3c>)
 80086e8:	4809      	ldr	r0, [pc, #36]	; (8008710 <_Bfree+0x40>)
 80086ea:	218a      	movs	r1, #138	; 0x8a
 80086ec:	f000 fc3a 	bl	8008f64 <__assert_func>
 80086f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086f4:	6006      	str	r6, [r0, #0]
 80086f6:	60c6      	str	r6, [r0, #12]
 80086f8:	b13c      	cbz	r4, 800870a <_Bfree+0x3a>
 80086fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80086fc:	6862      	ldr	r2, [r4, #4]
 80086fe:	68db      	ldr	r3, [r3, #12]
 8008700:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008704:	6021      	str	r1, [r4, #0]
 8008706:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800870a:	bd70      	pop	{r4, r5, r6, pc}
 800870c:	08009af5 	.word	0x08009af5
 8008710:	08009b78 	.word	0x08009b78

08008714 <__multadd>:
 8008714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008718:	690d      	ldr	r5, [r1, #16]
 800871a:	4607      	mov	r7, r0
 800871c:	460c      	mov	r4, r1
 800871e:	461e      	mov	r6, r3
 8008720:	f101 0c14 	add.w	ip, r1, #20
 8008724:	2000      	movs	r0, #0
 8008726:	f8dc 3000 	ldr.w	r3, [ip]
 800872a:	b299      	uxth	r1, r3
 800872c:	fb02 6101 	mla	r1, r2, r1, r6
 8008730:	0c1e      	lsrs	r6, r3, #16
 8008732:	0c0b      	lsrs	r3, r1, #16
 8008734:	fb02 3306 	mla	r3, r2, r6, r3
 8008738:	b289      	uxth	r1, r1
 800873a:	3001      	adds	r0, #1
 800873c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008740:	4285      	cmp	r5, r0
 8008742:	f84c 1b04 	str.w	r1, [ip], #4
 8008746:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800874a:	dcec      	bgt.n	8008726 <__multadd+0x12>
 800874c:	b30e      	cbz	r6, 8008792 <__multadd+0x7e>
 800874e:	68a3      	ldr	r3, [r4, #8]
 8008750:	42ab      	cmp	r3, r5
 8008752:	dc19      	bgt.n	8008788 <__multadd+0x74>
 8008754:	6861      	ldr	r1, [r4, #4]
 8008756:	4638      	mov	r0, r7
 8008758:	3101      	adds	r1, #1
 800875a:	f7ff ff79 	bl	8008650 <_Balloc>
 800875e:	4680      	mov	r8, r0
 8008760:	b928      	cbnz	r0, 800876e <__multadd+0x5a>
 8008762:	4602      	mov	r2, r0
 8008764:	4b0c      	ldr	r3, [pc, #48]	; (8008798 <__multadd+0x84>)
 8008766:	480d      	ldr	r0, [pc, #52]	; (800879c <__multadd+0x88>)
 8008768:	21b5      	movs	r1, #181	; 0xb5
 800876a:	f000 fbfb 	bl	8008f64 <__assert_func>
 800876e:	6922      	ldr	r2, [r4, #16]
 8008770:	3202      	adds	r2, #2
 8008772:	f104 010c 	add.w	r1, r4, #12
 8008776:	0092      	lsls	r2, r2, #2
 8008778:	300c      	adds	r0, #12
 800877a:	f7ff ff5b 	bl	8008634 <memcpy>
 800877e:	4621      	mov	r1, r4
 8008780:	4638      	mov	r0, r7
 8008782:	f7ff ffa5 	bl	80086d0 <_Bfree>
 8008786:	4644      	mov	r4, r8
 8008788:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800878c:	3501      	adds	r5, #1
 800878e:	615e      	str	r6, [r3, #20]
 8008790:	6125      	str	r5, [r4, #16]
 8008792:	4620      	mov	r0, r4
 8008794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008798:	08009b67 	.word	0x08009b67
 800879c:	08009b78 	.word	0x08009b78

080087a0 <__hi0bits>:
 80087a0:	0c03      	lsrs	r3, r0, #16
 80087a2:	041b      	lsls	r3, r3, #16
 80087a4:	b9d3      	cbnz	r3, 80087dc <__hi0bits+0x3c>
 80087a6:	0400      	lsls	r0, r0, #16
 80087a8:	2310      	movs	r3, #16
 80087aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80087ae:	bf04      	itt	eq
 80087b0:	0200      	lsleq	r0, r0, #8
 80087b2:	3308      	addeq	r3, #8
 80087b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80087b8:	bf04      	itt	eq
 80087ba:	0100      	lsleq	r0, r0, #4
 80087bc:	3304      	addeq	r3, #4
 80087be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80087c2:	bf04      	itt	eq
 80087c4:	0080      	lsleq	r0, r0, #2
 80087c6:	3302      	addeq	r3, #2
 80087c8:	2800      	cmp	r0, #0
 80087ca:	db05      	blt.n	80087d8 <__hi0bits+0x38>
 80087cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80087d0:	f103 0301 	add.w	r3, r3, #1
 80087d4:	bf08      	it	eq
 80087d6:	2320      	moveq	r3, #32
 80087d8:	4618      	mov	r0, r3
 80087da:	4770      	bx	lr
 80087dc:	2300      	movs	r3, #0
 80087de:	e7e4      	b.n	80087aa <__hi0bits+0xa>

080087e0 <__lo0bits>:
 80087e0:	6803      	ldr	r3, [r0, #0]
 80087e2:	f013 0207 	ands.w	r2, r3, #7
 80087e6:	4601      	mov	r1, r0
 80087e8:	d00b      	beq.n	8008802 <__lo0bits+0x22>
 80087ea:	07da      	lsls	r2, r3, #31
 80087ec:	d423      	bmi.n	8008836 <__lo0bits+0x56>
 80087ee:	0798      	lsls	r0, r3, #30
 80087f0:	bf49      	itett	mi
 80087f2:	085b      	lsrmi	r3, r3, #1
 80087f4:	089b      	lsrpl	r3, r3, #2
 80087f6:	2001      	movmi	r0, #1
 80087f8:	600b      	strmi	r3, [r1, #0]
 80087fa:	bf5c      	itt	pl
 80087fc:	600b      	strpl	r3, [r1, #0]
 80087fe:	2002      	movpl	r0, #2
 8008800:	4770      	bx	lr
 8008802:	b298      	uxth	r0, r3
 8008804:	b9a8      	cbnz	r0, 8008832 <__lo0bits+0x52>
 8008806:	0c1b      	lsrs	r3, r3, #16
 8008808:	2010      	movs	r0, #16
 800880a:	b2da      	uxtb	r2, r3
 800880c:	b90a      	cbnz	r2, 8008812 <__lo0bits+0x32>
 800880e:	3008      	adds	r0, #8
 8008810:	0a1b      	lsrs	r3, r3, #8
 8008812:	071a      	lsls	r2, r3, #28
 8008814:	bf04      	itt	eq
 8008816:	091b      	lsreq	r3, r3, #4
 8008818:	3004      	addeq	r0, #4
 800881a:	079a      	lsls	r2, r3, #30
 800881c:	bf04      	itt	eq
 800881e:	089b      	lsreq	r3, r3, #2
 8008820:	3002      	addeq	r0, #2
 8008822:	07da      	lsls	r2, r3, #31
 8008824:	d403      	bmi.n	800882e <__lo0bits+0x4e>
 8008826:	085b      	lsrs	r3, r3, #1
 8008828:	f100 0001 	add.w	r0, r0, #1
 800882c:	d005      	beq.n	800883a <__lo0bits+0x5a>
 800882e:	600b      	str	r3, [r1, #0]
 8008830:	4770      	bx	lr
 8008832:	4610      	mov	r0, r2
 8008834:	e7e9      	b.n	800880a <__lo0bits+0x2a>
 8008836:	2000      	movs	r0, #0
 8008838:	4770      	bx	lr
 800883a:	2020      	movs	r0, #32
 800883c:	4770      	bx	lr
	...

08008840 <__i2b>:
 8008840:	b510      	push	{r4, lr}
 8008842:	460c      	mov	r4, r1
 8008844:	2101      	movs	r1, #1
 8008846:	f7ff ff03 	bl	8008650 <_Balloc>
 800884a:	4602      	mov	r2, r0
 800884c:	b928      	cbnz	r0, 800885a <__i2b+0x1a>
 800884e:	4b05      	ldr	r3, [pc, #20]	; (8008864 <__i2b+0x24>)
 8008850:	4805      	ldr	r0, [pc, #20]	; (8008868 <__i2b+0x28>)
 8008852:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008856:	f000 fb85 	bl	8008f64 <__assert_func>
 800885a:	2301      	movs	r3, #1
 800885c:	6144      	str	r4, [r0, #20]
 800885e:	6103      	str	r3, [r0, #16]
 8008860:	bd10      	pop	{r4, pc}
 8008862:	bf00      	nop
 8008864:	08009b67 	.word	0x08009b67
 8008868:	08009b78 	.word	0x08009b78

0800886c <__multiply>:
 800886c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008870:	4691      	mov	r9, r2
 8008872:	690a      	ldr	r2, [r1, #16]
 8008874:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008878:	429a      	cmp	r2, r3
 800887a:	bfb8      	it	lt
 800887c:	460b      	movlt	r3, r1
 800887e:	460c      	mov	r4, r1
 8008880:	bfbc      	itt	lt
 8008882:	464c      	movlt	r4, r9
 8008884:	4699      	movlt	r9, r3
 8008886:	6927      	ldr	r7, [r4, #16]
 8008888:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800888c:	68a3      	ldr	r3, [r4, #8]
 800888e:	6861      	ldr	r1, [r4, #4]
 8008890:	eb07 060a 	add.w	r6, r7, sl
 8008894:	42b3      	cmp	r3, r6
 8008896:	b085      	sub	sp, #20
 8008898:	bfb8      	it	lt
 800889a:	3101      	addlt	r1, #1
 800889c:	f7ff fed8 	bl	8008650 <_Balloc>
 80088a0:	b930      	cbnz	r0, 80088b0 <__multiply+0x44>
 80088a2:	4602      	mov	r2, r0
 80088a4:	4b44      	ldr	r3, [pc, #272]	; (80089b8 <__multiply+0x14c>)
 80088a6:	4845      	ldr	r0, [pc, #276]	; (80089bc <__multiply+0x150>)
 80088a8:	f240 115d 	movw	r1, #349	; 0x15d
 80088ac:	f000 fb5a 	bl	8008f64 <__assert_func>
 80088b0:	f100 0514 	add.w	r5, r0, #20
 80088b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80088b8:	462b      	mov	r3, r5
 80088ba:	2200      	movs	r2, #0
 80088bc:	4543      	cmp	r3, r8
 80088be:	d321      	bcc.n	8008904 <__multiply+0x98>
 80088c0:	f104 0314 	add.w	r3, r4, #20
 80088c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80088c8:	f109 0314 	add.w	r3, r9, #20
 80088cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80088d0:	9202      	str	r2, [sp, #8]
 80088d2:	1b3a      	subs	r2, r7, r4
 80088d4:	3a15      	subs	r2, #21
 80088d6:	f022 0203 	bic.w	r2, r2, #3
 80088da:	3204      	adds	r2, #4
 80088dc:	f104 0115 	add.w	r1, r4, #21
 80088e0:	428f      	cmp	r7, r1
 80088e2:	bf38      	it	cc
 80088e4:	2204      	movcc	r2, #4
 80088e6:	9201      	str	r2, [sp, #4]
 80088e8:	9a02      	ldr	r2, [sp, #8]
 80088ea:	9303      	str	r3, [sp, #12]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d80c      	bhi.n	800890a <__multiply+0x9e>
 80088f0:	2e00      	cmp	r6, #0
 80088f2:	dd03      	ble.n	80088fc <__multiply+0x90>
 80088f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d05a      	beq.n	80089b2 <__multiply+0x146>
 80088fc:	6106      	str	r6, [r0, #16]
 80088fe:	b005      	add	sp, #20
 8008900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008904:	f843 2b04 	str.w	r2, [r3], #4
 8008908:	e7d8      	b.n	80088bc <__multiply+0x50>
 800890a:	f8b3 a000 	ldrh.w	sl, [r3]
 800890e:	f1ba 0f00 	cmp.w	sl, #0
 8008912:	d024      	beq.n	800895e <__multiply+0xf2>
 8008914:	f104 0e14 	add.w	lr, r4, #20
 8008918:	46a9      	mov	r9, r5
 800891a:	f04f 0c00 	mov.w	ip, #0
 800891e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008922:	f8d9 1000 	ldr.w	r1, [r9]
 8008926:	fa1f fb82 	uxth.w	fp, r2
 800892a:	b289      	uxth	r1, r1
 800892c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008930:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008934:	f8d9 2000 	ldr.w	r2, [r9]
 8008938:	4461      	add	r1, ip
 800893a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800893e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008942:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008946:	b289      	uxth	r1, r1
 8008948:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800894c:	4577      	cmp	r7, lr
 800894e:	f849 1b04 	str.w	r1, [r9], #4
 8008952:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008956:	d8e2      	bhi.n	800891e <__multiply+0xb2>
 8008958:	9a01      	ldr	r2, [sp, #4]
 800895a:	f845 c002 	str.w	ip, [r5, r2]
 800895e:	9a03      	ldr	r2, [sp, #12]
 8008960:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008964:	3304      	adds	r3, #4
 8008966:	f1b9 0f00 	cmp.w	r9, #0
 800896a:	d020      	beq.n	80089ae <__multiply+0x142>
 800896c:	6829      	ldr	r1, [r5, #0]
 800896e:	f104 0c14 	add.w	ip, r4, #20
 8008972:	46ae      	mov	lr, r5
 8008974:	f04f 0a00 	mov.w	sl, #0
 8008978:	f8bc b000 	ldrh.w	fp, [ip]
 800897c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008980:	fb09 220b 	mla	r2, r9, fp, r2
 8008984:	4492      	add	sl, r2
 8008986:	b289      	uxth	r1, r1
 8008988:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800898c:	f84e 1b04 	str.w	r1, [lr], #4
 8008990:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008994:	f8be 1000 	ldrh.w	r1, [lr]
 8008998:	0c12      	lsrs	r2, r2, #16
 800899a:	fb09 1102 	mla	r1, r9, r2, r1
 800899e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80089a2:	4567      	cmp	r7, ip
 80089a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80089a8:	d8e6      	bhi.n	8008978 <__multiply+0x10c>
 80089aa:	9a01      	ldr	r2, [sp, #4]
 80089ac:	50a9      	str	r1, [r5, r2]
 80089ae:	3504      	adds	r5, #4
 80089b0:	e79a      	b.n	80088e8 <__multiply+0x7c>
 80089b2:	3e01      	subs	r6, #1
 80089b4:	e79c      	b.n	80088f0 <__multiply+0x84>
 80089b6:	bf00      	nop
 80089b8:	08009b67 	.word	0x08009b67
 80089bc:	08009b78 	.word	0x08009b78

080089c0 <__pow5mult>:
 80089c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089c4:	4615      	mov	r5, r2
 80089c6:	f012 0203 	ands.w	r2, r2, #3
 80089ca:	4606      	mov	r6, r0
 80089cc:	460f      	mov	r7, r1
 80089ce:	d007      	beq.n	80089e0 <__pow5mult+0x20>
 80089d0:	4c25      	ldr	r4, [pc, #148]	; (8008a68 <__pow5mult+0xa8>)
 80089d2:	3a01      	subs	r2, #1
 80089d4:	2300      	movs	r3, #0
 80089d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80089da:	f7ff fe9b 	bl	8008714 <__multadd>
 80089de:	4607      	mov	r7, r0
 80089e0:	10ad      	asrs	r5, r5, #2
 80089e2:	d03d      	beq.n	8008a60 <__pow5mult+0xa0>
 80089e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80089e6:	b97c      	cbnz	r4, 8008a08 <__pow5mult+0x48>
 80089e8:	2010      	movs	r0, #16
 80089ea:	f7ff fe1b 	bl	8008624 <malloc>
 80089ee:	4602      	mov	r2, r0
 80089f0:	6270      	str	r0, [r6, #36]	; 0x24
 80089f2:	b928      	cbnz	r0, 8008a00 <__pow5mult+0x40>
 80089f4:	4b1d      	ldr	r3, [pc, #116]	; (8008a6c <__pow5mult+0xac>)
 80089f6:	481e      	ldr	r0, [pc, #120]	; (8008a70 <__pow5mult+0xb0>)
 80089f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80089fc:	f000 fab2 	bl	8008f64 <__assert_func>
 8008a00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a04:	6004      	str	r4, [r0, #0]
 8008a06:	60c4      	str	r4, [r0, #12]
 8008a08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008a0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a10:	b94c      	cbnz	r4, 8008a26 <__pow5mult+0x66>
 8008a12:	f240 2171 	movw	r1, #625	; 0x271
 8008a16:	4630      	mov	r0, r6
 8008a18:	f7ff ff12 	bl	8008840 <__i2b>
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a22:	4604      	mov	r4, r0
 8008a24:	6003      	str	r3, [r0, #0]
 8008a26:	f04f 0900 	mov.w	r9, #0
 8008a2a:	07eb      	lsls	r3, r5, #31
 8008a2c:	d50a      	bpl.n	8008a44 <__pow5mult+0x84>
 8008a2e:	4639      	mov	r1, r7
 8008a30:	4622      	mov	r2, r4
 8008a32:	4630      	mov	r0, r6
 8008a34:	f7ff ff1a 	bl	800886c <__multiply>
 8008a38:	4639      	mov	r1, r7
 8008a3a:	4680      	mov	r8, r0
 8008a3c:	4630      	mov	r0, r6
 8008a3e:	f7ff fe47 	bl	80086d0 <_Bfree>
 8008a42:	4647      	mov	r7, r8
 8008a44:	106d      	asrs	r5, r5, #1
 8008a46:	d00b      	beq.n	8008a60 <__pow5mult+0xa0>
 8008a48:	6820      	ldr	r0, [r4, #0]
 8008a4a:	b938      	cbnz	r0, 8008a5c <__pow5mult+0x9c>
 8008a4c:	4622      	mov	r2, r4
 8008a4e:	4621      	mov	r1, r4
 8008a50:	4630      	mov	r0, r6
 8008a52:	f7ff ff0b 	bl	800886c <__multiply>
 8008a56:	6020      	str	r0, [r4, #0]
 8008a58:	f8c0 9000 	str.w	r9, [r0]
 8008a5c:	4604      	mov	r4, r0
 8008a5e:	e7e4      	b.n	8008a2a <__pow5mult+0x6a>
 8008a60:	4638      	mov	r0, r7
 8008a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a66:	bf00      	nop
 8008a68:	08009cc8 	.word	0x08009cc8
 8008a6c:	08009af5 	.word	0x08009af5
 8008a70:	08009b78 	.word	0x08009b78

08008a74 <__lshift>:
 8008a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a78:	460c      	mov	r4, r1
 8008a7a:	6849      	ldr	r1, [r1, #4]
 8008a7c:	6923      	ldr	r3, [r4, #16]
 8008a7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008a82:	68a3      	ldr	r3, [r4, #8]
 8008a84:	4607      	mov	r7, r0
 8008a86:	4691      	mov	r9, r2
 8008a88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a8c:	f108 0601 	add.w	r6, r8, #1
 8008a90:	42b3      	cmp	r3, r6
 8008a92:	db0b      	blt.n	8008aac <__lshift+0x38>
 8008a94:	4638      	mov	r0, r7
 8008a96:	f7ff fddb 	bl	8008650 <_Balloc>
 8008a9a:	4605      	mov	r5, r0
 8008a9c:	b948      	cbnz	r0, 8008ab2 <__lshift+0x3e>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	4b2a      	ldr	r3, [pc, #168]	; (8008b4c <__lshift+0xd8>)
 8008aa2:	482b      	ldr	r0, [pc, #172]	; (8008b50 <__lshift+0xdc>)
 8008aa4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008aa8:	f000 fa5c 	bl	8008f64 <__assert_func>
 8008aac:	3101      	adds	r1, #1
 8008aae:	005b      	lsls	r3, r3, #1
 8008ab0:	e7ee      	b.n	8008a90 <__lshift+0x1c>
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	f100 0114 	add.w	r1, r0, #20
 8008ab8:	f100 0210 	add.w	r2, r0, #16
 8008abc:	4618      	mov	r0, r3
 8008abe:	4553      	cmp	r3, sl
 8008ac0:	db37      	blt.n	8008b32 <__lshift+0xbe>
 8008ac2:	6920      	ldr	r0, [r4, #16]
 8008ac4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ac8:	f104 0314 	add.w	r3, r4, #20
 8008acc:	f019 091f 	ands.w	r9, r9, #31
 8008ad0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ad4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008ad8:	d02f      	beq.n	8008b3a <__lshift+0xc6>
 8008ada:	f1c9 0e20 	rsb	lr, r9, #32
 8008ade:	468a      	mov	sl, r1
 8008ae0:	f04f 0c00 	mov.w	ip, #0
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	fa02 f209 	lsl.w	r2, r2, r9
 8008aea:	ea42 020c 	orr.w	r2, r2, ip
 8008aee:	f84a 2b04 	str.w	r2, [sl], #4
 8008af2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008af6:	4298      	cmp	r0, r3
 8008af8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008afc:	d8f2      	bhi.n	8008ae4 <__lshift+0x70>
 8008afe:	1b03      	subs	r3, r0, r4
 8008b00:	3b15      	subs	r3, #21
 8008b02:	f023 0303 	bic.w	r3, r3, #3
 8008b06:	3304      	adds	r3, #4
 8008b08:	f104 0215 	add.w	r2, r4, #21
 8008b0c:	4290      	cmp	r0, r2
 8008b0e:	bf38      	it	cc
 8008b10:	2304      	movcc	r3, #4
 8008b12:	f841 c003 	str.w	ip, [r1, r3]
 8008b16:	f1bc 0f00 	cmp.w	ip, #0
 8008b1a:	d001      	beq.n	8008b20 <__lshift+0xac>
 8008b1c:	f108 0602 	add.w	r6, r8, #2
 8008b20:	3e01      	subs	r6, #1
 8008b22:	4638      	mov	r0, r7
 8008b24:	612e      	str	r6, [r5, #16]
 8008b26:	4621      	mov	r1, r4
 8008b28:	f7ff fdd2 	bl	80086d0 <_Bfree>
 8008b2c:	4628      	mov	r0, r5
 8008b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b32:	f842 0f04 	str.w	r0, [r2, #4]!
 8008b36:	3301      	adds	r3, #1
 8008b38:	e7c1      	b.n	8008abe <__lshift+0x4a>
 8008b3a:	3904      	subs	r1, #4
 8008b3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b40:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b44:	4298      	cmp	r0, r3
 8008b46:	d8f9      	bhi.n	8008b3c <__lshift+0xc8>
 8008b48:	e7ea      	b.n	8008b20 <__lshift+0xac>
 8008b4a:	bf00      	nop
 8008b4c:	08009b67 	.word	0x08009b67
 8008b50:	08009b78 	.word	0x08009b78

08008b54 <__mcmp>:
 8008b54:	b530      	push	{r4, r5, lr}
 8008b56:	6902      	ldr	r2, [r0, #16]
 8008b58:	690c      	ldr	r4, [r1, #16]
 8008b5a:	1b12      	subs	r2, r2, r4
 8008b5c:	d10e      	bne.n	8008b7c <__mcmp+0x28>
 8008b5e:	f100 0314 	add.w	r3, r0, #20
 8008b62:	3114      	adds	r1, #20
 8008b64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008b68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008b6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008b70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008b74:	42a5      	cmp	r5, r4
 8008b76:	d003      	beq.n	8008b80 <__mcmp+0x2c>
 8008b78:	d305      	bcc.n	8008b86 <__mcmp+0x32>
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	4610      	mov	r0, r2
 8008b7e:	bd30      	pop	{r4, r5, pc}
 8008b80:	4283      	cmp	r3, r0
 8008b82:	d3f3      	bcc.n	8008b6c <__mcmp+0x18>
 8008b84:	e7fa      	b.n	8008b7c <__mcmp+0x28>
 8008b86:	f04f 32ff 	mov.w	r2, #4294967295
 8008b8a:	e7f7      	b.n	8008b7c <__mcmp+0x28>

08008b8c <__mdiff>:
 8008b8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b90:	460c      	mov	r4, r1
 8008b92:	4606      	mov	r6, r0
 8008b94:	4611      	mov	r1, r2
 8008b96:	4620      	mov	r0, r4
 8008b98:	4690      	mov	r8, r2
 8008b9a:	f7ff ffdb 	bl	8008b54 <__mcmp>
 8008b9e:	1e05      	subs	r5, r0, #0
 8008ba0:	d110      	bne.n	8008bc4 <__mdiff+0x38>
 8008ba2:	4629      	mov	r1, r5
 8008ba4:	4630      	mov	r0, r6
 8008ba6:	f7ff fd53 	bl	8008650 <_Balloc>
 8008baa:	b930      	cbnz	r0, 8008bba <__mdiff+0x2e>
 8008bac:	4b3a      	ldr	r3, [pc, #232]	; (8008c98 <__mdiff+0x10c>)
 8008bae:	4602      	mov	r2, r0
 8008bb0:	f240 2132 	movw	r1, #562	; 0x232
 8008bb4:	4839      	ldr	r0, [pc, #228]	; (8008c9c <__mdiff+0x110>)
 8008bb6:	f000 f9d5 	bl	8008f64 <__assert_func>
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008bc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bc4:	bfa4      	itt	ge
 8008bc6:	4643      	movge	r3, r8
 8008bc8:	46a0      	movge	r8, r4
 8008bca:	4630      	mov	r0, r6
 8008bcc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008bd0:	bfa6      	itte	ge
 8008bd2:	461c      	movge	r4, r3
 8008bd4:	2500      	movge	r5, #0
 8008bd6:	2501      	movlt	r5, #1
 8008bd8:	f7ff fd3a 	bl	8008650 <_Balloc>
 8008bdc:	b920      	cbnz	r0, 8008be8 <__mdiff+0x5c>
 8008bde:	4b2e      	ldr	r3, [pc, #184]	; (8008c98 <__mdiff+0x10c>)
 8008be0:	4602      	mov	r2, r0
 8008be2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008be6:	e7e5      	b.n	8008bb4 <__mdiff+0x28>
 8008be8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008bec:	6926      	ldr	r6, [r4, #16]
 8008bee:	60c5      	str	r5, [r0, #12]
 8008bf0:	f104 0914 	add.w	r9, r4, #20
 8008bf4:	f108 0514 	add.w	r5, r8, #20
 8008bf8:	f100 0e14 	add.w	lr, r0, #20
 8008bfc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008c00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008c04:	f108 0210 	add.w	r2, r8, #16
 8008c08:	46f2      	mov	sl, lr
 8008c0a:	2100      	movs	r1, #0
 8008c0c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008c10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008c14:	fa1f f883 	uxth.w	r8, r3
 8008c18:	fa11 f18b 	uxtah	r1, r1, fp
 8008c1c:	0c1b      	lsrs	r3, r3, #16
 8008c1e:	eba1 0808 	sub.w	r8, r1, r8
 8008c22:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008c26:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008c2a:	fa1f f888 	uxth.w	r8, r8
 8008c2e:	1419      	asrs	r1, r3, #16
 8008c30:	454e      	cmp	r6, r9
 8008c32:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008c36:	f84a 3b04 	str.w	r3, [sl], #4
 8008c3a:	d8e7      	bhi.n	8008c0c <__mdiff+0x80>
 8008c3c:	1b33      	subs	r3, r6, r4
 8008c3e:	3b15      	subs	r3, #21
 8008c40:	f023 0303 	bic.w	r3, r3, #3
 8008c44:	3304      	adds	r3, #4
 8008c46:	3415      	adds	r4, #21
 8008c48:	42a6      	cmp	r6, r4
 8008c4a:	bf38      	it	cc
 8008c4c:	2304      	movcc	r3, #4
 8008c4e:	441d      	add	r5, r3
 8008c50:	4473      	add	r3, lr
 8008c52:	469e      	mov	lr, r3
 8008c54:	462e      	mov	r6, r5
 8008c56:	4566      	cmp	r6, ip
 8008c58:	d30e      	bcc.n	8008c78 <__mdiff+0xec>
 8008c5a:	f10c 0203 	add.w	r2, ip, #3
 8008c5e:	1b52      	subs	r2, r2, r5
 8008c60:	f022 0203 	bic.w	r2, r2, #3
 8008c64:	3d03      	subs	r5, #3
 8008c66:	45ac      	cmp	ip, r5
 8008c68:	bf38      	it	cc
 8008c6a:	2200      	movcc	r2, #0
 8008c6c:	441a      	add	r2, r3
 8008c6e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008c72:	b17b      	cbz	r3, 8008c94 <__mdiff+0x108>
 8008c74:	6107      	str	r7, [r0, #16]
 8008c76:	e7a3      	b.n	8008bc0 <__mdiff+0x34>
 8008c78:	f856 8b04 	ldr.w	r8, [r6], #4
 8008c7c:	fa11 f288 	uxtah	r2, r1, r8
 8008c80:	1414      	asrs	r4, r2, #16
 8008c82:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008c86:	b292      	uxth	r2, r2
 8008c88:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008c8c:	f84e 2b04 	str.w	r2, [lr], #4
 8008c90:	1421      	asrs	r1, r4, #16
 8008c92:	e7e0      	b.n	8008c56 <__mdiff+0xca>
 8008c94:	3f01      	subs	r7, #1
 8008c96:	e7ea      	b.n	8008c6e <__mdiff+0xe2>
 8008c98:	08009b67 	.word	0x08009b67
 8008c9c:	08009b78 	.word	0x08009b78

08008ca0 <__d2b>:
 8008ca0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ca4:	4689      	mov	r9, r1
 8008ca6:	2101      	movs	r1, #1
 8008ca8:	ec57 6b10 	vmov	r6, r7, d0
 8008cac:	4690      	mov	r8, r2
 8008cae:	f7ff fccf 	bl	8008650 <_Balloc>
 8008cb2:	4604      	mov	r4, r0
 8008cb4:	b930      	cbnz	r0, 8008cc4 <__d2b+0x24>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	4b25      	ldr	r3, [pc, #148]	; (8008d50 <__d2b+0xb0>)
 8008cba:	4826      	ldr	r0, [pc, #152]	; (8008d54 <__d2b+0xb4>)
 8008cbc:	f240 310a 	movw	r1, #778	; 0x30a
 8008cc0:	f000 f950 	bl	8008f64 <__assert_func>
 8008cc4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008cc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008ccc:	bb35      	cbnz	r5, 8008d1c <__d2b+0x7c>
 8008cce:	2e00      	cmp	r6, #0
 8008cd0:	9301      	str	r3, [sp, #4]
 8008cd2:	d028      	beq.n	8008d26 <__d2b+0x86>
 8008cd4:	4668      	mov	r0, sp
 8008cd6:	9600      	str	r6, [sp, #0]
 8008cd8:	f7ff fd82 	bl	80087e0 <__lo0bits>
 8008cdc:	9900      	ldr	r1, [sp, #0]
 8008cde:	b300      	cbz	r0, 8008d22 <__d2b+0x82>
 8008ce0:	9a01      	ldr	r2, [sp, #4]
 8008ce2:	f1c0 0320 	rsb	r3, r0, #32
 8008ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8008cea:	430b      	orrs	r3, r1
 8008cec:	40c2      	lsrs	r2, r0
 8008cee:	6163      	str	r3, [r4, #20]
 8008cf0:	9201      	str	r2, [sp, #4]
 8008cf2:	9b01      	ldr	r3, [sp, #4]
 8008cf4:	61a3      	str	r3, [r4, #24]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	bf14      	ite	ne
 8008cfa:	2202      	movne	r2, #2
 8008cfc:	2201      	moveq	r2, #1
 8008cfe:	6122      	str	r2, [r4, #16]
 8008d00:	b1d5      	cbz	r5, 8008d38 <__d2b+0x98>
 8008d02:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008d06:	4405      	add	r5, r0
 8008d08:	f8c9 5000 	str.w	r5, [r9]
 8008d0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008d10:	f8c8 0000 	str.w	r0, [r8]
 8008d14:	4620      	mov	r0, r4
 8008d16:	b003      	add	sp, #12
 8008d18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d20:	e7d5      	b.n	8008cce <__d2b+0x2e>
 8008d22:	6161      	str	r1, [r4, #20]
 8008d24:	e7e5      	b.n	8008cf2 <__d2b+0x52>
 8008d26:	a801      	add	r0, sp, #4
 8008d28:	f7ff fd5a 	bl	80087e0 <__lo0bits>
 8008d2c:	9b01      	ldr	r3, [sp, #4]
 8008d2e:	6163      	str	r3, [r4, #20]
 8008d30:	2201      	movs	r2, #1
 8008d32:	6122      	str	r2, [r4, #16]
 8008d34:	3020      	adds	r0, #32
 8008d36:	e7e3      	b.n	8008d00 <__d2b+0x60>
 8008d38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008d3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008d40:	f8c9 0000 	str.w	r0, [r9]
 8008d44:	6918      	ldr	r0, [r3, #16]
 8008d46:	f7ff fd2b 	bl	80087a0 <__hi0bits>
 8008d4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008d4e:	e7df      	b.n	8008d10 <__d2b+0x70>
 8008d50:	08009b67 	.word	0x08009b67
 8008d54:	08009b78 	.word	0x08009b78

08008d58 <_calloc_r>:
 8008d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d5a:	fba1 2402 	umull	r2, r4, r1, r2
 8008d5e:	b94c      	cbnz	r4, 8008d74 <_calloc_r+0x1c>
 8008d60:	4611      	mov	r1, r2
 8008d62:	9201      	str	r2, [sp, #4]
 8008d64:	f000 f87a 	bl	8008e5c <_malloc_r>
 8008d68:	9a01      	ldr	r2, [sp, #4]
 8008d6a:	4605      	mov	r5, r0
 8008d6c:	b930      	cbnz	r0, 8008d7c <_calloc_r+0x24>
 8008d6e:	4628      	mov	r0, r5
 8008d70:	b003      	add	sp, #12
 8008d72:	bd30      	pop	{r4, r5, pc}
 8008d74:	220c      	movs	r2, #12
 8008d76:	6002      	str	r2, [r0, #0]
 8008d78:	2500      	movs	r5, #0
 8008d7a:	e7f8      	b.n	8008d6e <_calloc_r+0x16>
 8008d7c:	4621      	mov	r1, r4
 8008d7e:	f7fe f961 	bl	8007044 <memset>
 8008d82:	e7f4      	b.n	8008d6e <_calloc_r+0x16>

08008d84 <_free_r>:
 8008d84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d86:	2900      	cmp	r1, #0
 8008d88:	d044      	beq.n	8008e14 <_free_r+0x90>
 8008d8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d8e:	9001      	str	r0, [sp, #4]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	f1a1 0404 	sub.w	r4, r1, #4
 8008d96:	bfb8      	it	lt
 8008d98:	18e4      	addlt	r4, r4, r3
 8008d9a:	f000 f925 	bl	8008fe8 <__malloc_lock>
 8008d9e:	4a1e      	ldr	r2, [pc, #120]	; (8008e18 <_free_r+0x94>)
 8008da0:	9801      	ldr	r0, [sp, #4]
 8008da2:	6813      	ldr	r3, [r2, #0]
 8008da4:	b933      	cbnz	r3, 8008db4 <_free_r+0x30>
 8008da6:	6063      	str	r3, [r4, #4]
 8008da8:	6014      	str	r4, [r2, #0]
 8008daa:	b003      	add	sp, #12
 8008dac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008db0:	f000 b920 	b.w	8008ff4 <__malloc_unlock>
 8008db4:	42a3      	cmp	r3, r4
 8008db6:	d908      	bls.n	8008dca <_free_r+0x46>
 8008db8:	6825      	ldr	r5, [r4, #0]
 8008dba:	1961      	adds	r1, r4, r5
 8008dbc:	428b      	cmp	r3, r1
 8008dbe:	bf01      	itttt	eq
 8008dc0:	6819      	ldreq	r1, [r3, #0]
 8008dc2:	685b      	ldreq	r3, [r3, #4]
 8008dc4:	1949      	addeq	r1, r1, r5
 8008dc6:	6021      	streq	r1, [r4, #0]
 8008dc8:	e7ed      	b.n	8008da6 <_free_r+0x22>
 8008dca:	461a      	mov	r2, r3
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	b10b      	cbz	r3, 8008dd4 <_free_r+0x50>
 8008dd0:	42a3      	cmp	r3, r4
 8008dd2:	d9fa      	bls.n	8008dca <_free_r+0x46>
 8008dd4:	6811      	ldr	r1, [r2, #0]
 8008dd6:	1855      	adds	r5, r2, r1
 8008dd8:	42a5      	cmp	r5, r4
 8008dda:	d10b      	bne.n	8008df4 <_free_r+0x70>
 8008ddc:	6824      	ldr	r4, [r4, #0]
 8008dde:	4421      	add	r1, r4
 8008de0:	1854      	adds	r4, r2, r1
 8008de2:	42a3      	cmp	r3, r4
 8008de4:	6011      	str	r1, [r2, #0]
 8008de6:	d1e0      	bne.n	8008daa <_free_r+0x26>
 8008de8:	681c      	ldr	r4, [r3, #0]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	6053      	str	r3, [r2, #4]
 8008dee:	4421      	add	r1, r4
 8008df0:	6011      	str	r1, [r2, #0]
 8008df2:	e7da      	b.n	8008daa <_free_r+0x26>
 8008df4:	d902      	bls.n	8008dfc <_free_r+0x78>
 8008df6:	230c      	movs	r3, #12
 8008df8:	6003      	str	r3, [r0, #0]
 8008dfa:	e7d6      	b.n	8008daa <_free_r+0x26>
 8008dfc:	6825      	ldr	r5, [r4, #0]
 8008dfe:	1961      	adds	r1, r4, r5
 8008e00:	428b      	cmp	r3, r1
 8008e02:	bf04      	itt	eq
 8008e04:	6819      	ldreq	r1, [r3, #0]
 8008e06:	685b      	ldreq	r3, [r3, #4]
 8008e08:	6063      	str	r3, [r4, #4]
 8008e0a:	bf04      	itt	eq
 8008e0c:	1949      	addeq	r1, r1, r5
 8008e0e:	6021      	streq	r1, [r4, #0]
 8008e10:	6054      	str	r4, [r2, #4]
 8008e12:	e7ca      	b.n	8008daa <_free_r+0x26>
 8008e14:	b003      	add	sp, #12
 8008e16:	bd30      	pop	{r4, r5, pc}
 8008e18:	200008d4 	.word	0x200008d4

08008e1c <sbrk_aligned>:
 8008e1c:	b570      	push	{r4, r5, r6, lr}
 8008e1e:	4e0e      	ldr	r6, [pc, #56]	; (8008e58 <sbrk_aligned+0x3c>)
 8008e20:	460c      	mov	r4, r1
 8008e22:	6831      	ldr	r1, [r6, #0]
 8008e24:	4605      	mov	r5, r0
 8008e26:	b911      	cbnz	r1, 8008e2e <sbrk_aligned+0x12>
 8008e28:	f000 f88c 	bl	8008f44 <_sbrk_r>
 8008e2c:	6030      	str	r0, [r6, #0]
 8008e2e:	4621      	mov	r1, r4
 8008e30:	4628      	mov	r0, r5
 8008e32:	f000 f887 	bl	8008f44 <_sbrk_r>
 8008e36:	1c43      	adds	r3, r0, #1
 8008e38:	d00a      	beq.n	8008e50 <sbrk_aligned+0x34>
 8008e3a:	1cc4      	adds	r4, r0, #3
 8008e3c:	f024 0403 	bic.w	r4, r4, #3
 8008e40:	42a0      	cmp	r0, r4
 8008e42:	d007      	beq.n	8008e54 <sbrk_aligned+0x38>
 8008e44:	1a21      	subs	r1, r4, r0
 8008e46:	4628      	mov	r0, r5
 8008e48:	f000 f87c 	bl	8008f44 <_sbrk_r>
 8008e4c:	3001      	adds	r0, #1
 8008e4e:	d101      	bne.n	8008e54 <sbrk_aligned+0x38>
 8008e50:	f04f 34ff 	mov.w	r4, #4294967295
 8008e54:	4620      	mov	r0, r4
 8008e56:	bd70      	pop	{r4, r5, r6, pc}
 8008e58:	200008d8 	.word	0x200008d8

08008e5c <_malloc_r>:
 8008e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e60:	1ccd      	adds	r5, r1, #3
 8008e62:	f025 0503 	bic.w	r5, r5, #3
 8008e66:	3508      	adds	r5, #8
 8008e68:	2d0c      	cmp	r5, #12
 8008e6a:	bf38      	it	cc
 8008e6c:	250c      	movcc	r5, #12
 8008e6e:	2d00      	cmp	r5, #0
 8008e70:	4607      	mov	r7, r0
 8008e72:	db01      	blt.n	8008e78 <_malloc_r+0x1c>
 8008e74:	42a9      	cmp	r1, r5
 8008e76:	d905      	bls.n	8008e84 <_malloc_r+0x28>
 8008e78:	230c      	movs	r3, #12
 8008e7a:	603b      	str	r3, [r7, #0]
 8008e7c:	2600      	movs	r6, #0
 8008e7e:	4630      	mov	r0, r6
 8008e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e84:	4e2e      	ldr	r6, [pc, #184]	; (8008f40 <_malloc_r+0xe4>)
 8008e86:	f000 f8af 	bl	8008fe8 <__malloc_lock>
 8008e8a:	6833      	ldr	r3, [r6, #0]
 8008e8c:	461c      	mov	r4, r3
 8008e8e:	bb34      	cbnz	r4, 8008ede <_malloc_r+0x82>
 8008e90:	4629      	mov	r1, r5
 8008e92:	4638      	mov	r0, r7
 8008e94:	f7ff ffc2 	bl	8008e1c <sbrk_aligned>
 8008e98:	1c43      	adds	r3, r0, #1
 8008e9a:	4604      	mov	r4, r0
 8008e9c:	d14d      	bne.n	8008f3a <_malloc_r+0xde>
 8008e9e:	6834      	ldr	r4, [r6, #0]
 8008ea0:	4626      	mov	r6, r4
 8008ea2:	2e00      	cmp	r6, #0
 8008ea4:	d140      	bne.n	8008f28 <_malloc_r+0xcc>
 8008ea6:	6823      	ldr	r3, [r4, #0]
 8008ea8:	4631      	mov	r1, r6
 8008eaa:	4638      	mov	r0, r7
 8008eac:	eb04 0803 	add.w	r8, r4, r3
 8008eb0:	f000 f848 	bl	8008f44 <_sbrk_r>
 8008eb4:	4580      	cmp	r8, r0
 8008eb6:	d13a      	bne.n	8008f2e <_malloc_r+0xd2>
 8008eb8:	6821      	ldr	r1, [r4, #0]
 8008eba:	3503      	adds	r5, #3
 8008ebc:	1a6d      	subs	r5, r5, r1
 8008ebe:	f025 0503 	bic.w	r5, r5, #3
 8008ec2:	3508      	adds	r5, #8
 8008ec4:	2d0c      	cmp	r5, #12
 8008ec6:	bf38      	it	cc
 8008ec8:	250c      	movcc	r5, #12
 8008eca:	4629      	mov	r1, r5
 8008ecc:	4638      	mov	r0, r7
 8008ece:	f7ff ffa5 	bl	8008e1c <sbrk_aligned>
 8008ed2:	3001      	adds	r0, #1
 8008ed4:	d02b      	beq.n	8008f2e <_malloc_r+0xd2>
 8008ed6:	6823      	ldr	r3, [r4, #0]
 8008ed8:	442b      	add	r3, r5
 8008eda:	6023      	str	r3, [r4, #0]
 8008edc:	e00e      	b.n	8008efc <_malloc_r+0xa0>
 8008ede:	6822      	ldr	r2, [r4, #0]
 8008ee0:	1b52      	subs	r2, r2, r5
 8008ee2:	d41e      	bmi.n	8008f22 <_malloc_r+0xc6>
 8008ee4:	2a0b      	cmp	r2, #11
 8008ee6:	d916      	bls.n	8008f16 <_malloc_r+0xba>
 8008ee8:	1961      	adds	r1, r4, r5
 8008eea:	42a3      	cmp	r3, r4
 8008eec:	6025      	str	r5, [r4, #0]
 8008eee:	bf18      	it	ne
 8008ef0:	6059      	strne	r1, [r3, #4]
 8008ef2:	6863      	ldr	r3, [r4, #4]
 8008ef4:	bf08      	it	eq
 8008ef6:	6031      	streq	r1, [r6, #0]
 8008ef8:	5162      	str	r2, [r4, r5]
 8008efa:	604b      	str	r3, [r1, #4]
 8008efc:	4638      	mov	r0, r7
 8008efe:	f104 060b 	add.w	r6, r4, #11
 8008f02:	f000 f877 	bl	8008ff4 <__malloc_unlock>
 8008f06:	f026 0607 	bic.w	r6, r6, #7
 8008f0a:	1d23      	adds	r3, r4, #4
 8008f0c:	1af2      	subs	r2, r6, r3
 8008f0e:	d0b6      	beq.n	8008e7e <_malloc_r+0x22>
 8008f10:	1b9b      	subs	r3, r3, r6
 8008f12:	50a3      	str	r3, [r4, r2]
 8008f14:	e7b3      	b.n	8008e7e <_malloc_r+0x22>
 8008f16:	6862      	ldr	r2, [r4, #4]
 8008f18:	42a3      	cmp	r3, r4
 8008f1a:	bf0c      	ite	eq
 8008f1c:	6032      	streq	r2, [r6, #0]
 8008f1e:	605a      	strne	r2, [r3, #4]
 8008f20:	e7ec      	b.n	8008efc <_malloc_r+0xa0>
 8008f22:	4623      	mov	r3, r4
 8008f24:	6864      	ldr	r4, [r4, #4]
 8008f26:	e7b2      	b.n	8008e8e <_malloc_r+0x32>
 8008f28:	4634      	mov	r4, r6
 8008f2a:	6876      	ldr	r6, [r6, #4]
 8008f2c:	e7b9      	b.n	8008ea2 <_malloc_r+0x46>
 8008f2e:	230c      	movs	r3, #12
 8008f30:	603b      	str	r3, [r7, #0]
 8008f32:	4638      	mov	r0, r7
 8008f34:	f000 f85e 	bl	8008ff4 <__malloc_unlock>
 8008f38:	e7a1      	b.n	8008e7e <_malloc_r+0x22>
 8008f3a:	6025      	str	r5, [r4, #0]
 8008f3c:	e7de      	b.n	8008efc <_malloc_r+0xa0>
 8008f3e:	bf00      	nop
 8008f40:	200008d4 	.word	0x200008d4

08008f44 <_sbrk_r>:
 8008f44:	b538      	push	{r3, r4, r5, lr}
 8008f46:	4d06      	ldr	r5, [pc, #24]	; (8008f60 <_sbrk_r+0x1c>)
 8008f48:	2300      	movs	r3, #0
 8008f4a:	4604      	mov	r4, r0
 8008f4c:	4608      	mov	r0, r1
 8008f4e:	602b      	str	r3, [r5, #0]
 8008f50:	f7f9 fb8a 	bl	8002668 <_sbrk>
 8008f54:	1c43      	adds	r3, r0, #1
 8008f56:	d102      	bne.n	8008f5e <_sbrk_r+0x1a>
 8008f58:	682b      	ldr	r3, [r5, #0]
 8008f5a:	b103      	cbz	r3, 8008f5e <_sbrk_r+0x1a>
 8008f5c:	6023      	str	r3, [r4, #0]
 8008f5e:	bd38      	pop	{r3, r4, r5, pc}
 8008f60:	200008dc 	.word	0x200008dc

08008f64 <__assert_func>:
 8008f64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f66:	4614      	mov	r4, r2
 8008f68:	461a      	mov	r2, r3
 8008f6a:	4b09      	ldr	r3, [pc, #36]	; (8008f90 <__assert_func+0x2c>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	4605      	mov	r5, r0
 8008f70:	68d8      	ldr	r0, [r3, #12]
 8008f72:	b14c      	cbz	r4, 8008f88 <__assert_func+0x24>
 8008f74:	4b07      	ldr	r3, [pc, #28]	; (8008f94 <__assert_func+0x30>)
 8008f76:	9100      	str	r1, [sp, #0]
 8008f78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f7c:	4906      	ldr	r1, [pc, #24]	; (8008f98 <__assert_func+0x34>)
 8008f7e:	462b      	mov	r3, r5
 8008f80:	f000 f80e 	bl	8008fa0 <fiprintf>
 8008f84:	f000 fa64 	bl	8009450 <abort>
 8008f88:	4b04      	ldr	r3, [pc, #16]	; (8008f9c <__assert_func+0x38>)
 8008f8a:	461c      	mov	r4, r3
 8008f8c:	e7f3      	b.n	8008f76 <__assert_func+0x12>
 8008f8e:	bf00      	nop
 8008f90:	20000018 	.word	0x20000018
 8008f94:	08009cd4 	.word	0x08009cd4
 8008f98:	08009ce1 	.word	0x08009ce1
 8008f9c:	08009d0f 	.word	0x08009d0f

08008fa0 <fiprintf>:
 8008fa0:	b40e      	push	{r1, r2, r3}
 8008fa2:	b503      	push	{r0, r1, lr}
 8008fa4:	4601      	mov	r1, r0
 8008fa6:	ab03      	add	r3, sp, #12
 8008fa8:	4805      	ldr	r0, [pc, #20]	; (8008fc0 <fiprintf+0x20>)
 8008faa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fae:	6800      	ldr	r0, [r0, #0]
 8008fb0:	9301      	str	r3, [sp, #4]
 8008fb2:	f000 f84f 	bl	8009054 <_vfiprintf_r>
 8008fb6:	b002      	add	sp, #8
 8008fb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fbc:	b003      	add	sp, #12
 8008fbe:	4770      	bx	lr
 8008fc0:	20000018 	.word	0x20000018

08008fc4 <__ascii_mbtowc>:
 8008fc4:	b082      	sub	sp, #8
 8008fc6:	b901      	cbnz	r1, 8008fca <__ascii_mbtowc+0x6>
 8008fc8:	a901      	add	r1, sp, #4
 8008fca:	b142      	cbz	r2, 8008fde <__ascii_mbtowc+0x1a>
 8008fcc:	b14b      	cbz	r3, 8008fe2 <__ascii_mbtowc+0x1e>
 8008fce:	7813      	ldrb	r3, [r2, #0]
 8008fd0:	600b      	str	r3, [r1, #0]
 8008fd2:	7812      	ldrb	r2, [r2, #0]
 8008fd4:	1e10      	subs	r0, r2, #0
 8008fd6:	bf18      	it	ne
 8008fd8:	2001      	movne	r0, #1
 8008fda:	b002      	add	sp, #8
 8008fdc:	4770      	bx	lr
 8008fde:	4610      	mov	r0, r2
 8008fe0:	e7fb      	b.n	8008fda <__ascii_mbtowc+0x16>
 8008fe2:	f06f 0001 	mvn.w	r0, #1
 8008fe6:	e7f8      	b.n	8008fda <__ascii_mbtowc+0x16>

08008fe8 <__malloc_lock>:
 8008fe8:	4801      	ldr	r0, [pc, #4]	; (8008ff0 <__malloc_lock+0x8>)
 8008fea:	f000 bbf1 	b.w	80097d0 <__retarget_lock_acquire_recursive>
 8008fee:	bf00      	nop
 8008ff0:	200008e0 	.word	0x200008e0

08008ff4 <__malloc_unlock>:
 8008ff4:	4801      	ldr	r0, [pc, #4]	; (8008ffc <__malloc_unlock+0x8>)
 8008ff6:	f000 bbec 	b.w	80097d2 <__retarget_lock_release_recursive>
 8008ffa:	bf00      	nop
 8008ffc:	200008e0 	.word	0x200008e0

08009000 <__sfputc_r>:
 8009000:	6893      	ldr	r3, [r2, #8]
 8009002:	3b01      	subs	r3, #1
 8009004:	2b00      	cmp	r3, #0
 8009006:	b410      	push	{r4}
 8009008:	6093      	str	r3, [r2, #8]
 800900a:	da08      	bge.n	800901e <__sfputc_r+0x1e>
 800900c:	6994      	ldr	r4, [r2, #24]
 800900e:	42a3      	cmp	r3, r4
 8009010:	db01      	blt.n	8009016 <__sfputc_r+0x16>
 8009012:	290a      	cmp	r1, #10
 8009014:	d103      	bne.n	800901e <__sfputc_r+0x1e>
 8009016:	f85d 4b04 	ldr.w	r4, [sp], #4
 800901a:	f000 b94b 	b.w	80092b4 <__swbuf_r>
 800901e:	6813      	ldr	r3, [r2, #0]
 8009020:	1c58      	adds	r0, r3, #1
 8009022:	6010      	str	r0, [r2, #0]
 8009024:	7019      	strb	r1, [r3, #0]
 8009026:	4608      	mov	r0, r1
 8009028:	f85d 4b04 	ldr.w	r4, [sp], #4
 800902c:	4770      	bx	lr

0800902e <__sfputs_r>:
 800902e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009030:	4606      	mov	r6, r0
 8009032:	460f      	mov	r7, r1
 8009034:	4614      	mov	r4, r2
 8009036:	18d5      	adds	r5, r2, r3
 8009038:	42ac      	cmp	r4, r5
 800903a:	d101      	bne.n	8009040 <__sfputs_r+0x12>
 800903c:	2000      	movs	r0, #0
 800903e:	e007      	b.n	8009050 <__sfputs_r+0x22>
 8009040:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009044:	463a      	mov	r2, r7
 8009046:	4630      	mov	r0, r6
 8009048:	f7ff ffda 	bl	8009000 <__sfputc_r>
 800904c:	1c43      	adds	r3, r0, #1
 800904e:	d1f3      	bne.n	8009038 <__sfputs_r+0xa>
 8009050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009054 <_vfiprintf_r>:
 8009054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009058:	460d      	mov	r5, r1
 800905a:	b09d      	sub	sp, #116	; 0x74
 800905c:	4614      	mov	r4, r2
 800905e:	4698      	mov	r8, r3
 8009060:	4606      	mov	r6, r0
 8009062:	b118      	cbz	r0, 800906c <_vfiprintf_r+0x18>
 8009064:	6983      	ldr	r3, [r0, #24]
 8009066:	b90b      	cbnz	r3, 800906c <_vfiprintf_r+0x18>
 8009068:	f000 fb14 	bl	8009694 <__sinit>
 800906c:	4b89      	ldr	r3, [pc, #548]	; (8009294 <_vfiprintf_r+0x240>)
 800906e:	429d      	cmp	r5, r3
 8009070:	d11b      	bne.n	80090aa <_vfiprintf_r+0x56>
 8009072:	6875      	ldr	r5, [r6, #4]
 8009074:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009076:	07d9      	lsls	r1, r3, #31
 8009078:	d405      	bmi.n	8009086 <_vfiprintf_r+0x32>
 800907a:	89ab      	ldrh	r3, [r5, #12]
 800907c:	059a      	lsls	r2, r3, #22
 800907e:	d402      	bmi.n	8009086 <_vfiprintf_r+0x32>
 8009080:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009082:	f000 fba5 	bl	80097d0 <__retarget_lock_acquire_recursive>
 8009086:	89ab      	ldrh	r3, [r5, #12]
 8009088:	071b      	lsls	r3, r3, #28
 800908a:	d501      	bpl.n	8009090 <_vfiprintf_r+0x3c>
 800908c:	692b      	ldr	r3, [r5, #16]
 800908e:	b9eb      	cbnz	r3, 80090cc <_vfiprintf_r+0x78>
 8009090:	4629      	mov	r1, r5
 8009092:	4630      	mov	r0, r6
 8009094:	f000 f96e 	bl	8009374 <__swsetup_r>
 8009098:	b1c0      	cbz	r0, 80090cc <_vfiprintf_r+0x78>
 800909a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800909c:	07dc      	lsls	r4, r3, #31
 800909e:	d50e      	bpl.n	80090be <_vfiprintf_r+0x6a>
 80090a0:	f04f 30ff 	mov.w	r0, #4294967295
 80090a4:	b01d      	add	sp, #116	; 0x74
 80090a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090aa:	4b7b      	ldr	r3, [pc, #492]	; (8009298 <_vfiprintf_r+0x244>)
 80090ac:	429d      	cmp	r5, r3
 80090ae:	d101      	bne.n	80090b4 <_vfiprintf_r+0x60>
 80090b0:	68b5      	ldr	r5, [r6, #8]
 80090b2:	e7df      	b.n	8009074 <_vfiprintf_r+0x20>
 80090b4:	4b79      	ldr	r3, [pc, #484]	; (800929c <_vfiprintf_r+0x248>)
 80090b6:	429d      	cmp	r5, r3
 80090b8:	bf08      	it	eq
 80090ba:	68f5      	ldreq	r5, [r6, #12]
 80090bc:	e7da      	b.n	8009074 <_vfiprintf_r+0x20>
 80090be:	89ab      	ldrh	r3, [r5, #12]
 80090c0:	0598      	lsls	r0, r3, #22
 80090c2:	d4ed      	bmi.n	80090a0 <_vfiprintf_r+0x4c>
 80090c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090c6:	f000 fb84 	bl	80097d2 <__retarget_lock_release_recursive>
 80090ca:	e7e9      	b.n	80090a0 <_vfiprintf_r+0x4c>
 80090cc:	2300      	movs	r3, #0
 80090ce:	9309      	str	r3, [sp, #36]	; 0x24
 80090d0:	2320      	movs	r3, #32
 80090d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80090da:	2330      	movs	r3, #48	; 0x30
 80090dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80092a0 <_vfiprintf_r+0x24c>
 80090e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090e4:	f04f 0901 	mov.w	r9, #1
 80090e8:	4623      	mov	r3, r4
 80090ea:	469a      	mov	sl, r3
 80090ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090f0:	b10a      	cbz	r2, 80090f6 <_vfiprintf_r+0xa2>
 80090f2:	2a25      	cmp	r2, #37	; 0x25
 80090f4:	d1f9      	bne.n	80090ea <_vfiprintf_r+0x96>
 80090f6:	ebba 0b04 	subs.w	fp, sl, r4
 80090fa:	d00b      	beq.n	8009114 <_vfiprintf_r+0xc0>
 80090fc:	465b      	mov	r3, fp
 80090fe:	4622      	mov	r2, r4
 8009100:	4629      	mov	r1, r5
 8009102:	4630      	mov	r0, r6
 8009104:	f7ff ff93 	bl	800902e <__sfputs_r>
 8009108:	3001      	adds	r0, #1
 800910a:	f000 80aa 	beq.w	8009262 <_vfiprintf_r+0x20e>
 800910e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009110:	445a      	add	r2, fp
 8009112:	9209      	str	r2, [sp, #36]	; 0x24
 8009114:	f89a 3000 	ldrb.w	r3, [sl]
 8009118:	2b00      	cmp	r3, #0
 800911a:	f000 80a2 	beq.w	8009262 <_vfiprintf_r+0x20e>
 800911e:	2300      	movs	r3, #0
 8009120:	f04f 32ff 	mov.w	r2, #4294967295
 8009124:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009128:	f10a 0a01 	add.w	sl, sl, #1
 800912c:	9304      	str	r3, [sp, #16]
 800912e:	9307      	str	r3, [sp, #28]
 8009130:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009134:	931a      	str	r3, [sp, #104]	; 0x68
 8009136:	4654      	mov	r4, sl
 8009138:	2205      	movs	r2, #5
 800913a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800913e:	4858      	ldr	r0, [pc, #352]	; (80092a0 <_vfiprintf_r+0x24c>)
 8009140:	f7f7 f86e 	bl	8000220 <memchr>
 8009144:	9a04      	ldr	r2, [sp, #16]
 8009146:	b9d8      	cbnz	r0, 8009180 <_vfiprintf_r+0x12c>
 8009148:	06d1      	lsls	r1, r2, #27
 800914a:	bf44      	itt	mi
 800914c:	2320      	movmi	r3, #32
 800914e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009152:	0713      	lsls	r3, r2, #28
 8009154:	bf44      	itt	mi
 8009156:	232b      	movmi	r3, #43	; 0x2b
 8009158:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800915c:	f89a 3000 	ldrb.w	r3, [sl]
 8009160:	2b2a      	cmp	r3, #42	; 0x2a
 8009162:	d015      	beq.n	8009190 <_vfiprintf_r+0x13c>
 8009164:	9a07      	ldr	r2, [sp, #28]
 8009166:	4654      	mov	r4, sl
 8009168:	2000      	movs	r0, #0
 800916a:	f04f 0c0a 	mov.w	ip, #10
 800916e:	4621      	mov	r1, r4
 8009170:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009174:	3b30      	subs	r3, #48	; 0x30
 8009176:	2b09      	cmp	r3, #9
 8009178:	d94e      	bls.n	8009218 <_vfiprintf_r+0x1c4>
 800917a:	b1b0      	cbz	r0, 80091aa <_vfiprintf_r+0x156>
 800917c:	9207      	str	r2, [sp, #28]
 800917e:	e014      	b.n	80091aa <_vfiprintf_r+0x156>
 8009180:	eba0 0308 	sub.w	r3, r0, r8
 8009184:	fa09 f303 	lsl.w	r3, r9, r3
 8009188:	4313      	orrs	r3, r2
 800918a:	9304      	str	r3, [sp, #16]
 800918c:	46a2      	mov	sl, r4
 800918e:	e7d2      	b.n	8009136 <_vfiprintf_r+0xe2>
 8009190:	9b03      	ldr	r3, [sp, #12]
 8009192:	1d19      	adds	r1, r3, #4
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	9103      	str	r1, [sp, #12]
 8009198:	2b00      	cmp	r3, #0
 800919a:	bfbb      	ittet	lt
 800919c:	425b      	neglt	r3, r3
 800919e:	f042 0202 	orrlt.w	r2, r2, #2
 80091a2:	9307      	strge	r3, [sp, #28]
 80091a4:	9307      	strlt	r3, [sp, #28]
 80091a6:	bfb8      	it	lt
 80091a8:	9204      	strlt	r2, [sp, #16]
 80091aa:	7823      	ldrb	r3, [r4, #0]
 80091ac:	2b2e      	cmp	r3, #46	; 0x2e
 80091ae:	d10c      	bne.n	80091ca <_vfiprintf_r+0x176>
 80091b0:	7863      	ldrb	r3, [r4, #1]
 80091b2:	2b2a      	cmp	r3, #42	; 0x2a
 80091b4:	d135      	bne.n	8009222 <_vfiprintf_r+0x1ce>
 80091b6:	9b03      	ldr	r3, [sp, #12]
 80091b8:	1d1a      	adds	r2, r3, #4
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	9203      	str	r2, [sp, #12]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	bfb8      	it	lt
 80091c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80091c6:	3402      	adds	r4, #2
 80091c8:	9305      	str	r3, [sp, #20]
 80091ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80092b0 <_vfiprintf_r+0x25c>
 80091ce:	7821      	ldrb	r1, [r4, #0]
 80091d0:	2203      	movs	r2, #3
 80091d2:	4650      	mov	r0, sl
 80091d4:	f7f7 f824 	bl	8000220 <memchr>
 80091d8:	b140      	cbz	r0, 80091ec <_vfiprintf_r+0x198>
 80091da:	2340      	movs	r3, #64	; 0x40
 80091dc:	eba0 000a 	sub.w	r0, r0, sl
 80091e0:	fa03 f000 	lsl.w	r0, r3, r0
 80091e4:	9b04      	ldr	r3, [sp, #16]
 80091e6:	4303      	orrs	r3, r0
 80091e8:	3401      	adds	r4, #1
 80091ea:	9304      	str	r3, [sp, #16]
 80091ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091f0:	482c      	ldr	r0, [pc, #176]	; (80092a4 <_vfiprintf_r+0x250>)
 80091f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091f6:	2206      	movs	r2, #6
 80091f8:	f7f7 f812 	bl	8000220 <memchr>
 80091fc:	2800      	cmp	r0, #0
 80091fe:	d03f      	beq.n	8009280 <_vfiprintf_r+0x22c>
 8009200:	4b29      	ldr	r3, [pc, #164]	; (80092a8 <_vfiprintf_r+0x254>)
 8009202:	bb1b      	cbnz	r3, 800924c <_vfiprintf_r+0x1f8>
 8009204:	9b03      	ldr	r3, [sp, #12]
 8009206:	3307      	adds	r3, #7
 8009208:	f023 0307 	bic.w	r3, r3, #7
 800920c:	3308      	adds	r3, #8
 800920e:	9303      	str	r3, [sp, #12]
 8009210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009212:	443b      	add	r3, r7
 8009214:	9309      	str	r3, [sp, #36]	; 0x24
 8009216:	e767      	b.n	80090e8 <_vfiprintf_r+0x94>
 8009218:	fb0c 3202 	mla	r2, ip, r2, r3
 800921c:	460c      	mov	r4, r1
 800921e:	2001      	movs	r0, #1
 8009220:	e7a5      	b.n	800916e <_vfiprintf_r+0x11a>
 8009222:	2300      	movs	r3, #0
 8009224:	3401      	adds	r4, #1
 8009226:	9305      	str	r3, [sp, #20]
 8009228:	4619      	mov	r1, r3
 800922a:	f04f 0c0a 	mov.w	ip, #10
 800922e:	4620      	mov	r0, r4
 8009230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009234:	3a30      	subs	r2, #48	; 0x30
 8009236:	2a09      	cmp	r2, #9
 8009238:	d903      	bls.n	8009242 <_vfiprintf_r+0x1ee>
 800923a:	2b00      	cmp	r3, #0
 800923c:	d0c5      	beq.n	80091ca <_vfiprintf_r+0x176>
 800923e:	9105      	str	r1, [sp, #20]
 8009240:	e7c3      	b.n	80091ca <_vfiprintf_r+0x176>
 8009242:	fb0c 2101 	mla	r1, ip, r1, r2
 8009246:	4604      	mov	r4, r0
 8009248:	2301      	movs	r3, #1
 800924a:	e7f0      	b.n	800922e <_vfiprintf_r+0x1da>
 800924c:	ab03      	add	r3, sp, #12
 800924e:	9300      	str	r3, [sp, #0]
 8009250:	462a      	mov	r2, r5
 8009252:	4b16      	ldr	r3, [pc, #88]	; (80092ac <_vfiprintf_r+0x258>)
 8009254:	a904      	add	r1, sp, #16
 8009256:	4630      	mov	r0, r6
 8009258:	f7fd ff9c 	bl	8007194 <_printf_float>
 800925c:	4607      	mov	r7, r0
 800925e:	1c78      	adds	r0, r7, #1
 8009260:	d1d6      	bne.n	8009210 <_vfiprintf_r+0x1bc>
 8009262:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009264:	07d9      	lsls	r1, r3, #31
 8009266:	d405      	bmi.n	8009274 <_vfiprintf_r+0x220>
 8009268:	89ab      	ldrh	r3, [r5, #12]
 800926a:	059a      	lsls	r2, r3, #22
 800926c:	d402      	bmi.n	8009274 <_vfiprintf_r+0x220>
 800926e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009270:	f000 faaf 	bl	80097d2 <__retarget_lock_release_recursive>
 8009274:	89ab      	ldrh	r3, [r5, #12]
 8009276:	065b      	lsls	r3, r3, #25
 8009278:	f53f af12 	bmi.w	80090a0 <_vfiprintf_r+0x4c>
 800927c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800927e:	e711      	b.n	80090a4 <_vfiprintf_r+0x50>
 8009280:	ab03      	add	r3, sp, #12
 8009282:	9300      	str	r3, [sp, #0]
 8009284:	462a      	mov	r2, r5
 8009286:	4b09      	ldr	r3, [pc, #36]	; (80092ac <_vfiprintf_r+0x258>)
 8009288:	a904      	add	r1, sp, #16
 800928a:	4630      	mov	r0, r6
 800928c:	f7fe fa26 	bl	80076dc <_printf_i>
 8009290:	e7e4      	b.n	800925c <_vfiprintf_r+0x208>
 8009292:	bf00      	nop
 8009294:	08009e4c 	.word	0x08009e4c
 8009298:	08009e6c 	.word	0x08009e6c
 800929c:	08009e2c 	.word	0x08009e2c
 80092a0:	08009d1a 	.word	0x08009d1a
 80092a4:	08009d24 	.word	0x08009d24
 80092a8:	08007195 	.word	0x08007195
 80092ac:	0800902f 	.word	0x0800902f
 80092b0:	08009d20 	.word	0x08009d20

080092b4 <__swbuf_r>:
 80092b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b6:	460e      	mov	r6, r1
 80092b8:	4614      	mov	r4, r2
 80092ba:	4605      	mov	r5, r0
 80092bc:	b118      	cbz	r0, 80092c6 <__swbuf_r+0x12>
 80092be:	6983      	ldr	r3, [r0, #24]
 80092c0:	b90b      	cbnz	r3, 80092c6 <__swbuf_r+0x12>
 80092c2:	f000 f9e7 	bl	8009694 <__sinit>
 80092c6:	4b21      	ldr	r3, [pc, #132]	; (800934c <__swbuf_r+0x98>)
 80092c8:	429c      	cmp	r4, r3
 80092ca:	d12b      	bne.n	8009324 <__swbuf_r+0x70>
 80092cc:	686c      	ldr	r4, [r5, #4]
 80092ce:	69a3      	ldr	r3, [r4, #24]
 80092d0:	60a3      	str	r3, [r4, #8]
 80092d2:	89a3      	ldrh	r3, [r4, #12]
 80092d4:	071a      	lsls	r2, r3, #28
 80092d6:	d52f      	bpl.n	8009338 <__swbuf_r+0x84>
 80092d8:	6923      	ldr	r3, [r4, #16]
 80092da:	b36b      	cbz	r3, 8009338 <__swbuf_r+0x84>
 80092dc:	6923      	ldr	r3, [r4, #16]
 80092de:	6820      	ldr	r0, [r4, #0]
 80092e0:	1ac0      	subs	r0, r0, r3
 80092e2:	6963      	ldr	r3, [r4, #20]
 80092e4:	b2f6      	uxtb	r6, r6
 80092e6:	4283      	cmp	r3, r0
 80092e8:	4637      	mov	r7, r6
 80092ea:	dc04      	bgt.n	80092f6 <__swbuf_r+0x42>
 80092ec:	4621      	mov	r1, r4
 80092ee:	4628      	mov	r0, r5
 80092f0:	f000 f93c 	bl	800956c <_fflush_r>
 80092f4:	bb30      	cbnz	r0, 8009344 <__swbuf_r+0x90>
 80092f6:	68a3      	ldr	r3, [r4, #8]
 80092f8:	3b01      	subs	r3, #1
 80092fa:	60a3      	str	r3, [r4, #8]
 80092fc:	6823      	ldr	r3, [r4, #0]
 80092fe:	1c5a      	adds	r2, r3, #1
 8009300:	6022      	str	r2, [r4, #0]
 8009302:	701e      	strb	r6, [r3, #0]
 8009304:	6963      	ldr	r3, [r4, #20]
 8009306:	3001      	adds	r0, #1
 8009308:	4283      	cmp	r3, r0
 800930a:	d004      	beq.n	8009316 <__swbuf_r+0x62>
 800930c:	89a3      	ldrh	r3, [r4, #12]
 800930e:	07db      	lsls	r3, r3, #31
 8009310:	d506      	bpl.n	8009320 <__swbuf_r+0x6c>
 8009312:	2e0a      	cmp	r6, #10
 8009314:	d104      	bne.n	8009320 <__swbuf_r+0x6c>
 8009316:	4621      	mov	r1, r4
 8009318:	4628      	mov	r0, r5
 800931a:	f000 f927 	bl	800956c <_fflush_r>
 800931e:	b988      	cbnz	r0, 8009344 <__swbuf_r+0x90>
 8009320:	4638      	mov	r0, r7
 8009322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009324:	4b0a      	ldr	r3, [pc, #40]	; (8009350 <__swbuf_r+0x9c>)
 8009326:	429c      	cmp	r4, r3
 8009328:	d101      	bne.n	800932e <__swbuf_r+0x7a>
 800932a:	68ac      	ldr	r4, [r5, #8]
 800932c:	e7cf      	b.n	80092ce <__swbuf_r+0x1a>
 800932e:	4b09      	ldr	r3, [pc, #36]	; (8009354 <__swbuf_r+0xa0>)
 8009330:	429c      	cmp	r4, r3
 8009332:	bf08      	it	eq
 8009334:	68ec      	ldreq	r4, [r5, #12]
 8009336:	e7ca      	b.n	80092ce <__swbuf_r+0x1a>
 8009338:	4621      	mov	r1, r4
 800933a:	4628      	mov	r0, r5
 800933c:	f000 f81a 	bl	8009374 <__swsetup_r>
 8009340:	2800      	cmp	r0, #0
 8009342:	d0cb      	beq.n	80092dc <__swbuf_r+0x28>
 8009344:	f04f 37ff 	mov.w	r7, #4294967295
 8009348:	e7ea      	b.n	8009320 <__swbuf_r+0x6c>
 800934a:	bf00      	nop
 800934c:	08009e4c 	.word	0x08009e4c
 8009350:	08009e6c 	.word	0x08009e6c
 8009354:	08009e2c 	.word	0x08009e2c

08009358 <__ascii_wctomb>:
 8009358:	b149      	cbz	r1, 800936e <__ascii_wctomb+0x16>
 800935a:	2aff      	cmp	r2, #255	; 0xff
 800935c:	bf85      	ittet	hi
 800935e:	238a      	movhi	r3, #138	; 0x8a
 8009360:	6003      	strhi	r3, [r0, #0]
 8009362:	700a      	strbls	r2, [r1, #0]
 8009364:	f04f 30ff 	movhi.w	r0, #4294967295
 8009368:	bf98      	it	ls
 800936a:	2001      	movls	r0, #1
 800936c:	4770      	bx	lr
 800936e:	4608      	mov	r0, r1
 8009370:	4770      	bx	lr
	...

08009374 <__swsetup_r>:
 8009374:	4b32      	ldr	r3, [pc, #200]	; (8009440 <__swsetup_r+0xcc>)
 8009376:	b570      	push	{r4, r5, r6, lr}
 8009378:	681d      	ldr	r5, [r3, #0]
 800937a:	4606      	mov	r6, r0
 800937c:	460c      	mov	r4, r1
 800937e:	b125      	cbz	r5, 800938a <__swsetup_r+0x16>
 8009380:	69ab      	ldr	r3, [r5, #24]
 8009382:	b913      	cbnz	r3, 800938a <__swsetup_r+0x16>
 8009384:	4628      	mov	r0, r5
 8009386:	f000 f985 	bl	8009694 <__sinit>
 800938a:	4b2e      	ldr	r3, [pc, #184]	; (8009444 <__swsetup_r+0xd0>)
 800938c:	429c      	cmp	r4, r3
 800938e:	d10f      	bne.n	80093b0 <__swsetup_r+0x3c>
 8009390:	686c      	ldr	r4, [r5, #4]
 8009392:	89a3      	ldrh	r3, [r4, #12]
 8009394:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009398:	0719      	lsls	r1, r3, #28
 800939a:	d42c      	bmi.n	80093f6 <__swsetup_r+0x82>
 800939c:	06dd      	lsls	r5, r3, #27
 800939e:	d411      	bmi.n	80093c4 <__swsetup_r+0x50>
 80093a0:	2309      	movs	r3, #9
 80093a2:	6033      	str	r3, [r6, #0]
 80093a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80093a8:	81a3      	strh	r3, [r4, #12]
 80093aa:	f04f 30ff 	mov.w	r0, #4294967295
 80093ae:	e03e      	b.n	800942e <__swsetup_r+0xba>
 80093b0:	4b25      	ldr	r3, [pc, #148]	; (8009448 <__swsetup_r+0xd4>)
 80093b2:	429c      	cmp	r4, r3
 80093b4:	d101      	bne.n	80093ba <__swsetup_r+0x46>
 80093b6:	68ac      	ldr	r4, [r5, #8]
 80093b8:	e7eb      	b.n	8009392 <__swsetup_r+0x1e>
 80093ba:	4b24      	ldr	r3, [pc, #144]	; (800944c <__swsetup_r+0xd8>)
 80093bc:	429c      	cmp	r4, r3
 80093be:	bf08      	it	eq
 80093c0:	68ec      	ldreq	r4, [r5, #12]
 80093c2:	e7e6      	b.n	8009392 <__swsetup_r+0x1e>
 80093c4:	0758      	lsls	r0, r3, #29
 80093c6:	d512      	bpl.n	80093ee <__swsetup_r+0x7a>
 80093c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093ca:	b141      	cbz	r1, 80093de <__swsetup_r+0x6a>
 80093cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093d0:	4299      	cmp	r1, r3
 80093d2:	d002      	beq.n	80093da <__swsetup_r+0x66>
 80093d4:	4630      	mov	r0, r6
 80093d6:	f7ff fcd5 	bl	8008d84 <_free_r>
 80093da:	2300      	movs	r3, #0
 80093dc:	6363      	str	r3, [r4, #52]	; 0x34
 80093de:	89a3      	ldrh	r3, [r4, #12]
 80093e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80093e4:	81a3      	strh	r3, [r4, #12]
 80093e6:	2300      	movs	r3, #0
 80093e8:	6063      	str	r3, [r4, #4]
 80093ea:	6923      	ldr	r3, [r4, #16]
 80093ec:	6023      	str	r3, [r4, #0]
 80093ee:	89a3      	ldrh	r3, [r4, #12]
 80093f0:	f043 0308 	orr.w	r3, r3, #8
 80093f4:	81a3      	strh	r3, [r4, #12]
 80093f6:	6923      	ldr	r3, [r4, #16]
 80093f8:	b94b      	cbnz	r3, 800940e <__swsetup_r+0x9a>
 80093fa:	89a3      	ldrh	r3, [r4, #12]
 80093fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009404:	d003      	beq.n	800940e <__swsetup_r+0x9a>
 8009406:	4621      	mov	r1, r4
 8009408:	4630      	mov	r0, r6
 800940a:	f000 fa09 	bl	8009820 <__smakebuf_r>
 800940e:	89a0      	ldrh	r0, [r4, #12]
 8009410:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009414:	f010 0301 	ands.w	r3, r0, #1
 8009418:	d00a      	beq.n	8009430 <__swsetup_r+0xbc>
 800941a:	2300      	movs	r3, #0
 800941c:	60a3      	str	r3, [r4, #8]
 800941e:	6963      	ldr	r3, [r4, #20]
 8009420:	425b      	negs	r3, r3
 8009422:	61a3      	str	r3, [r4, #24]
 8009424:	6923      	ldr	r3, [r4, #16]
 8009426:	b943      	cbnz	r3, 800943a <__swsetup_r+0xc6>
 8009428:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800942c:	d1ba      	bne.n	80093a4 <__swsetup_r+0x30>
 800942e:	bd70      	pop	{r4, r5, r6, pc}
 8009430:	0781      	lsls	r1, r0, #30
 8009432:	bf58      	it	pl
 8009434:	6963      	ldrpl	r3, [r4, #20]
 8009436:	60a3      	str	r3, [r4, #8]
 8009438:	e7f4      	b.n	8009424 <__swsetup_r+0xb0>
 800943a:	2000      	movs	r0, #0
 800943c:	e7f7      	b.n	800942e <__swsetup_r+0xba>
 800943e:	bf00      	nop
 8009440:	20000018 	.word	0x20000018
 8009444:	08009e4c 	.word	0x08009e4c
 8009448:	08009e6c 	.word	0x08009e6c
 800944c:	08009e2c 	.word	0x08009e2c

08009450 <abort>:
 8009450:	b508      	push	{r3, lr}
 8009452:	2006      	movs	r0, #6
 8009454:	f000 fa4c 	bl	80098f0 <raise>
 8009458:	2001      	movs	r0, #1
 800945a:	f7f9 f88d 	bl	8002578 <_exit>
	...

08009460 <__sflush_r>:
 8009460:	898a      	ldrh	r2, [r1, #12]
 8009462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009466:	4605      	mov	r5, r0
 8009468:	0710      	lsls	r0, r2, #28
 800946a:	460c      	mov	r4, r1
 800946c:	d458      	bmi.n	8009520 <__sflush_r+0xc0>
 800946e:	684b      	ldr	r3, [r1, #4]
 8009470:	2b00      	cmp	r3, #0
 8009472:	dc05      	bgt.n	8009480 <__sflush_r+0x20>
 8009474:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009476:	2b00      	cmp	r3, #0
 8009478:	dc02      	bgt.n	8009480 <__sflush_r+0x20>
 800947a:	2000      	movs	r0, #0
 800947c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009480:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009482:	2e00      	cmp	r6, #0
 8009484:	d0f9      	beq.n	800947a <__sflush_r+0x1a>
 8009486:	2300      	movs	r3, #0
 8009488:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800948c:	682f      	ldr	r7, [r5, #0]
 800948e:	602b      	str	r3, [r5, #0]
 8009490:	d032      	beq.n	80094f8 <__sflush_r+0x98>
 8009492:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009494:	89a3      	ldrh	r3, [r4, #12]
 8009496:	075a      	lsls	r2, r3, #29
 8009498:	d505      	bpl.n	80094a6 <__sflush_r+0x46>
 800949a:	6863      	ldr	r3, [r4, #4]
 800949c:	1ac0      	subs	r0, r0, r3
 800949e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80094a0:	b10b      	cbz	r3, 80094a6 <__sflush_r+0x46>
 80094a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80094a4:	1ac0      	subs	r0, r0, r3
 80094a6:	2300      	movs	r3, #0
 80094a8:	4602      	mov	r2, r0
 80094aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094ac:	6a21      	ldr	r1, [r4, #32]
 80094ae:	4628      	mov	r0, r5
 80094b0:	47b0      	blx	r6
 80094b2:	1c43      	adds	r3, r0, #1
 80094b4:	89a3      	ldrh	r3, [r4, #12]
 80094b6:	d106      	bne.n	80094c6 <__sflush_r+0x66>
 80094b8:	6829      	ldr	r1, [r5, #0]
 80094ba:	291d      	cmp	r1, #29
 80094bc:	d82c      	bhi.n	8009518 <__sflush_r+0xb8>
 80094be:	4a2a      	ldr	r2, [pc, #168]	; (8009568 <__sflush_r+0x108>)
 80094c0:	40ca      	lsrs	r2, r1
 80094c2:	07d6      	lsls	r6, r2, #31
 80094c4:	d528      	bpl.n	8009518 <__sflush_r+0xb8>
 80094c6:	2200      	movs	r2, #0
 80094c8:	6062      	str	r2, [r4, #4]
 80094ca:	04d9      	lsls	r1, r3, #19
 80094cc:	6922      	ldr	r2, [r4, #16]
 80094ce:	6022      	str	r2, [r4, #0]
 80094d0:	d504      	bpl.n	80094dc <__sflush_r+0x7c>
 80094d2:	1c42      	adds	r2, r0, #1
 80094d4:	d101      	bne.n	80094da <__sflush_r+0x7a>
 80094d6:	682b      	ldr	r3, [r5, #0]
 80094d8:	b903      	cbnz	r3, 80094dc <__sflush_r+0x7c>
 80094da:	6560      	str	r0, [r4, #84]	; 0x54
 80094dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094de:	602f      	str	r7, [r5, #0]
 80094e0:	2900      	cmp	r1, #0
 80094e2:	d0ca      	beq.n	800947a <__sflush_r+0x1a>
 80094e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094e8:	4299      	cmp	r1, r3
 80094ea:	d002      	beq.n	80094f2 <__sflush_r+0x92>
 80094ec:	4628      	mov	r0, r5
 80094ee:	f7ff fc49 	bl	8008d84 <_free_r>
 80094f2:	2000      	movs	r0, #0
 80094f4:	6360      	str	r0, [r4, #52]	; 0x34
 80094f6:	e7c1      	b.n	800947c <__sflush_r+0x1c>
 80094f8:	6a21      	ldr	r1, [r4, #32]
 80094fa:	2301      	movs	r3, #1
 80094fc:	4628      	mov	r0, r5
 80094fe:	47b0      	blx	r6
 8009500:	1c41      	adds	r1, r0, #1
 8009502:	d1c7      	bne.n	8009494 <__sflush_r+0x34>
 8009504:	682b      	ldr	r3, [r5, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d0c4      	beq.n	8009494 <__sflush_r+0x34>
 800950a:	2b1d      	cmp	r3, #29
 800950c:	d001      	beq.n	8009512 <__sflush_r+0xb2>
 800950e:	2b16      	cmp	r3, #22
 8009510:	d101      	bne.n	8009516 <__sflush_r+0xb6>
 8009512:	602f      	str	r7, [r5, #0]
 8009514:	e7b1      	b.n	800947a <__sflush_r+0x1a>
 8009516:	89a3      	ldrh	r3, [r4, #12]
 8009518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800951c:	81a3      	strh	r3, [r4, #12]
 800951e:	e7ad      	b.n	800947c <__sflush_r+0x1c>
 8009520:	690f      	ldr	r7, [r1, #16]
 8009522:	2f00      	cmp	r7, #0
 8009524:	d0a9      	beq.n	800947a <__sflush_r+0x1a>
 8009526:	0793      	lsls	r3, r2, #30
 8009528:	680e      	ldr	r6, [r1, #0]
 800952a:	bf08      	it	eq
 800952c:	694b      	ldreq	r3, [r1, #20]
 800952e:	600f      	str	r7, [r1, #0]
 8009530:	bf18      	it	ne
 8009532:	2300      	movne	r3, #0
 8009534:	eba6 0807 	sub.w	r8, r6, r7
 8009538:	608b      	str	r3, [r1, #8]
 800953a:	f1b8 0f00 	cmp.w	r8, #0
 800953e:	dd9c      	ble.n	800947a <__sflush_r+0x1a>
 8009540:	6a21      	ldr	r1, [r4, #32]
 8009542:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009544:	4643      	mov	r3, r8
 8009546:	463a      	mov	r2, r7
 8009548:	4628      	mov	r0, r5
 800954a:	47b0      	blx	r6
 800954c:	2800      	cmp	r0, #0
 800954e:	dc06      	bgt.n	800955e <__sflush_r+0xfe>
 8009550:	89a3      	ldrh	r3, [r4, #12]
 8009552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009556:	81a3      	strh	r3, [r4, #12]
 8009558:	f04f 30ff 	mov.w	r0, #4294967295
 800955c:	e78e      	b.n	800947c <__sflush_r+0x1c>
 800955e:	4407      	add	r7, r0
 8009560:	eba8 0800 	sub.w	r8, r8, r0
 8009564:	e7e9      	b.n	800953a <__sflush_r+0xda>
 8009566:	bf00      	nop
 8009568:	20400001 	.word	0x20400001

0800956c <_fflush_r>:
 800956c:	b538      	push	{r3, r4, r5, lr}
 800956e:	690b      	ldr	r3, [r1, #16]
 8009570:	4605      	mov	r5, r0
 8009572:	460c      	mov	r4, r1
 8009574:	b913      	cbnz	r3, 800957c <_fflush_r+0x10>
 8009576:	2500      	movs	r5, #0
 8009578:	4628      	mov	r0, r5
 800957a:	bd38      	pop	{r3, r4, r5, pc}
 800957c:	b118      	cbz	r0, 8009586 <_fflush_r+0x1a>
 800957e:	6983      	ldr	r3, [r0, #24]
 8009580:	b90b      	cbnz	r3, 8009586 <_fflush_r+0x1a>
 8009582:	f000 f887 	bl	8009694 <__sinit>
 8009586:	4b14      	ldr	r3, [pc, #80]	; (80095d8 <_fflush_r+0x6c>)
 8009588:	429c      	cmp	r4, r3
 800958a:	d11b      	bne.n	80095c4 <_fflush_r+0x58>
 800958c:	686c      	ldr	r4, [r5, #4]
 800958e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d0ef      	beq.n	8009576 <_fflush_r+0xa>
 8009596:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009598:	07d0      	lsls	r0, r2, #31
 800959a:	d404      	bmi.n	80095a6 <_fflush_r+0x3a>
 800959c:	0599      	lsls	r1, r3, #22
 800959e:	d402      	bmi.n	80095a6 <_fflush_r+0x3a>
 80095a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095a2:	f000 f915 	bl	80097d0 <__retarget_lock_acquire_recursive>
 80095a6:	4628      	mov	r0, r5
 80095a8:	4621      	mov	r1, r4
 80095aa:	f7ff ff59 	bl	8009460 <__sflush_r>
 80095ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095b0:	07da      	lsls	r2, r3, #31
 80095b2:	4605      	mov	r5, r0
 80095b4:	d4e0      	bmi.n	8009578 <_fflush_r+0xc>
 80095b6:	89a3      	ldrh	r3, [r4, #12]
 80095b8:	059b      	lsls	r3, r3, #22
 80095ba:	d4dd      	bmi.n	8009578 <_fflush_r+0xc>
 80095bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095be:	f000 f908 	bl	80097d2 <__retarget_lock_release_recursive>
 80095c2:	e7d9      	b.n	8009578 <_fflush_r+0xc>
 80095c4:	4b05      	ldr	r3, [pc, #20]	; (80095dc <_fflush_r+0x70>)
 80095c6:	429c      	cmp	r4, r3
 80095c8:	d101      	bne.n	80095ce <_fflush_r+0x62>
 80095ca:	68ac      	ldr	r4, [r5, #8]
 80095cc:	e7df      	b.n	800958e <_fflush_r+0x22>
 80095ce:	4b04      	ldr	r3, [pc, #16]	; (80095e0 <_fflush_r+0x74>)
 80095d0:	429c      	cmp	r4, r3
 80095d2:	bf08      	it	eq
 80095d4:	68ec      	ldreq	r4, [r5, #12]
 80095d6:	e7da      	b.n	800958e <_fflush_r+0x22>
 80095d8:	08009e4c 	.word	0x08009e4c
 80095dc:	08009e6c 	.word	0x08009e6c
 80095e0:	08009e2c 	.word	0x08009e2c

080095e4 <std>:
 80095e4:	2300      	movs	r3, #0
 80095e6:	b510      	push	{r4, lr}
 80095e8:	4604      	mov	r4, r0
 80095ea:	e9c0 3300 	strd	r3, r3, [r0]
 80095ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095f2:	6083      	str	r3, [r0, #8]
 80095f4:	8181      	strh	r1, [r0, #12]
 80095f6:	6643      	str	r3, [r0, #100]	; 0x64
 80095f8:	81c2      	strh	r2, [r0, #14]
 80095fa:	6183      	str	r3, [r0, #24]
 80095fc:	4619      	mov	r1, r3
 80095fe:	2208      	movs	r2, #8
 8009600:	305c      	adds	r0, #92	; 0x5c
 8009602:	f7fd fd1f 	bl	8007044 <memset>
 8009606:	4b05      	ldr	r3, [pc, #20]	; (800961c <std+0x38>)
 8009608:	6263      	str	r3, [r4, #36]	; 0x24
 800960a:	4b05      	ldr	r3, [pc, #20]	; (8009620 <std+0x3c>)
 800960c:	62a3      	str	r3, [r4, #40]	; 0x28
 800960e:	4b05      	ldr	r3, [pc, #20]	; (8009624 <std+0x40>)
 8009610:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009612:	4b05      	ldr	r3, [pc, #20]	; (8009628 <std+0x44>)
 8009614:	6224      	str	r4, [r4, #32]
 8009616:	6323      	str	r3, [r4, #48]	; 0x30
 8009618:	bd10      	pop	{r4, pc}
 800961a:	bf00      	nop
 800961c:	08009929 	.word	0x08009929
 8009620:	0800994b 	.word	0x0800994b
 8009624:	08009983 	.word	0x08009983
 8009628:	080099a7 	.word	0x080099a7

0800962c <_cleanup_r>:
 800962c:	4901      	ldr	r1, [pc, #4]	; (8009634 <_cleanup_r+0x8>)
 800962e:	f000 b8af 	b.w	8009790 <_fwalk_reent>
 8009632:	bf00      	nop
 8009634:	0800956d 	.word	0x0800956d

08009638 <__sfmoreglue>:
 8009638:	b570      	push	{r4, r5, r6, lr}
 800963a:	2268      	movs	r2, #104	; 0x68
 800963c:	1e4d      	subs	r5, r1, #1
 800963e:	4355      	muls	r5, r2
 8009640:	460e      	mov	r6, r1
 8009642:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009646:	f7ff fc09 	bl	8008e5c <_malloc_r>
 800964a:	4604      	mov	r4, r0
 800964c:	b140      	cbz	r0, 8009660 <__sfmoreglue+0x28>
 800964e:	2100      	movs	r1, #0
 8009650:	e9c0 1600 	strd	r1, r6, [r0]
 8009654:	300c      	adds	r0, #12
 8009656:	60a0      	str	r0, [r4, #8]
 8009658:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800965c:	f7fd fcf2 	bl	8007044 <memset>
 8009660:	4620      	mov	r0, r4
 8009662:	bd70      	pop	{r4, r5, r6, pc}

08009664 <__sfp_lock_acquire>:
 8009664:	4801      	ldr	r0, [pc, #4]	; (800966c <__sfp_lock_acquire+0x8>)
 8009666:	f000 b8b3 	b.w	80097d0 <__retarget_lock_acquire_recursive>
 800966a:	bf00      	nop
 800966c:	200008e1 	.word	0x200008e1

08009670 <__sfp_lock_release>:
 8009670:	4801      	ldr	r0, [pc, #4]	; (8009678 <__sfp_lock_release+0x8>)
 8009672:	f000 b8ae 	b.w	80097d2 <__retarget_lock_release_recursive>
 8009676:	bf00      	nop
 8009678:	200008e1 	.word	0x200008e1

0800967c <__sinit_lock_acquire>:
 800967c:	4801      	ldr	r0, [pc, #4]	; (8009684 <__sinit_lock_acquire+0x8>)
 800967e:	f000 b8a7 	b.w	80097d0 <__retarget_lock_acquire_recursive>
 8009682:	bf00      	nop
 8009684:	200008e2 	.word	0x200008e2

08009688 <__sinit_lock_release>:
 8009688:	4801      	ldr	r0, [pc, #4]	; (8009690 <__sinit_lock_release+0x8>)
 800968a:	f000 b8a2 	b.w	80097d2 <__retarget_lock_release_recursive>
 800968e:	bf00      	nop
 8009690:	200008e2 	.word	0x200008e2

08009694 <__sinit>:
 8009694:	b510      	push	{r4, lr}
 8009696:	4604      	mov	r4, r0
 8009698:	f7ff fff0 	bl	800967c <__sinit_lock_acquire>
 800969c:	69a3      	ldr	r3, [r4, #24]
 800969e:	b11b      	cbz	r3, 80096a8 <__sinit+0x14>
 80096a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096a4:	f7ff bff0 	b.w	8009688 <__sinit_lock_release>
 80096a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80096ac:	6523      	str	r3, [r4, #80]	; 0x50
 80096ae:	4b13      	ldr	r3, [pc, #76]	; (80096fc <__sinit+0x68>)
 80096b0:	4a13      	ldr	r2, [pc, #76]	; (8009700 <__sinit+0x6c>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80096b6:	42a3      	cmp	r3, r4
 80096b8:	bf04      	itt	eq
 80096ba:	2301      	moveq	r3, #1
 80096bc:	61a3      	streq	r3, [r4, #24]
 80096be:	4620      	mov	r0, r4
 80096c0:	f000 f820 	bl	8009704 <__sfp>
 80096c4:	6060      	str	r0, [r4, #4]
 80096c6:	4620      	mov	r0, r4
 80096c8:	f000 f81c 	bl	8009704 <__sfp>
 80096cc:	60a0      	str	r0, [r4, #8]
 80096ce:	4620      	mov	r0, r4
 80096d0:	f000 f818 	bl	8009704 <__sfp>
 80096d4:	2200      	movs	r2, #0
 80096d6:	60e0      	str	r0, [r4, #12]
 80096d8:	2104      	movs	r1, #4
 80096da:	6860      	ldr	r0, [r4, #4]
 80096dc:	f7ff ff82 	bl	80095e4 <std>
 80096e0:	68a0      	ldr	r0, [r4, #8]
 80096e2:	2201      	movs	r2, #1
 80096e4:	2109      	movs	r1, #9
 80096e6:	f7ff ff7d 	bl	80095e4 <std>
 80096ea:	68e0      	ldr	r0, [r4, #12]
 80096ec:	2202      	movs	r2, #2
 80096ee:	2112      	movs	r1, #18
 80096f0:	f7ff ff78 	bl	80095e4 <std>
 80096f4:	2301      	movs	r3, #1
 80096f6:	61a3      	str	r3, [r4, #24]
 80096f8:	e7d2      	b.n	80096a0 <__sinit+0xc>
 80096fa:	bf00      	nop
 80096fc:	08009ab0 	.word	0x08009ab0
 8009700:	0800962d 	.word	0x0800962d

08009704 <__sfp>:
 8009704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009706:	4607      	mov	r7, r0
 8009708:	f7ff ffac 	bl	8009664 <__sfp_lock_acquire>
 800970c:	4b1e      	ldr	r3, [pc, #120]	; (8009788 <__sfp+0x84>)
 800970e:	681e      	ldr	r6, [r3, #0]
 8009710:	69b3      	ldr	r3, [r6, #24]
 8009712:	b913      	cbnz	r3, 800971a <__sfp+0x16>
 8009714:	4630      	mov	r0, r6
 8009716:	f7ff ffbd 	bl	8009694 <__sinit>
 800971a:	3648      	adds	r6, #72	; 0x48
 800971c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009720:	3b01      	subs	r3, #1
 8009722:	d503      	bpl.n	800972c <__sfp+0x28>
 8009724:	6833      	ldr	r3, [r6, #0]
 8009726:	b30b      	cbz	r3, 800976c <__sfp+0x68>
 8009728:	6836      	ldr	r6, [r6, #0]
 800972a:	e7f7      	b.n	800971c <__sfp+0x18>
 800972c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009730:	b9d5      	cbnz	r5, 8009768 <__sfp+0x64>
 8009732:	4b16      	ldr	r3, [pc, #88]	; (800978c <__sfp+0x88>)
 8009734:	60e3      	str	r3, [r4, #12]
 8009736:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800973a:	6665      	str	r5, [r4, #100]	; 0x64
 800973c:	f000 f847 	bl	80097ce <__retarget_lock_init_recursive>
 8009740:	f7ff ff96 	bl	8009670 <__sfp_lock_release>
 8009744:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009748:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800974c:	6025      	str	r5, [r4, #0]
 800974e:	61a5      	str	r5, [r4, #24]
 8009750:	2208      	movs	r2, #8
 8009752:	4629      	mov	r1, r5
 8009754:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009758:	f7fd fc74 	bl	8007044 <memset>
 800975c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009760:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009764:	4620      	mov	r0, r4
 8009766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009768:	3468      	adds	r4, #104	; 0x68
 800976a:	e7d9      	b.n	8009720 <__sfp+0x1c>
 800976c:	2104      	movs	r1, #4
 800976e:	4638      	mov	r0, r7
 8009770:	f7ff ff62 	bl	8009638 <__sfmoreglue>
 8009774:	4604      	mov	r4, r0
 8009776:	6030      	str	r0, [r6, #0]
 8009778:	2800      	cmp	r0, #0
 800977a:	d1d5      	bne.n	8009728 <__sfp+0x24>
 800977c:	f7ff ff78 	bl	8009670 <__sfp_lock_release>
 8009780:	230c      	movs	r3, #12
 8009782:	603b      	str	r3, [r7, #0]
 8009784:	e7ee      	b.n	8009764 <__sfp+0x60>
 8009786:	bf00      	nop
 8009788:	08009ab0 	.word	0x08009ab0
 800978c:	ffff0001 	.word	0xffff0001

08009790 <_fwalk_reent>:
 8009790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009794:	4606      	mov	r6, r0
 8009796:	4688      	mov	r8, r1
 8009798:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800979c:	2700      	movs	r7, #0
 800979e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80097a2:	f1b9 0901 	subs.w	r9, r9, #1
 80097a6:	d505      	bpl.n	80097b4 <_fwalk_reent+0x24>
 80097a8:	6824      	ldr	r4, [r4, #0]
 80097aa:	2c00      	cmp	r4, #0
 80097ac:	d1f7      	bne.n	800979e <_fwalk_reent+0xe>
 80097ae:	4638      	mov	r0, r7
 80097b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097b4:	89ab      	ldrh	r3, [r5, #12]
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d907      	bls.n	80097ca <_fwalk_reent+0x3a>
 80097ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80097be:	3301      	adds	r3, #1
 80097c0:	d003      	beq.n	80097ca <_fwalk_reent+0x3a>
 80097c2:	4629      	mov	r1, r5
 80097c4:	4630      	mov	r0, r6
 80097c6:	47c0      	blx	r8
 80097c8:	4307      	orrs	r7, r0
 80097ca:	3568      	adds	r5, #104	; 0x68
 80097cc:	e7e9      	b.n	80097a2 <_fwalk_reent+0x12>

080097ce <__retarget_lock_init_recursive>:
 80097ce:	4770      	bx	lr

080097d0 <__retarget_lock_acquire_recursive>:
 80097d0:	4770      	bx	lr

080097d2 <__retarget_lock_release_recursive>:
 80097d2:	4770      	bx	lr

080097d4 <__swhatbuf_r>:
 80097d4:	b570      	push	{r4, r5, r6, lr}
 80097d6:	460e      	mov	r6, r1
 80097d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097dc:	2900      	cmp	r1, #0
 80097de:	b096      	sub	sp, #88	; 0x58
 80097e0:	4614      	mov	r4, r2
 80097e2:	461d      	mov	r5, r3
 80097e4:	da08      	bge.n	80097f8 <__swhatbuf_r+0x24>
 80097e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80097ea:	2200      	movs	r2, #0
 80097ec:	602a      	str	r2, [r5, #0]
 80097ee:	061a      	lsls	r2, r3, #24
 80097f0:	d410      	bmi.n	8009814 <__swhatbuf_r+0x40>
 80097f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097f6:	e00e      	b.n	8009816 <__swhatbuf_r+0x42>
 80097f8:	466a      	mov	r2, sp
 80097fa:	f000 f8fb 	bl	80099f4 <_fstat_r>
 80097fe:	2800      	cmp	r0, #0
 8009800:	dbf1      	blt.n	80097e6 <__swhatbuf_r+0x12>
 8009802:	9a01      	ldr	r2, [sp, #4]
 8009804:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009808:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800980c:	425a      	negs	r2, r3
 800980e:	415a      	adcs	r2, r3
 8009810:	602a      	str	r2, [r5, #0]
 8009812:	e7ee      	b.n	80097f2 <__swhatbuf_r+0x1e>
 8009814:	2340      	movs	r3, #64	; 0x40
 8009816:	2000      	movs	r0, #0
 8009818:	6023      	str	r3, [r4, #0]
 800981a:	b016      	add	sp, #88	; 0x58
 800981c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009820 <__smakebuf_r>:
 8009820:	898b      	ldrh	r3, [r1, #12]
 8009822:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009824:	079d      	lsls	r5, r3, #30
 8009826:	4606      	mov	r6, r0
 8009828:	460c      	mov	r4, r1
 800982a:	d507      	bpl.n	800983c <__smakebuf_r+0x1c>
 800982c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009830:	6023      	str	r3, [r4, #0]
 8009832:	6123      	str	r3, [r4, #16]
 8009834:	2301      	movs	r3, #1
 8009836:	6163      	str	r3, [r4, #20]
 8009838:	b002      	add	sp, #8
 800983a:	bd70      	pop	{r4, r5, r6, pc}
 800983c:	ab01      	add	r3, sp, #4
 800983e:	466a      	mov	r2, sp
 8009840:	f7ff ffc8 	bl	80097d4 <__swhatbuf_r>
 8009844:	9900      	ldr	r1, [sp, #0]
 8009846:	4605      	mov	r5, r0
 8009848:	4630      	mov	r0, r6
 800984a:	f7ff fb07 	bl	8008e5c <_malloc_r>
 800984e:	b948      	cbnz	r0, 8009864 <__smakebuf_r+0x44>
 8009850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009854:	059a      	lsls	r2, r3, #22
 8009856:	d4ef      	bmi.n	8009838 <__smakebuf_r+0x18>
 8009858:	f023 0303 	bic.w	r3, r3, #3
 800985c:	f043 0302 	orr.w	r3, r3, #2
 8009860:	81a3      	strh	r3, [r4, #12]
 8009862:	e7e3      	b.n	800982c <__smakebuf_r+0xc>
 8009864:	4b0d      	ldr	r3, [pc, #52]	; (800989c <__smakebuf_r+0x7c>)
 8009866:	62b3      	str	r3, [r6, #40]	; 0x28
 8009868:	89a3      	ldrh	r3, [r4, #12]
 800986a:	6020      	str	r0, [r4, #0]
 800986c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009870:	81a3      	strh	r3, [r4, #12]
 8009872:	9b00      	ldr	r3, [sp, #0]
 8009874:	6163      	str	r3, [r4, #20]
 8009876:	9b01      	ldr	r3, [sp, #4]
 8009878:	6120      	str	r0, [r4, #16]
 800987a:	b15b      	cbz	r3, 8009894 <__smakebuf_r+0x74>
 800987c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009880:	4630      	mov	r0, r6
 8009882:	f000 f8c9 	bl	8009a18 <_isatty_r>
 8009886:	b128      	cbz	r0, 8009894 <__smakebuf_r+0x74>
 8009888:	89a3      	ldrh	r3, [r4, #12]
 800988a:	f023 0303 	bic.w	r3, r3, #3
 800988e:	f043 0301 	orr.w	r3, r3, #1
 8009892:	81a3      	strh	r3, [r4, #12]
 8009894:	89a0      	ldrh	r0, [r4, #12]
 8009896:	4305      	orrs	r5, r0
 8009898:	81a5      	strh	r5, [r4, #12]
 800989a:	e7cd      	b.n	8009838 <__smakebuf_r+0x18>
 800989c:	0800962d 	.word	0x0800962d

080098a0 <_raise_r>:
 80098a0:	291f      	cmp	r1, #31
 80098a2:	b538      	push	{r3, r4, r5, lr}
 80098a4:	4604      	mov	r4, r0
 80098a6:	460d      	mov	r5, r1
 80098a8:	d904      	bls.n	80098b4 <_raise_r+0x14>
 80098aa:	2316      	movs	r3, #22
 80098ac:	6003      	str	r3, [r0, #0]
 80098ae:	f04f 30ff 	mov.w	r0, #4294967295
 80098b2:	bd38      	pop	{r3, r4, r5, pc}
 80098b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80098b6:	b112      	cbz	r2, 80098be <_raise_r+0x1e>
 80098b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098bc:	b94b      	cbnz	r3, 80098d2 <_raise_r+0x32>
 80098be:	4620      	mov	r0, r4
 80098c0:	f000 f830 	bl	8009924 <_getpid_r>
 80098c4:	462a      	mov	r2, r5
 80098c6:	4601      	mov	r1, r0
 80098c8:	4620      	mov	r0, r4
 80098ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098ce:	f000 b817 	b.w	8009900 <_kill_r>
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d00a      	beq.n	80098ec <_raise_r+0x4c>
 80098d6:	1c59      	adds	r1, r3, #1
 80098d8:	d103      	bne.n	80098e2 <_raise_r+0x42>
 80098da:	2316      	movs	r3, #22
 80098dc:	6003      	str	r3, [r0, #0]
 80098de:	2001      	movs	r0, #1
 80098e0:	e7e7      	b.n	80098b2 <_raise_r+0x12>
 80098e2:	2400      	movs	r4, #0
 80098e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80098e8:	4628      	mov	r0, r5
 80098ea:	4798      	blx	r3
 80098ec:	2000      	movs	r0, #0
 80098ee:	e7e0      	b.n	80098b2 <_raise_r+0x12>

080098f0 <raise>:
 80098f0:	4b02      	ldr	r3, [pc, #8]	; (80098fc <raise+0xc>)
 80098f2:	4601      	mov	r1, r0
 80098f4:	6818      	ldr	r0, [r3, #0]
 80098f6:	f7ff bfd3 	b.w	80098a0 <_raise_r>
 80098fa:	bf00      	nop
 80098fc:	20000018 	.word	0x20000018

08009900 <_kill_r>:
 8009900:	b538      	push	{r3, r4, r5, lr}
 8009902:	4d07      	ldr	r5, [pc, #28]	; (8009920 <_kill_r+0x20>)
 8009904:	2300      	movs	r3, #0
 8009906:	4604      	mov	r4, r0
 8009908:	4608      	mov	r0, r1
 800990a:	4611      	mov	r1, r2
 800990c:	602b      	str	r3, [r5, #0]
 800990e:	f7f8 fe23 	bl	8002558 <_kill>
 8009912:	1c43      	adds	r3, r0, #1
 8009914:	d102      	bne.n	800991c <_kill_r+0x1c>
 8009916:	682b      	ldr	r3, [r5, #0]
 8009918:	b103      	cbz	r3, 800991c <_kill_r+0x1c>
 800991a:	6023      	str	r3, [r4, #0]
 800991c:	bd38      	pop	{r3, r4, r5, pc}
 800991e:	bf00      	nop
 8009920:	200008dc 	.word	0x200008dc

08009924 <_getpid_r>:
 8009924:	f7f8 be10 	b.w	8002548 <_getpid>

08009928 <__sread>:
 8009928:	b510      	push	{r4, lr}
 800992a:	460c      	mov	r4, r1
 800992c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009930:	f000 f894 	bl	8009a5c <_read_r>
 8009934:	2800      	cmp	r0, #0
 8009936:	bfab      	itete	ge
 8009938:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800993a:	89a3      	ldrhlt	r3, [r4, #12]
 800993c:	181b      	addge	r3, r3, r0
 800993e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009942:	bfac      	ite	ge
 8009944:	6563      	strge	r3, [r4, #84]	; 0x54
 8009946:	81a3      	strhlt	r3, [r4, #12]
 8009948:	bd10      	pop	{r4, pc}

0800994a <__swrite>:
 800994a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800994e:	461f      	mov	r7, r3
 8009950:	898b      	ldrh	r3, [r1, #12]
 8009952:	05db      	lsls	r3, r3, #23
 8009954:	4605      	mov	r5, r0
 8009956:	460c      	mov	r4, r1
 8009958:	4616      	mov	r6, r2
 800995a:	d505      	bpl.n	8009968 <__swrite+0x1e>
 800995c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009960:	2302      	movs	r3, #2
 8009962:	2200      	movs	r2, #0
 8009964:	f000 f868 	bl	8009a38 <_lseek_r>
 8009968:	89a3      	ldrh	r3, [r4, #12]
 800996a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800996e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009972:	81a3      	strh	r3, [r4, #12]
 8009974:	4632      	mov	r2, r6
 8009976:	463b      	mov	r3, r7
 8009978:	4628      	mov	r0, r5
 800997a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800997e:	f000 b817 	b.w	80099b0 <_write_r>

08009982 <__sseek>:
 8009982:	b510      	push	{r4, lr}
 8009984:	460c      	mov	r4, r1
 8009986:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800998a:	f000 f855 	bl	8009a38 <_lseek_r>
 800998e:	1c43      	adds	r3, r0, #1
 8009990:	89a3      	ldrh	r3, [r4, #12]
 8009992:	bf15      	itete	ne
 8009994:	6560      	strne	r0, [r4, #84]	; 0x54
 8009996:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800999a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800999e:	81a3      	strheq	r3, [r4, #12]
 80099a0:	bf18      	it	ne
 80099a2:	81a3      	strhne	r3, [r4, #12]
 80099a4:	bd10      	pop	{r4, pc}

080099a6 <__sclose>:
 80099a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099aa:	f000 b813 	b.w	80099d4 <_close_r>
	...

080099b0 <_write_r>:
 80099b0:	b538      	push	{r3, r4, r5, lr}
 80099b2:	4d07      	ldr	r5, [pc, #28]	; (80099d0 <_write_r+0x20>)
 80099b4:	4604      	mov	r4, r0
 80099b6:	4608      	mov	r0, r1
 80099b8:	4611      	mov	r1, r2
 80099ba:	2200      	movs	r2, #0
 80099bc:	602a      	str	r2, [r5, #0]
 80099be:	461a      	mov	r2, r3
 80099c0:	f7f8 fe01 	bl	80025c6 <_write>
 80099c4:	1c43      	adds	r3, r0, #1
 80099c6:	d102      	bne.n	80099ce <_write_r+0x1e>
 80099c8:	682b      	ldr	r3, [r5, #0]
 80099ca:	b103      	cbz	r3, 80099ce <_write_r+0x1e>
 80099cc:	6023      	str	r3, [r4, #0]
 80099ce:	bd38      	pop	{r3, r4, r5, pc}
 80099d0:	200008dc 	.word	0x200008dc

080099d4 <_close_r>:
 80099d4:	b538      	push	{r3, r4, r5, lr}
 80099d6:	4d06      	ldr	r5, [pc, #24]	; (80099f0 <_close_r+0x1c>)
 80099d8:	2300      	movs	r3, #0
 80099da:	4604      	mov	r4, r0
 80099dc:	4608      	mov	r0, r1
 80099de:	602b      	str	r3, [r5, #0]
 80099e0:	f7f8 fe0d 	bl	80025fe <_close>
 80099e4:	1c43      	adds	r3, r0, #1
 80099e6:	d102      	bne.n	80099ee <_close_r+0x1a>
 80099e8:	682b      	ldr	r3, [r5, #0]
 80099ea:	b103      	cbz	r3, 80099ee <_close_r+0x1a>
 80099ec:	6023      	str	r3, [r4, #0]
 80099ee:	bd38      	pop	{r3, r4, r5, pc}
 80099f0:	200008dc 	.word	0x200008dc

080099f4 <_fstat_r>:
 80099f4:	b538      	push	{r3, r4, r5, lr}
 80099f6:	4d07      	ldr	r5, [pc, #28]	; (8009a14 <_fstat_r+0x20>)
 80099f8:	2300      	movs	r3, #0
 80099fa:	4604      	mov	r4, r0
 80099fc:	4608      	mov	r0, r1
 80099fe:	4611      	mov	r1, r2
 8009a00:	602b      	str	r3, [r5, #0]
 8009a02:	f7f8 fe08 	bl	8002616 <_fstat>
 8009a06:	1c43      	adds	r3, r0, #1
 8009a08:	d102      	bne.n	8009a10 <_fstat_r+0x1c>
 8009a0a:	682b      	ldr	r3, [r5, #0]
 8009a0c:	b103      	cbz	r3, 8009a10 <_fstat_r+0x1c>
 8009a0e:	6023      	str	r3, [r4, #0]
 8009a10:	bd38      	pop	{r3, r4, r5, pc}
 8009a12:	bf00      	nop
 8009a14:	200008dc 	.word	0x200008dc

08009a18 <_isatty_r>:
 8009a18:	b538      	push	{r3, r4, r5, lr}
 8009a1a:	4d06      	ldr	r5, [pc, #24]	; (8009a34 <_isatty_r+0x1c>)
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	4604      	mov	r4, r0
 8009a20:	4608      	mov	r0, r1
 8009a22:	602b      	str	r3, [r5, #0]
 8009a24:	f7f8 fe07 	bl	8002636 <_isatty>
 8009a28:	1c43      	adds	r3, r0, #1
 8009a2a:	d102      	bne.n	8009a32 <_isatty_r+0x1a>
 8009a2c:	682b      	ldr	r3, [r5, #0]
 8009a2e:	b103      	cbz	r3, 8009a32 <_isatty_r+0x1a>
 8009a30:	6023      	str	r3, [r4, #0]
 8009a32:	bd38      	pop	{r3, r4, r5, pc}
 8009a34:	200008dc 	.word	0x200008dc

08009a38 <_lseek_r>:
 8009a38:	b538      	push	{r3, r4, r5, lr}
 8009a3a:	4d07      	ldr	r5, [pc, #28]	; (8009a58 <_lseek_r+0x20>)
 8009a3c:	4604      	mov	r4, r0
 8009a3e:	4608      	mov	r0, r1
 8009a40:	4611      	mov	r1, r2
 8009a42:	2200      	movs	r2, #0
 8009a44:	602a      	str	r2, [r5, #0]
 8009a46:	461a      	mov	r2, r3
 8009a48:	f7f8 fe00 	bl	800264c <_lseek>
 8009a4c:	1c43      	adds	r3, r0, #1
 8009a4e:	d102      	bne.n	8009a56 <_lseek_r+0x1e>
 8009a50:	682b      	ldr	r3, [r5, #0]
 8009a52:	b103      	cbz	r3, 8009a56 <_lseek_r+0x1e>
 8009a54:	6023      	str	r3, [r4, #0]
 8009a56:	bd38      	pop	{r3, r4, r5, pc}
 8009a58:	200008dc 	.word	0x200008dc

08009a5c <_read_r>:
 8009a5c:	b538      	push	{r3, r4, r5, lr}
 8009a5e:	4d07      	ldr	r5, [pc, #28]	; (8009a7c <_read_r+0x20>)
 8009a60:	4604      	mov	r4, r0
 8009a62:	4608      	mov	r0, r1
 8009a64:	4611      	mov	r1, r2
 8009a66:	2200      	movs	r2, #0
 8009a68:	602a      	str	r2, [r5, #0]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	f7f8 fd8e 	bl	800258c <_read>
 8009a70:	1c43      	adds	r3, r0, #1
 8009a72:	d102      	bne.n	8009a7a <_read_r+0x1e>
 8009a74:	682b      	ldr	r3, [r5, #0]
 8009a76:	b103      	cbz	r3, 8009a7a <_read_r+0x1e>
 8009a78:	6023      	str	r3, [r4, #0]
 8009a7a:	bd38      	pop	{r3, r4, r5, pc}
 8009a7c:	200008dc 	.word	0x200008dc

08009a80 <_init>:
 8009a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a82:	bf00      	nop
 8009a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a86:	bc08      	pop	{r3}
 8009a88:	469e      	mov	lr, r3
 8009a8a:	4770      	bx	lr

08009a8c <_fini>:
 8009a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a8e:	bf00      	nop
 8009a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a92:	bc08      	pop	{r3}
 8009a94:	469e      	mov	lr, r3
 8009a96:	4770      	bx	lr
